{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/App.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RootElement",
          "members": [
            {
              "kind": "field",
              "name": "outlet",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "pathname",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "pathname"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              },
              "attribute": "divcordTable"
            }
          ],
          "attributes": [
            {
              "name": "pathname",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "pathname"
            },
            {
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              },
              "fieldName": "divcordTable"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "app-root",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RootElement",
          "declaration": {
            "name": "RootElement",
            "module": "src/App.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "app-root",
          "declaration": {
            "name": "RootElement",
            "module": "src/App.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/cards.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "cardsByMaps",
          "return": {
            "type": {
              "text": "Record<string, CardBySource[]>"
            }
          },
          "parameters": [
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              }
            }
          ],
          "description": "Returns Record, where key - name of map, value - card name, it's verification status in context of given map and maybe mapboss, if card drops from mapboss"
        },
        {
          "kind": "function",
          "name": "sortByWeight",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "cards",
              "type": {
                "text": "{ card: string }[] | string[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "Readonly<PoeData>"
              }
            }
          ],
          "description": "Sort cards by weight, start from the most rare. If card has no weight, force it to the end"
        },
        {
          "kind": "function",
          "name": "bossesInMap",
          "return": {
            "type": {
              "text": "IMapBoss[]"
            }
          },
          "parameters": [
            {
              "name": "map",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "cardsByMapboss",
          "return": {
            "type": {
              "text": "CardBySource[]"
            }
          },
          "parameters": [
            {
              "name": "boss",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "cardsByActboss",
          "return": {
            "type": {
              "text": "CardBySource[]"
            }
          },
          "parameters": [
            {
              "name": "boss",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "cardsBySource",
          "return": {
            "type": {
              "text": "CardBySource[]"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "ISource"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "cardsBySourceTypes",
          "return": {
            "type": {
              "text": "SourceAndCards[]"
            }
          },
          "parameters": [
            {
              "name": "sourceTypes",
              "type": {
                "text": "SourceType[]"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "sourcetypesMap",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              },
              "description": "Records from divcord table"
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ],
          "description": "Creates a map with key: SourceType and value: number of sources of this type.\r\nFor Example, key: \"Map\", and it's value: 177 mean, that there are 177 maps overall"
        },
        {
          "kind": "function",
          "name": "_sourcetypesMap",
          "return": {
            "type": {
              "text": "Map<SourceType, number>"
            }
          },
          "parameters": [
            {
              "name": "sourcesAndCards",
              "type": {
                "text": "SourceAndCards[]"
              }
            }
          ],
          "description": "Creates a map with key: SourceType and value: number of sources of this type.\r\nFor Example, key: \"Map\", and it's value: 177 mean, that there are 177 maps overall"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cardsByMaps",
          "declaration": {
            "name": "cardsByMaps",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "sortByWeight",
          "declaration": {
            "name": "sortByWeight",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "bossesInMap",
          "declaration": {
            "name": "bossesInMap",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsByMapboss",
          "declaration": {
            "name": "cardsByMapboss",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsByActboss",
          "declaration": {
            "name": "cardsByActboss",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsBySource",
          "declaration": {
            "name": "cardsBySource",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsBySourceTypes",
          "declaration": {
            "name": "cardsBySourceTypes",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "sourcetypesMap",
          "declaration": {
            "name": "sourcetypesMap",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "_sourcetypesMap",
          "declaration": {
            "name": "_sourcetypesMap",
            "module": "src/cards.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "divcordTableContext"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "divcordTableContext",
          "declaration": {
            "name": "divcordTableContext",
            "module": "src/context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/divcord.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents the divcord spreadsheet https://docs.google.com/spreadsheets/d/1Pf2KNuGguZLyf6eu_R0E503U0QNyfMZqaRETsN5g6kU/edit?pli=1#gid=0",
          "name": "SourcefulDivcordTable",
          "members": [
            {
              "kind": "field",
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              },
              "default": "records"
            },
            {
              "kind": "method",
              "name": "globalDrops",
              "return": {
                "type": {
                  "text": "Map<CardName, ISource>"
                }
              },
              "description": "Returns Map, where key is card name and value is Source object with global drop type and information about min and max level drop"
            },
            {
              "kind": "method",
              "name": "cards",
              "return": {
                "type": {
                  "text": "CardName[]"
                }
              },
              "description": "Returns Array of all card names"
            },
            {
              "kind": "method",
              "name": "sourcesByCard",
              "return": {
                "type": {
                  "text": "ISource[]"
                }
              },
              "parameters": [
                {
                  "name": "card",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns Array of sources from all records, accociated with given card"
            },
            {
              "kind": "method",
              "name": "cardSourcesMap",
              "return": {
                "type": {
                  "text": "Map<CardName, ISource[]>"
                }
              },
              "description": "Returns Map, where key is card name and value is Array of sources from all records, accociated with given card"
            },
            {
              "kind": "method",
              "name": "recordsByCard",
              "return": {
                "type": {
                  "text": "DivcordRecord[]"
                }
              },
              "parameters": [
                {
                  "name": "card",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns Array of records, accociated with given card"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourcefulDivcordTable",
          "declaration": {
            "name": "SourcefulDivcordTable",
            "module": "src/divcord.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/DivcordLoader.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivcordLoaderEvent",
          "superclass": {
            "name": "CustomEvent",
            "module": "src/DivcordLoader.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "DivcordLoader",
          "members": [
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "DivcordLoaderState"
              },
              "default": "'idle'"
            },
            {
              "kind": "field",
              "name": "#cache",
              "privacy": "private",
              "type": {
                "text": "Cache"
              },
              "default": "await caches.open(CACHE_KEY)"
            },
            {
              "kind": "field",
              "name": "#recordsStorage",
              "privacy": "private",
              "default": "new LocalStorageManager<DivcordRecord[], typeof LOCAL_STORAGE_KEY>(LOCAL_STORAGE_KEY)"
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "DivcordLoaderEventType"
                  }
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "(e: DivcordLoaderEvent) => void"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "state"
            },
            {
              "kind": "method",
              "name": "getRecordsAndRunUpdateIfNeeded",
              "return": {
                "type": {
                  "text": "Promise<DivcordRecord[]>"
                }
              }
            },
            {
              "kind": "method",
              "name": "cacheDate",
              "return": {
                "type": {
                  "text": "Promise<Date | null>"
                }
              }
            },
            {
              "kind": "method",
              "name": "cacheAge",
              "return": {
                "type": {
                  "text": "Promise<number | null>"
                }
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "Promise<CacheValidity>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#freshestAvailableRecords"
            },
            {
              "kind": "method",
              "name": "#cachedResponses",
              "return": {
                "type": {
                  "text": "Promise<DivcordResponses | null>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#serderesponses",
              "return": {
                "type": {
                  "text": "Promise<IDivcordData>"
                }
              },
              "parameters": [
                {
                  "name": "r",
                  "type": {
                    "text": "DivcordResponses"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#fromStaticJson",
              "return": {
                "type": {
                  "text": "Promise<DivcordRecord[]>"
                }
              }
            }
          ],
          "events": [
            {
              "name": "records-updated",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "superclass": {
            "name": "EventTarget",
            "module": "src/DivcordLoader.ts"
          }
        },
        {
          "kind": "function",
          "name": "parseRecords",
          "return": {
            "type": {
              "text": "Promise<DivcordRecord[]>"
            }
          },
          "parameters": [
            {
              "name": "divcord",
              "type": {
                "text": "IDivcordData"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "divcordLoader",
          "default": "new DivcordLoader(cache)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordLoaderEvent",
          "declaration": {
            "name": "DivcordLoaderEvent",
            "module": "src/DivcordLoader.ts"
          }
        },
        {
          "kind": "js",
          "name": "DivcordLoader",
          "declaration": {
            "name": "DivcordLoader",
            "module": "src/DivcordLoader.ts"
          }
        },
        {
          "kind": "js",
          "name": "parseRecords",
          "declaration": {
            "name": "parseRecords",
            "module": "src/DivcordLoader.ts"
          }
        },
        {
          "kind": "js",
          "name": "divcordLoader",
          "declaration": {
            "name": "divcordLoader",
            "module": "src/DivcordLoader.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SetTransitionNameEvent",
          "superclass": {
            "name": "CustomEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "function",
          "name": "dispatchSetTransitionName",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "HTMLElement & { href?: string }"
              }
            },
            {
              "name": "transitionName",
              "type": {
                "text": "TransitionName"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SetTransitionNameEvent",
          "declaration": {
            "name": "SetTransitionNameEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "js",
          "name": "dispatchSetTransitionName",
          "declaration": {
            "name": "dispatchSetTransitionName",
            "module": "src/events.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/linkStyles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "linkStyles",
          "default": "css`\r\n\ta:link {\r\n\t\ttext-decoration: none;\r\n\t}\r\n\r\n\ta,\r\n\ta:visited {\r\n\t\tcolor: var(--source-color, #bbbbbb);\r\n\t}\r\n\r\n\ta:hover {\r\n\t\tcolor: var(--link-color-hover, skyblue);\r\n\t\ttext-decoration: underline;\r\n\t}\r\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "linkStyles",
          "declaration": {
            "name": "linkStyles",
            "module": "src/linkStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/main.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/PoeData.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PoeData",
          "members": [
            {
              "kind": "field",
              "name": "acts",
              "type": {
                "text": "IActArea[]"
              },
              "default": "acts"
            },
            {
              "kind": "field",
              "name": "cards",
              "type": {
                "text": "Record<string, ICard>"
              },
              "default": "cards"
            },
            {
              "kind": "field",
              "name": "maps",
              "type": {
                "text": "IMap[]"
              },
              "default": "maps"
            },
            {
              "kind": "field",
              "name": "mapbosses",
              "type": {
                "text": "IMapBoss[]"
              },
              "default": "mapbosses"
            },
            {
              "kind": "field",
              "name": "cardsMap",
              "type": {
                "text": "Map<string, ICard>"
              },
              "default": "new Map()"
            },
            {
              "kind": "method",
              "name": "findActAreaById",
              "parameters": [
                {
                  "name": "actId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findMap",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findActbossAndArea",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findMapbossAndMaps",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "card",
              "return": {
                "type": {
                  "text": "ICard | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "minLevel",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "card",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "mapboss",
              "return": {
                "type": {
                  "text": "IMapBoss | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "level",
              "return": {
                "type": {
                  "text": "number | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "'Map' | 'Act'"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "variable",
          "name": "poeData",
          "default": "new PoeData(poeDataFromJson)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PoeData",
          "declaration": {
            "name": "PoeData",
            "module": "src/PoeData.ts"
          }
        },
        {
          "kind": "js",
          "name": "poeData",
          "declaration": {
            "name": "poeData",
            "module": "src/PoeData.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/router.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "router",
          "default": "new Router({\r\n\troutes: [\r\n\t\t{\r\n\t\t\tpath: '/',\r\n\t\t\ttitle: 'Divicards',\r\n\t\t\trender: ({ query }) => {\r\n\t\t\t\treturn html`<p-home\r\n\t\t\t\t\t.page=${Number(query.page ?? 1)}\r\n\t\t\t\t\t.perPage=${Number(query['per-page'] ?? 10)}\r\n\t\t\t\t\tfilter=${query.filter ?? ''}\r\n\t\t\t\t></p-home>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/divcord',\r\n\t\t\ttitle: 'Divcord',\r\n\t\t\tplugins: [lazy(() => import('./pages/p-divcord'))],\r\n\t\t\trender: ({ query }) => html`<p-divcord\r\n\t\t\t\t.page=${Number(query.page ?? 1)}\r\n\t\t\t\t.perPage=${Number(query['per-page'] ?? 10)}\r\n\t\t\t></p-divcord>`,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/verify-faq',\r\n\t\t\ttitle: 'faq',\r\n\t\t\trender: () => html`<p-verify-faq></p-verify-faq>`,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/card/:name',\r\n\t\t\ttitle: context => decodeURI(context.params!.name),\r\n\t\t\trender: context => {\r\n\t\t\t\tconst name = decodeURI(context.params.name);\r\n\t\t\t\treturn html`<p-card .card=${name}></p-card>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/verify',\r\n\t\t\ttitle: 'Need to verify',\r\n\t\t\trender: () => {\r\n\t\t\t\treturn html`<p-verify></p-verify>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/source',\r\n\t\t\ttitle: context => decodeURI(context.query!.id),\r\n\t\t\trender: context => {\r\n\t\t\t\tconst id: string = context.query.id;\r\n\t\t\t\tconst type = context.query.type as SourceType;\r\n\t\t\t\tconst source: ISource = { id, type, kind: 'source-with-member' };\r\n\t\t\t\treturn html`<p-source .source=${source}></p-source>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/maps',\r\n\t\t\ttitle: 'Maps',\r\n\t\t\tplugins: [lazy(() => import('./pages/p-maps-table'))],\r\n\t\t\trender: ({ query }) => {\r\n\t\t\t\treturn html`<p-maps-table\r\n\t\t\t\t\t.page=${Number(query.page ?? 1)}\r\n\t\t\t\t\t.perPage=${Number(query['per-page'] ?? 10)}\r\n\t\t\t\t\tfilter=${query.filter}\r\n\t\t\t\t></p-maps-table>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/sources',\r\n\t\t\ttitle: 'Sources',\r\n\t\t\tplugins: [lazy(() => import('./pages/p-sources'))],\r\n\t\t\trender: ({ query }) => {\r\n\t\t\t\treturn html`<p-sources\r\n\t\t\t\t\t.page=${Number(query.page ?? 1)}\r\n\t\t\t\t\t.perPage=${Number(query['per-page'] ?? 10)}\r\n\t\t\t\t></p-sources>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/source-type/:id',\r\n\t\t\ttitle: context => decodeURI(context.params!.id),\r\n\t\t\trender: ({ params }) => {\r\n\t\t\t\tconst sourceType = decodeURI(params.id) as SourceType;\r\n\t\t\t\treturn html`<p-source-type .sourceType=${sourceType}></p-source-type>`;\r\n\t\t\t},\r\n\t\t},\r\n\t],\r\n})"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "router",
          "declaration": {
            "name": "router",
            "module": "src/router.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/searchCardsByQuery.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SEARCH_CRITERIA_VARIANTS",
          "type": {
            "text": "[\r\n\t'name',\r\n\t'flavour text',\r\n\t'source',\r\n\t'source type',\r\n\t'reward',\r\n\t'stack size',\r\n\t'release version',\r\n\t'release league',\r\n]"
          },
          "default": "[\r\n\t'name',\r\n\t'flavour text',\r\n\t'source',\r\n\t'source type',\r\n\t'reward',\r\n\t'stack size',\r\n\t'release version',\r\n\t'release league',\r\n]"
        },
        {
          "kind": "function",
          "name": "searchCardsByQuery",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "query",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "criterias",
              "type": {
                "text": "SearchCardsCriteria[]"
              }
            },
            {
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "escapeHtml",
          "parameters": [
            {
              "name": "htmlText",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SEARCH_CRITERIA_VARIANTS",
          "declaration": {
            "name": "SEARCH_CRITERIA_VARIANTS",
            "module": "src/searchCardsByQuery.ts"
          }
        },
        {
          "kind": "js",
          "name": "searchCardsByQuery",
          "declaration": {
            "name": "searchCardsByQuery",
            "module": "src/searchCardsByQuery.ts"
          }
        },
        {
          "kind": "js",
          "name": "escapeHtml",
          "declaration": {
            "name": "escapeHtml",
            "module": "src/searchCardsByQuery.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/storage.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Serde",
          "members": [
            {
              "kind": "method",
              "name": "serialize",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Input"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deserialize",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "s",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "LocalStorageManager",
          "members": [
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "Key"
              },
              "default": "key"
            },
            {
              "kind": "field",
              "name": "serde",
              "type": {
                "text": "Serde<T, Input>"
              },
              "default": "serde"
            },
            {
              "kind": "method",
              "name": "exists",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "T | null"
              }
            },
            {
              "kind": "method",
              "name": "save",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "Input"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "load",
              "return": {
                "type": {
                  "text": "T | null"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Serde",
          "declaration": {
            "name": "Serde",
            "module": "src/storage.ts"
          }
        },
        {
          "kind": "js",
          "name": "LocalStorageManager",
          "declaration": {
            "name": "LocalStorageManager",
            "module": "src/storage.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/toast.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "toast",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "message",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "variant",
              "default": "'primary'",
              "type": {
                "text": "ToastVariant"
              }
            },
            {
              "name": "duration",
              "default": "100_000_000"
            }
          ]
        },
        {
          "kind": "function",
          "name": "warningToast",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "message",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "toast",
          "declaration": {
            "name": "toast",
            "module": "src/toast.ts"
          }
        },
        {
          "kind": "js",
          "name": "warningToast",
          "declaration": {
            "name": "warningToast",
            "module": "src/toast.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "sourceHref",
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "ISource"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "paginate",
          "return": {
            "type": {
              "text": "T[]"
            }
          },
          "parameters": [
            {
              "name": "arr",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "page",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "perPage",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "SlConverter",
          "members": [
            {
              "kind": "field",
              "name": "#SL_DELIMETER",
              "privacy": "private",
              "static": true,
              "default": "'sl-v'",
              "type": {
                "text": "'sl-v'"
              }
            },
            {
              "kind": "method",
              "name": "toSlValue",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "s",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fromSlValue",
              "static": true,
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "s",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "ArrayAsyncRenderer",
          "members": [
            {
              "kind": "field",
              "name": "#generator",
              "privacy": "private",
              "type": {
                "text": "AsyncGenerator<T>"
              }
            },
            {
              "kind": "field",
              "name": "#elementRender",
              "privacy": "private",
              "type": {
                "text": "ElementRenderCallback<T> | undefined"
              },
              "default": "elementRender"
            },
            {
              "kind": "method",
              "name": "#initGenerator",
              "parameters": [
                {
                  "name": "arr",
                  "type": {
                    "text": "T[]"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "startViewTransition",
          "return": {
            "type": {
              "text": "Promise<unknown>"
            }
          },
          "parameters": [
            {
              "name": "cb",
              "type": {
                "text": "(...args: any[]) => any"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sourceHref",
          "declaration": {
            "name": "sourceHref",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "paginate",
          "declaration": {
            "name": "paginate",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "SlConverter",
          "declaration": {
            "name": "SlConverter",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "ArrayAsyncRenderer",
          "declaration": {
            "name": "ArrayAsyncRenderer",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "startViewTransition",
          "declaration": {
            "name": "startViewTransition",
            "module": "src/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/assets/divcordRecordsFromJson-oqtgydQs.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "i",
          "default": "e"
        },
        {
          "kind": "variable",
          "name": "r",
          "type": {
            "text": "array"
          },
          "default": "[\"Empty\",\"Monster-specific\",\"Area-specific\",\"disabled\",\"story\",\"Delirium_reward\",\"Chest_object\",\"strongbox\",\"Global Drop\",\"Vendor\"]"
        },
        {
          "kind": "variable",
          "name": "a",
          "type": {
            "text": "array"
          },
          "default": "[\"n/a\",\"confirm\",\"unclear hypothesis\",\"no hypothesis\",\"story only\",\"legacy tag\",\"open ended\"]"
        },
        {
          "kind": "variable",
          "name": "o",
          "type": {
            "text": "array"
          },
          "default": "[\"none\",\"low\",\"ok\",\"done\"]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CONFIDENCE_VARIANTS",
          "declaration": {
            "name": "o",
            "module": "dist/assets/divcordRecordsFromJson-oqtgydQs.js"
          }
        },
        {
          "kind": "js",
          "name": "GREYNOTE_VARIANTS",
          "declaration": {
            "name": "r",
            "module": "dist/assets/divcordRecordsFromJson-oqtgydQs.js"
          }
        },
        {
          "kind": "js",
          "name": "REMAINING_WORK_VARIANTS",
          "declaration": {
            "name": "a",
            "module": "dist/assets/divcordRecordsFromJson-oqtgydQs.js"
          }
        },
        {
          "kind": "js",
          "name": "divcordRecordsFromJson",
          "declaration": {
            "name": "i",
            "module": "dist/assets/divcordRecordsFromJson-oqtgydQs.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/assets/divcord_wasm-kgm_17VN.js",
      "declarations": [
        {
          "kind": "function",
          "name": "C",
          "parameters": [
            {
              "name": "e"
            },
            {
              "name": "n"
            },
            {
              "name": "t"
            }
          ]
        },
        {
          "kind": "function",
          "name": "v",
          "parameters": [
            {
              "name": "e"
            },
            {
              "name": "n"
            },
            {
              "name": "t"
            }
          ]
        },
        {
          "kind": "function",
          "name": "J",
          "parameters": [
            {
              "name": "e"
            }
          ]
        },
        {
          "kind": "function",
          "name": "q",
          "parameters": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "q",
            "module": "dist/assets/divcord_wasm-kgm_17VN.js"
          }
        },
        {
          "kind": "js",
          "name": "find_cards_by_source_types",
          "declaration": {
            "name": "v",
            "module": "dist/assets/divcord_wasm-kgm_17VN.js"
          }
        },
        {
          "kind": "js",
          "name": "initSync",
          "declaration": {
            "name": "J",
            "module": "dist/assets/divcord_wasm-kgm_17VN.js"
          }
        },
        {
          "kind": "js",
          "name": "parsed_records",
          "declaration": {
            "name": "C",
            "module": "dist/assets/divcord_wasm-kgm_17VN.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/assets/index-49CGNOB_.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "e"
        },
        {
          "kind": "function",
          "name": "t",
          "parameters": [
            {
              "name": "r"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "i",
          "type": {
            "text": "object"
          },
          "default": "{}"
        },
        {
          "kind": "function",
          "name": "s",
          "parameters": [
            {
              "name": "r"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "y"
        },
        {
          "kind": "variable",
          "name": "r"
        },
        {
          "kind": "variable",
          "name": "p"
        },
        {
          "kind": "variable",
          "name": "n"
        },
        {
          "kind": "variable",
          "name": "h"
        },
        {
          "kind": "variable",
          "name": "b"
        },
        {
          "kind": "variable",
          "name": "l",
          "default": "a[p]"
        },
        {
          "kind": "variable",
          "name": "u"
        },
        {
          "kind": "variable",
          "name": "d"
        },
        {
          "kind": "variable",
          "name": "m",
          "type": {
            "text": "number"
          },
          "default": "-1"
        },
        {
          "kind": "variable",
          "name": "f",
          "type": {
            "text": "number"
          },
          "default": "0"
        },
        {
          "kind": "variable",
          "name": "g"
        },
        {
          "kind": "variable",
          "name": "v"
        },
        {
          "kind": "variable",
          "name": "L",
          "default": "class extends We{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){const e=super.createRenderRoot();return this.renderOptions.renderBefore??=e.firstChild,e}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=dr(t,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1)}render(){return R}}"
        },
        {
          "kind": "function",
          "name": "Be",
          "parameters": [
            {
              "name": "{context:a,subscribe:e}"
            }
          ]
        },
        {
          "kind": "function",
          "name": "F",
          "parameters": [
            {
              "name": "a"
            }
          ]
        },
        {
          "kind": "function",
          "name": "o",
          "parameters": [
            {
              "name": "a"
            }
          ]
        },
        {
          "kind": "function",
          "name": "S",
          "parameters": [
            {
              "name": "a"
            }
          ]
        },
        {
          "kind": "function",
          "name": "O",
          "parameters": [
            {
              "name": "a"
            },
            {
              "name": "e"
            }
          ]
        },
        {
          "kind": "function",
          "name": "i",
          "parameters": [
            {
              "name": "n"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "M",
          "default": "new Ci(Mi)"
        },
        {
          "kind": "class",
          "description": "",
          "name": "zi",
          "members": [
            {
              "kind": "method",
              "name": "exists"
            },
            {
              "kind": "method",
              "name": "clear"
            },
            {
              "kind": "field",
              "name": "data"
            },
            {
              "kind": "method",
              "name": "save",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "load"
            },
            {
              "kind": "field",
              "name": "key",
              "default": "e"
            },
            {
              "kind": "field",
              "name": "serde",
              "default": "t"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "le",
          "default": "y`\n  :host {\n    box-sizing: border-box;\n  }\n\n  :host *,\n  :host *::before,\n  :host *::after {\n    box-sizing: inherit;\n  }\n\n  [hidden] {\n    display: none !important;\n  }\n`"
        },
        {
          "kind": "variable",
          "name": "c"
        },
        {
          "kind": "function",
          "name": "N",
          "parameters": [
            {
              "name": "a"
            },
            {
              "name": "e"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "G",
          "default": "class extends L{constructor(){super(),Object.entries(this.constructor.dependencies).forEach(([a,e])=>{this.constructor.define(a,e)})}emit(a,e){const t=new CustomEvent(a,Ee({bubbles:!0,cancelable:!1,composed:!0,detail:{}},e));return this.dispatchEvent(t),t}static define(a,e=this,t={}){const s=customElements.get(a);if(!s){customElements.define(a,class extends e{},t);return}let r=\" (unknown version)\",i=r;\"version\"in e&&e.version&&(r=\" v\"+e.version),\"version\"in s&&s.version&&(i=\" v\"+s.version),!(r&&i&&r===i)&&console.warn(`Attempted to register <${a}>${r}, but <${a}>${i} has already been registered.`)}}"
        },
        {
          "kind": "class",
          "description": "",
          "name": "anonymous_2",
          "superclass": {
            "name": "e",
            "module": "dist/assets/index-49CGNOB_.js"
          },
          "tagName": "a",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "Q",
          "default": "class extends G{constructor(){super(...arguments),this.initialRender=!1,this.svg=null,this.label=\"\",this.library=\"default\"}async resolveIcon(a,e){var t;let s;if(e?.spriteSheet)return h`<svg part=\"svg\">\n        <use part=\"use\" href=\"${a}\"></use>\n      </svg>`;try{if(s=await fetch(a,{mode:\"cors\"}),!s.ok)return s.status===410?ga:qa}catch{return qa}try{const r=document.createElement(\"div\");r.innerHTML=await s.text();const i=r.firstElementChild;if(((t=i?.tagName)==null?void 0:t.toLowerCase())!==\"svg\")return ga;St||(St=new DOMParser);const p=St.parseFromString(i.outerHTML,\"text/html\").body.querySelector(\"svg\");return p?(p.part.add(\"svg\"),document.adoptNode(p)):ga}catch{return ga}}connectedCallback(){super.connectedCallback(),Oi(this)}firstUpdated(){this.initialRender=!0,this.setIcon()}disconnectedCallback(){super.disconnectedCallback(),Ri(this)}getIconSource(){const a=Ps(this.library);return this.name&&a?{url:a.resolver(this.name),fromLibrary:!0}:{url:this.src,fromLibrary:!1}}handleLabelChange(){typeof this.label==\"string\"&&this.label.length>0?(this.setAttribute(\"role\",\"img\"),this.setAttribute(\"aria-label\",this.label),this.removeAttribute(\"aria-hidden\")):(this.removeAttribute(\"role\"),this.removeAttribute(\"aria-label\"),this.setAttribute(\"aria-hidden\",\"true\"))}async setIcon(){var a;const{url:e,fromLibrary:t}=this.getIconSource(),s=t?Ps(this.library):void 0;if(!e){this.svg=null;return}let r=Lt.get(e);if(r||(r=this.resolveIcon(e,s),Lt.set(e,r)),!this.initialRender)return;const i=await r;if(i===qa&&Lt.delete(e),e===this.getIconSource().url){if(Ji(i)){this.svg=i;return}switch(i){case qa:case ga:this.svg=null,this.emit(\"sl-error\");break;default:this.svg=i.cloneNode(!0),(a=s?.mutator)==null||a.call(s,this.svg),this.emit(\"sl-load\")}}}render(){return this.svg}}"
        },
        {
          "kind": "variable",
          "name": "a"
        },
        {
          "kind": "variable",
          "name": "C"
        },
        {
          "kind": "function",
          "name": "w",
          "parameters": [
            {
              "name": "a"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "q",
          "default": "class extends G{constructor(){super(...arguments),this.hasFocus=!1,this.label=\"\",this.disabled=!1}handleBlur(){this.hasFocus=!1,this.emit(\"sl-blur\")}handleFocus(){this.hasFocus=!0,this.emit(\"sl-focus\")}handleClick(a){this.disabled&&(a.preventDefault(),a.stopPropagation())}click(){this.button.click()}focus(a){this.button.focus(a)}blur(){this.button.blur()}render(){const a=!!this.href,e=a?Xa`a`:Xa`button`;return Ta`\n      <${e}\n        part=\"base\"\n        class=${C({\"icon-button\":!0,\"icon-button--disabled\":!a&&this.disabled,\"icon-button--focused\":this.hasFocus})}\n        ?disabled=${w(a?void 0:this.disabled)}\n        type=${w(a?void 0:\"button\")}\n        href=${w(a?this.href:void 0)}\n        target=${w(a?this.target:void 0)}\n        download=${w(a?this.download:void 0)}\n        rel=${w(a&&this.target?\"noreferrer noopener\":void 0)}\n        role=${w(a?void 0:\"button\")}\n        aria-disabled=${this.disabled?\"true\":\"false\"}\n        aria-label=\"${this.label}\"\n        tabindex=${this.disabled?\"-1\":\"0\"}\n        @blur=${this.handleBlur}\n        @focus=${this.handleFocus}\n        @click=${this.handleClick}\n      >\n        <sl-icon\n          class=\"icon-button__icon\"\n          name=${w(this.name)}\n          library=${w(this.library)}\n          src=${w(this.src)}\n          aria-hidden=\"true\"\n        ></sl-icon>\n      </${e}>\n    `}}"
        },
        {
          "kind": "function",
          "name": "s",
          "parameters": [
            {
              "name": "r"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Tr",
          "parameters": [
            {
              "name": "a"
            },
            {
              "name": "e",
              "default": "\"primary\""
            },
            {
              "name": "t",
              "default": "1e8"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Lp",
          "parameters": [
            {
              "name": "a"
            }
          ]
        },
        {
          "kind": "function",
          "name": "Oe",
          "parameters": [
            {
              "name": "a"
            },
            {
              "name": "e"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "_r",
          "default": "new An(xn)"
        },
        {
          "kind": "variable",
          "name": "ke"
        },
        {
          "kind": "function",
          "name": "Hn",
          "parameters": [
            {
              "name": "a"
            },
            {
              "name": "e"
            },
            {
              "name": "t"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "ka",
          "members": [
            {
              "kind": "field",
              "name": "#a",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "\"sl-v\""
            },
            {
              "kind": "method",
              "name": "toSlValue",
              "static": true,
              "parameters": [
                {
                  "name": "e"
                }
              ]
            },
            {
              "kind": "method",
              "name": "fromSlValue",
              "static": true,
              "parameters": [
                {
                  "name": "e"
                }
              ]
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "xr",
          "members": [
            {
              "kind": "field",
              "name": "#a",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#e",
              "privacy": "private",
              "default": "t"
            },
            {
              "kind": "method",
              "name": "#t",
              "parameters": [
                {
                  "name": "e"
                }
              ]
            }
          ]
        },
        {
          "kind": "variable",
          "name": "ls",
          "default": "class{constructor(a,e){this.handleFormData=t=>{const s=this.options.disabled(this.host),r=this.options.name(this.host),i=this.options.value(this.host),n=this.host.tagName.toLowerCase()===\"sl-button\";this.host.isConnected&&!s&&!n&&typeof r==\"string\"&&r.length>0&&typeof i<\"u\"&&(Array.isArray(i)?i.forEach(p=>{t.formData.append(r,p.toString())}):t.formData.append(r,i.toString()))},this.handleFormSubmit=t=>{var s;const r=this.options.disabled(this.host),i=this.options.reportValidity;this.form&&!this.form.noValidate&&((s=fa.get(this.form))==null||s.forEach(n=>{this.setUserInteracted(n,!0)})),this.form&&!this.form.noValidate&&!r&&!i(this.host)&&(t.preventDefault(),t.stopImmediatePropagation())},this.handleFormReset=()=>{this.options.setValue(this.host,this.options.defaultValue(this.host)),this.setUserInteracted(this.host,!1),Na.set(this.host,[])},this.handleInteraction=t=>{const s=Na.get(this.host);s.includes(t.type)||s.push(t.type),s.length===this.options.assumeInteractionOn.length&&this.setUserInteracted(this.host,!0)},this.checkFormValidity=()=>{if(this.form&&!this.form.noValidate){const t=this.form.querySelectorAll(\"*\");for(const s of t)if(typeof s.checkValidity==\"function\"&&!s.checkValidity())return!1}return!0},this.reportFormValidity=()=>{if(this.form&&!this.form.noValidate){const t=this.form.querySelectorAll(\"*\");for(const s of t)if(typeof s.reportValidity==\"function\"&&!s.reportValidity())return!1}return!0},(this.host=a).addController(this),this.options=Ee({form:t=>{const s=t.form;if(s){const i=t.getRootNode().getElementById(s);if(i)return i}return t.closest(\"form\")},name:t=>t.name,value:t=>t.value,defaultValue:t=>t.defaultValue,disabled:t=>{var s;return(s=t.disabled)!=null?s:!1},reportValidity:t=>typeof t.reportValidity==\"function\"?t.reportValidity():!0,checkValidity:t=>typeof t.checkValidity==\"function\"?t.checkValidity():!0,setValue:(t,s)=>t.value=s,assumeInteractionOn:[\"sl-input\"]},e)}hostConnected(){const a=this.options.form(this.host);a&&this.attachForm(a),Na.set(this.host,[]),this.options.assumeInteractionOn.forEach(e=>{this.host.addEventListener(e,this.handleInteraction)})}hostDisconnected(){this.detachForm(),Na.delete(this.host),this.options.assumeInteractionOn.forEach(a=>{this.host.removeEventListener(a,this.handleInteraction)})}hostUpdated(){const a=this.options.form(this.host);a||this.detachForm(),a&&this.form!==a&&(this.detachForm(),this.attachForm(a)),this.host.hasUpdated&&this.setValidity(this.host.validity.valid)}attachForm(a){a?(this.form=a,fa.has(this.form)?fa.get(this.form).add(this.host):fa.set(this.form,new Set([this.host])),this.form.addEventListener(\"formdata\",this.handleFormData),this.form.addEventListener(\"submit\",this.handleFormSubmit),this.form.addEventListener(\"reset\",this.handleFormReset),va.has(this.form)||(va.set(this.form,this.form.reportValidity),this.form.reportValidity=()=>this.reportFormValidity()),ba.has(this.form)||(ba.set(this.form,this.form.checkValidity),this.form.checkValidity=()=>this.checkFormValidity())):this.form=void 0}detachForm(){if(!this.form)return;const a=fa.get(this.form);a&&(a.delete(this.host),a.size<=0&&(this.form.removeEventListener(\"formdata\",this.handleFormData),this.form.removeEventListener(\"submit\",this.handleFormSubmit),this.form.removeEventListener(\"reset\",this.handleFormReset),va.has(this.form)&&(this.form.reportValidity=va.get(this.form),va.delete(this.form)),ba.has(this.form)&&(this.form.checkValidity=ba.get(this.form),ba.delete(this.form)),this.form=void 0))}setUserInteracted(a,e){e?Mt.add(a):Mt.delete(a),a.requestUpdate()}doAction(a,e){if(this.form){const t=document.createElement(\"button\");t.type=a,t.style.position=\"absolute\",t.style.width=\"0\",t.style.height=\"0\",t.style.clipPath=\"inset(50%)\",t.style.overflow=\"hidden\",t.style.whiteSpace=\"nowrap\",e&&(t.name=e.name,t.value=e.value,[\"formaction\",\"formenctype\",\"formmethod\",\"formnovalidate\",\"formtarget\"].forEach(s=>{e.hasAttribute(s)&&t.setAttribute(s,e.getAttribute(s))})),this.form.append(t),t.click(),t.remove()}}getForm(){var a;return(a=this.form)!=null?a:null}reset(a){this.doAction(\"reset\",a)}submit(a){this.doAction(\"submit\",a)}setValidity(a){const e=this.host,t=!!Mt.has(e),s=!!e.required;e.toggleAttribute(\"data-required\",s),e.toggleAttribute(\"data-optional\",!s),e.toggleAttribute(\"data-invalid\",!a),e.toggleAttribute(\"data-valid\",a),e.toggleAttribute(\"data-user-invalid\",!a&&t),e.toggleAttribute(\"data-user-valid\",a&&t)}updateValidity(){const a=this.host;this.setValidity(a.validity.valid)}emitInvalidEvent(a){const e=new CustomEvent(\"sl-invalid\",{bubbles:!1,composed:!1,cancelable:!0,detail:{}});a||e.preventDefault(),this.host.dispatchEvent(e)||a?.preventDefault()}}"
        },
        {
          "kind": "function",
          "name": "Mr",
          "parameters": [
            {
              "name": "a",
              "default": "\"value\""
            }
          ]
        },
        {
          "kind": "variable",
          "name": "Cr"
        },
        {
          "kind": "variable",
          "name": "T",
          "default": "class extends G{constructor(){super(...arguments),this.formControlController=new ls(this,{assumeInteractionOn:[\"sl-blur\",\"sl-input\"]}),this.hasSlotController=new ft(this,\"help-text\",\"label\"),this.localize=new Ue(this),this.hasFocus=!1,this.title=\"\",this.__numberInput=Object.assign(document.createElement(\"input\"),{type:\"number\"}),this.__dateInput=Object.assign(document.createElement(\"input\"),{type:\"date\"}),this.type=\"text\",this.name=\"\",this.value=\"\",this.defaultValue=\"\",this.size=\"medium\",this.filled=!1,this.pill=!1,this.label=\"\",this.helpText=\"\",this.clearable=!1,this.disabled=!1,this.placeholder=\"\",this.readonly=!1,this.passwordToggle=!1,this.passwordVisible=!1,this.noSpinButtons=!1,this.form=\"\",this.required=!1,this.spellcheck=!0}get valueAsDate(){var a;return this.__dateInput.type=this.type,this.__dateInput.value=this.value,((a=this.input)==null?void 0:a.valueAsDate)||this.__dateInput.valueAsDate}set valueAsDate(a){this.__dateInput.type=this.type,this.__dateInput.valueAsDate=a,this.value=this.__dateInput.value}get valueAsNumber(){var a;return this.__numberInput.value=this.value,((a=this.input)==null?void 0:a.valueAsNumber)||this.__numberInput.valueAsNumber}set valueAsNumber(a){this.__numberInput.valueAsNumber=a,this.value=this.__numberInput.value}get validity(){return this.input.validity}get validationMessage(){return this.input.validationMessage}firstUpdated(){this.formControlController.updateValidity()}handleBlur(){this.hasFocus=!1,this.emit(\"sl-blur\")}handleChange(){this.value=this.input.value,this.emit(\"sl-change\")}handleClearClick(a){this.value=\"\",this.emit(\"sl-clear\"),this.emit(\"sl-input\"),this.emit(\"sl-change\"),this.input.focus(),a.stopPropagation()}handleFocus(){this.hasFocus=!0,this.emit(\"sl-focus\")}handleInput(){this.value=this.input.value,this.formControlController.updateValidity(),this.emit(\"sl-input\")}handleInvalid(a){this.formControlController.setValidity(!1),this.formControlController.emitInvalidEvent(a)}handleKeyDown(a){const e=a.metaKey||a.ctrlKey||a.shiftKey||a.altKey;a.key===\"Enter\"&&!e&&setTimeout(()=>{!a.defaultPrevented&&!a.isComposing&&this.formControlController.submit()})}handlePasswordToggle(){this.passwordVisible=!this.passwordVisible}handleDisabledChange(){this.formControlController.setValidity(this.disabled)}handleStepChange(){this.input.step=String(this.step),this.formControlController.updateValidity()}async handleValueChange(){await this.updateComplete,this.formControlController.updateValidity()}focus(a){this.input.focus(a)}blur(){this.input.blur()}select(){this.input.select()}setSelectionRange(a,e,t=\"none\"){this.input.setSelectionRange(a,e,t)}setRangeText(a,e,t,s=\"preserve\"){const r=e??this.input.selectionStart,i=t??this.input.selectionEnd;this.input.setRangeText(a,r,i,s),this.value!==this.input.value&&(this.value=this.input.value)}showPicker(){\"showPicker\"in HTMLInputElement.prototype&&this.input.showPicker()}stepUp(){this.input.stepUp(),this.value!==this.input.value&&(this.value=this.input.value)}stepDown(){this.input.stepDown(),this.value!==this.input.value&&(this.value=this.input.value)}checkValidity(){return this.input.checkValidity()}getForm(){return this.formControlController.getForm()}reportValidity(){return this.input.reportValidity()}setCustomValidity(a){this.input.setCustomValidity(a),this.formControlController.updateValidity()}render(){const a=this.hasSlotController.test(\"label\"),e=this.hasSlotController.test(\"help-text\"),t=this.label?!0:!!a,s=this.helpText?!0:!!e,r=this.clearable&&!this.disabled&&!this.readonly,i=r&&(typeof this.value==\"number\"||this.value.length>0);return h`\n      <div\n        part=\"form-control\"\n        class=${C({\"form-control\":!0,\"form-control--small\":this.size===\"small\",\"form-control--medium\":this.size===\"medium\",\"form-control--large\":this.size===\"large\",\"form-control--has-label\":t,\"form-control--has-help-text\":s})}\n      >\n        <label\n          part=\"form-control-label\"\n          class=\"form-control__label\"\n          for=\"input\"\n          aria-hidden=${t?\"false\":\"true\"}\n        >\n          <slot name=\"label\">${this.label}</slot>\n        </label>\n\n        <div part=\"form-control-input\" class=\"form-control-input\">\n          <div\n            part=\"base\"\n            class=${C({input:!0,\"input--small\":this.size===\"small\",\"input--medium\":this.size===\"medium\",\"input--large\":this.size===\"large\",\"input--pill\":this.pill,\"input--standard\":!this.filled,\"input--filled\":this.filled,\"input--disabled\":this.disabled,\"input--focused\":this.hasFocus,\"input--empty\":!this.value,\"input--no-spin-buttons\":this.noSpinButtons})}\n          >\n            <span part=\"prefix\" class=\"input__prefix\">\n              <slot name=\"prefix\"></slot>\n            </span>\n\n            <input\n              part=\"input\"\n              id=\"input\"\n              class=\"input__control\"\n              type=${this.type===\"password\"&&this.passwordVisible?\"text\":this.type}\n              title=${this.title}\n              name=${w(this.name)}\n              ?disabled=${this.disabled}\n              ?readonly=${this.readonly}\n              ?required=${this.required}\n              placeholder=${w(this.placeholder)}\n              minlength=${w(this.minlength)}\n              maxlength=${w(this.maxlength)}\n              min=${w(this.min)}\n              max=${w(this.max)}\n              step=${w(this.step)}\n              .value=${Cr(this.value)}\n              autocapitalize=${w(this.autocapitalize)}\n              autocomplete=${w(this.autocomplete)}\n              autocorrect=${w(this.autocorrect)}\n              ?autofocus=${this.autofocus}\n              spellcheck=${this.spellcheck}\n              pattern=${w(this.pattern)}\n              enterkeyhint=${w(this.enterkeyhint)}\n              inputmode=${w(this.inputmode)}\n              aria-describedby=\"help-text\"\n              @change=${this.handleChange}\n              @input=${this.handleInput}\n              @invalid=${this.handleInvalid}\n              @keydown=${this.handleKeyDown}\n              @focus=${this.handleFocus}\n              @blur=${this.handleBlur}\n            />\n\n            ${r?h`\n                  <button\n                    part=\"clear-button\"\n                    class=${C({input__clear:!0,\"input__clear--visible\":i})}\n                    type=\"button\"\n                    aria-label=${this.localize.term(\"clearEntry\")}\n                    @click=${this.handleClearClick}\n                    tabindex=\"-1\"\n                  >\n                    <slot name=\"clear-icon\">\n                      <sl-icon name=\"x-circle-fill\" library=\"system\"></sl-icon>\n                    </slot>\n                  </button>\n                `:\"\"}\n            ${this.passwordToggle&&!this.disabled?h`\n                  <button\n                    part=\"password-toggle-button\"\n                    class=\"input__password-toggle\"\n                    type=\"button\"\n                    aria-label=${this.localize.term(this.passwordVisible?\"hidePassword\":\"showPassword\")}\n                    @click=${this.handlePasswordToggle}\n                    tabindex=\"-1\"\n                  >\n                    ${this.passwordVisible?h`\n                          <slot name=\"show-password-icon\">\n                            <sl-icon name=\"eye-slash\" library=\"system\"></sl-icon>\n                          </slot>\n                        `:h`\n                          <slot name=\"hide-password-icon\">\n                            <sl-icon name=\"eye\" library=\"system\"></sl-icon>\n                          </slot>\n                        `}\n                  </button>\n                `:\"\"}\n\n            <span part=\"suffix\" class=\"input__suffix\">\n              <slot name=\"suffix\"></slot>\n            </span>\n          </div>\n        </div>\n\n        <div\n          part=\"form-control-help-text\"\n          id=\"help-text\"\n          class=\"form-control__help-text\"\n          aria-hidden=${s?\"false\":\"true\"}\n        >\n          <slot name=\"help-text\">${this.helpText}</slot>\n        </div>\n      </div>\n    `}}"
        },
        {
          "kind": "function",
          "name": "x",
          "parameters": [
            {
              "name": "a"
            },
            {
              "name": "e"
            },
            {
              "name": "t"
            },
            {
              "name": "s"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "_",
          "default": "class extends L{constructor(){super(...arguments),this.datalistItems=[],this.hasFocus=!1,this.title=\"\",this.__numberInput=Object.assign(document.createElement(\"input\"),{type:\"number\"}),this.__dateInput=Object.assign(document.createElement(\"input\"),{type:\"date\"}),this.type=\"text\",this.internals=this.attachInternals(),this.list=\"\",this.name=\"\",this.value=\"\",this.size=\"medium\",this.filled=!1,this.pill=!1,this.label=\"\",this.helpText=\"\",this.clearable=!1,this.disabled=!1,this.placeholder=\"\",this.readonly=!1,this.passwordToggle=!1,this.passwordVisible=!1,this.noSpinButtons=!1,this.form=\"\",this.required=!1,this.spellcheck=!0}willUpdate(a){a.has(\"value\")}get valueAsDate(){return this.__dateInput.type=this.type,this.__dateInput.value=this.value,this.input?.valueAsDate||this.__dateInput.valueAsDate}set valueAsDate(a){this.__dateInput.type=this.type,this.__dateInput.valueAsDate=a,this.value=this.__dateInput.value}get valueAsNumber(){return this.__numberInput.value=this.value,this.input?.valueAsNumber||this.__numberInput.valueAsNumber}set valueAsNumber(a){this.__numberInput.valueAsNumber=a,this.value=this.__numberInput.value}get validity(){return this.input.validity}get validationMessage(){return this.input.validationMessage}handleBlur(){this.hasFocus=!1}handleChange(){this.value=this.input.value}handleClearClick(a){this.value=\"\",this.input.focus(),a.stopPropagation()}handleFocus(){this.hasFocus=!0}handleInput(){this.value=this.input.value,this.dispatchEvent(new Event(\"input\",{composed:!0,bubbles:!0}))}handlePasswordToggle(){this.passwordVisible=!this.passwordVisible}focus(a){this.input.focus(a)}blur(){this.input.blur()}select(){this.input.select()}setSelectionRange(a,e,t=\"none\"){this.input.setSelectionRange(a,e,t)}setRangeText(a,e,t,s=\"preserve\"){const r=e??this.input.selectionStart,i=t??this.input.selectionEnd;this.input.setRangeText(a,r,i,s),this.value!==this.input.value&&(this.value=this.input.value)}showPicker(){\"showPicker\"in HTMLInputElement.prototype&&this.input.showPicker()}stepUp(){this.input.stepUp(),this.value!==this.input.value&&(this.value=this.input.value)}stepDown(){this.input.stepDown(),this.value!==this.input.value&&(this.value=this.input.value)}checkValidity(){return this.input.checkValidity()}reportValidity(){return this.input.reportValidity()}setCustomValidity(a){this.input.setCustomValidity(a)}render(){const a=this.clearable&&!this.disabled&&!this.readonly,e=a&&(typeof this.value==\"number\"||this.value.length>0),t=!!this.label;return h`\n\t\t\t<div\n\t\t\t\tpart=\"form-control\"\n\t\t\t\tclass=${C({\"form-control\":!0,\"form-control--small\":this.size===\"small\",\"form-control--medium\":this.size===\"medium\",\"form-control--large\":this.size===\"large\",\"form-control--has-label\":t})}\n\t\t\t>\n\t\t\t\t<label part=\"form-control-label\" class=\"form-control__label\" for=\"input\">\n\t\t\t\t\t<slot name=\"label\">${this.label}</slot>\n\t\t\t\t</label>\n\n\t\t\t\t<div part=\"form-control-input\" class=\"form-control-input\">\n\t\t\t\t\t<div\n\t\t\t\t\t\tpart=\"base\"\n\t\t\t\t\t\tclass=${C({input:!0,\"input--small\":this.size===\"small\",\"input--medium\":this.size===\"medium\",\"input--large\":this.size===\"large\",\"input--pill\":this.pill,\"input--standard\":!this.filled,\"input--filled\":this.filled,\"input--disabled\":this.disabled,\"input--focused\":this.hasFocus,\"input--empty\":!this.value,\"input--no-spin-buttons\":this.noSpinButtons})}\n\t\t\t\t\t>\n\t\t\t\t\t\t<span part=\"prefix\" class=\"input__prefix\">\n\t\t\t\t\t\t\t<slot name=\"prefix\"></slot>\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t<datalist id=\"test-list\">\n\t\t\t\t\t\t\t${this.datalistItems.map(s=>h`<option value=${s}>${s}</option>`)}\n\t\t\t\t\t\t</datalist>\n\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tlist=\"test-list\"\n\t\t\t\t\t\t\tpart=\"input\"\n\t\t\t\t\t\t\tid=\"input\"\n\t\t\t\t\t\t\tclass=\"input__control\"\n\t\t\t\t\t\t\ttype=${this.type===\"password\"&&this.passwordVisible?\"text\":this.type}\n\t\t\t\t\t\t\ttitle=${this.title}\n\t\t\t\t\t\t\tname=${w(this.name)}\n\t\t\t\t\t\t\t?disabled=${this.disabled}\n\t\t\t\t\t\t\t?readonly=${this.readonly}\n\t\t\t\t\t\t\t?required=${this.required}\n\t\t\t\t\t\t\tplaceholder=${w(this.placeholder)}\n\t\t\t\t\t\t\tminlength=${w(this.minlength)}\n\t\t\t\t\t\t\tmaxlength=${w(this.maxlength)}\n\t\t\t\t\t\t\tmin=${w(this.min)}\n\t\t\t\t\t\t\tmax=${w(this.max)}\n\t\t\t\t\t\t\tstep=${w(this.step)}\n\t\t\t\t\t\t\t.value=${Cr(this.value)}\n\t\t\t\t\t\t\tautocapitalize=${w(this.autocapitalize)}\n\t\t\t\t\t\t\t?autofocus=${this.autofocus}\n\t\t\t\t\t\t\tspellcheck=${this.spellcheck}\n\t\t\t\t\t\t\tpattern=${w(this.pattern)}\n\t\t\t\t\t\t\tinputmode=${w(this.inputmode)}\n\t\t\t\t\t\t\taria-describedby=\"help-text\"\n\t\t\t\t\t\t\t@change=${this.handleChange}\n\t\t\t\t\t\t\t@input=${this.handleInput}\n\t\t\t\t\t\t\t@focus=${this.handleFocus}\n\t\t\t\t\t\t\t@blur=${this.handleBlur}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t${a?h`\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tpart=\"clear-button\"\n\t\t\t\t\t\t\t\t\t\tclass=${C({input__clear:!0,\"input__clear--visible\":e})}\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t@click=${this.handleClearClick}\n\t\t\t\t\t\t\t\t\t\ttabindex=\"-1\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<slot name=\"clear-icon\">\n\t\t\t\t\t\t\t\t\t\t\t<!-- <sl-icon name=\"x-circle-fill\" library=\"system\"></sl-icon> -->\n\t\t\t\t\t\t\t\t\t\t</slot>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t  `:\"\"}\n\t\t\t\t\t\t${this.passwordToggle&&!this.disabled?h`\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tpart=\"password-toggle-button\"\n\t\t\t\t\t\t\t\t\t\tclass=\"input__password-toggle\"\n\t\t\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\t\t\t@click=${this.handlePasswordToggle}\n\t\t\t\t\t\t\t\t\t\ttabindex=\"-1\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t${this.passwordVisible?h`\n\t\t\t\t\t\t\t\t\t\t\t\t\t<slot name=\"show-password-icon\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!-- \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<sl-icon name=\"eye-slash\" library=\"system\"></sl-icon>-->\n\t\t\t\t\t\t\t\t\t\t\t\t\t</slot>\n\t\t\t\t\t\t\t\t\t\t\t  `:h`\n\t\t\t\t\t\t\t\t\t\t\t\t\t<slot name=\"hide-password-icon\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<!--\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<sl-icon name=\"eye\" library=\"system\"></sl-icon>\n\n                                                    -->\n\t\t\t\t\t\t\t\t\t\t\t\t\t</slot>\n\t\t\t\t\t\t\t\t\t\t\t  `}\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t  `:\"\"}\n\n\t\t\t\t\t\t<span part=\"suffix\" class=\"input__suffix\">\n\t\t\t\t\t\t\t<slot name=\"suffix\"></slot>\n\t\t\t\t\t\t</span>\n\n\t\t\t\t\t\t<slot name=\"datalist\"></slot>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div part=\"form-control-help-text\" id=\"help-text\" class=\"form-control__help-text\">\n\t\t\t\t\t<slot name=\"help-text\">${this.helpText}</slot>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`}}"
        },
        {
          "kind": "variable",
          "name": "Rt",
          "type": {
            "text": "array"
          },
          "default": "[\"name\",\"flavour text\",\"source\",\"source type\",\"reward\",\"stack size\",\"release version\",\"release league\"]"
        },
        {
          "kind": "function",
          "name": "Co",
          "parameters": [
            {
              "name": "a"
            },
            {
              "name": "e"
            },
            {
              "name": "t"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "A",
          "default": "await n.getDimensions(u)"
        },
        {
          "kind": "variable",
          "name": "j"
        },
        {
          "kind": "function",
          "name": "i"
        },
        {
          "kind": "function",
          "name": "n",
          "parameters": [
            {
              "name": "p"
            },
            {
              "name": "l"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "k",
          "default": "class extends G{constructor(){super(...arguments),this.formControlController=new ls(this,{assumeInteractionOn:[\"sl-blur\",\"sl-input\"]}),this.hasSlotController=new ft(this,\"help-text\",\"label\"),this.localize=new Ue(this),this.typeToSelectString=\"\",this.hasFocus=!1,this.displayLabel=\"\",this.selectedOptions=[],this.name=\"\",this.value=\"\",this.defaultValue=\"\",this.size=\"medium\",this.placeholder=\"\",this.multiple=!1,this.maxOptionsVisible=3,this.disabled=!1,this.clearable=!1,this.open=!1,this.hoist=!1,this.filled=!1,this.pill=!1,this.label=\"\",this.placement=\"bottom\",this.helpText=\"\",this.form=\"\",this.required=!1,this.getTag=a=>h`\n      <sl-tag\n        part=\"tag\"\n        exportparts=\"\n              base:tag__base,\n              content:tag__content,\n              remove-button:tag__remove-button,\n              remove-button__base:tag__remove-button__base\n            \"\n        ?pill=${this.pill}\n        size=${this.size}\n        removable\n        @sl-remove=${e=>this.handleTagRemove(e,a)}\n      >\n        ${a.getTextLabel()}\n      </sl-tag>\n    `,this.handleDocumentFocusIn=a=>{const e=a.composedPath();this&&!e.includes(this)&&this.hide()},this.handleDocumentKeyDown=a=>{const e=a.target,t=e.closest(\".select__clear\")!==null,s=e.closest(\"sl-icon-button\")!==null;if(!(t||s)){if(a.key===\"Escape\"&&this.open&&!this.closeWatcher&&(a.preventDefault(),a.stopPropagation(),this.hide(),this.displayInput.focus({preventScroll:!0})),a.key===\"Enter\"||a.key===\" \"&&this.typeToSelectString===\"\"){if(a.preventDefault(),a.stopImmediatePropagation(),!this.open){this.show();return}this.currentOption&&!this.currentOption.disabled&&(this.multiple?this.toggleOptionSelection(this.currentOption):this.setSelectedOptions(this.currentOption),this.updateComplete.then(()=>{this.emit(\"sl-input\"),this.emit(\"sl-change\")}),this.multiple||(this.hide(),this.displayInput.focus({preventScroll:!0})));return}if([\"ArrowUp\",\"ArrowDown\",\"Home\",\"End\"].includes(a.key)){const r=this.getAllOptions(),i=r.indexOf(this.currentOption);let n=Math.max(0,i);if(a.preventDefault(),!this.open&&(this.show(),this.currentOption))return;a.key===\"ArrowDown\"?(n=i+1,n>r.length-1&&(n=0)):a.key===\"ArrowUp\"?(n=i-1,n<0&&(n=r.length-1)):a.key===\"Home\"?n=0:a.key===\"End\"&&(n=r.length-1),this.setCurrentOption(r[n])}if(a.key.length===1||a.key===\"Backspace\"){const r=this.getAllOptions();if(a.metaKey||a.ctrlKey||a.altKey)return;if(!this.open){if(a.key===\"Backspace\")return;this.show()}a.stopPropagation(),a.preventDefault(),clearTimeout(this.typeToSelectTimeout),this.typeToSelectTimeout=window.setTimeout(()=>this.typeToSelectString=\"\",1e3),a.key===\"Backspace\"?this.typeToSelectString=this.typeToSelectString.slice(0,-1):this.typeToSelectString+=a.key.toLowerCase();for(const i of r)if(i.getTextLabel().toLowerCase().startsWith(this.typeToSelectString)){this.setCurrentOption(i);break}}}},this.handleDocumentMouseDown=a=>{const e=a.composedPath();this&&!e.includes(this)&&this.hide()}}get validity(){return this.valueInput.validity}get validationMessage(){return this.valueInput.validationMessage}connectedCallback(){super.connectedCallback(),this.open=!1}addOpenListeners(){var a;const e=this.getRootNode();\"CloseWatcher\"in window&&((a=this.closeWatcher)==null||a.destroy(),this.closeWatcher=new CloseWatcher,this.closeWatcher.onclose=()=>{this.open&&(this.hide(),this.displayInput.focus({preventScroll:!0}))}),e.addEventListener(\"focusin\",this.handleDocumentFocusIn),e.addEventListener(\"keydown\",this.handleDocumentKeyDown),e.addEventListener(\"mousedown\",this.handleDocumentMouseDown)}removeOpenListeners(){var a;const e=this.getRootNode();e.removeEventListener(\"focusin\",this.handleDocumentFocusIn),e.removeEventListener(\"keydown\",this.handleDocumentKeyDown),e.removeEventListener(\"mousedown\",this.handleDocumentMouseDown),(a=this.closeWatcher)==null||a.destroy()}handleFocus(){this.hasFocus=!0,this.displayInput.setSelectionRange(0,0),this.emit(\"sl-focus\")}handleBlur(){this.hasFocus=!1,this.emit(\"sl-blur\")}handleLabelClick(){this.displayInput.focus()}handleComboboxMouseDown(a){const t=a.composedPath().some(s=>s instanceof Element&&s.tagName.toLowerCase()===\"sl-icon-button\");this.disabled||t||(a.preventDefault(),this.displayInput.focus({preventScroll:!0}),this.open=!this.open)}handleComboboxKeyDown(a){a.key!==\"Tab\"&&(a.stopPropagation(),this.handleDocumentKeyDown(a))}handleClearClick(a){a.stopPropagation(),this.value!==\"\"&&(this.setSelectedOptions([]),this.displayInput.focus({preventScroll:!0}),this.updateComplete.then(()=>{this.emit(\"sl-clear\"),this.emit(\"sl-input\"),this.emit(\"sl-change\")}))}handleClearMouseDown(a){a.stopPropagation(),a.preventDefault()}handleOptionClick(a){const t=a.target.closest(\"sl-option\"),s=this.value;t&&!t.disabled&&(this.multiple?this.toggleOptionSelection(t):this.setSelectedOptions(t),this.updateComplete.then(()=>this.displayInput.focus({preventScroll:!0})),this.value!==s&&this.updateComplete.then(()=>{this.emit(\"sl-input\"),this.emit(\"sl-change\")}),this.multiple||(this.hide(),this.displayInput.focus({preventScroll:!0})))}handleDefaultSlotChange(){const a=this.getAllOptions(),e=Array.isArray(this.value)?this.value:[this.value],t=[];customElements.get(\"sl-option\")?(a.forEach(s=>t.push(s.value)),this.setSelectedOptions(a.filter(s=>e.includes(s.value)))):customElements.whenDefined(\"sl-option\").then(()=>this.handleDefaultSlotChange())}handleTagRemove(a,e){a.stopPropagation(),this.disabled||(this.toggleOptionSelection(e,!1),this.updateComplete.then(()=>{this.emit(\"sl-input\"),this.emit(\"sl-change\")}))}getAllOptions(){return[...this.querySelectorAll(\"sl-option\")]}getFirstOption(){return this.querySelector(\"sl-option\")}setCurrentOption(a){this.getAllOptions().forEach(t=>{t.current=!1,t.tabIndex=-1}),a&&(this.currentOption=a,a.current=!0,a.tabIndex=0,a.focus())}setSelectedOptions(a){const e=this.getAllOptions(),t=Array.isArray(a)?a:[a];e.forEach(s=>s.selected=!1),t.length&&t.forEach(s=>s.selected=!0),this.selectionChanged()}toggleOptionSelection(a,e){e===!0||e===!1?a.selected=e:a.selected=!a.selected,this.selectionChanged()}selectionChanged(){var a,e,t,s;this.selectedOptions=this.getAllOptions().filter(r=>r.selected),this.multiple?(this.value=this.selectedOptions.map(r=>r.value),this.placeholder&&this.value.length===0?this.displayLabel=\"\":this.displayLabel=this.localize.term(\"numOptionsSelected\",this.selectedOptions.length)):(this.value=(e=(a=this.selectedOptions[0])==null?void 0:a.value)!=null?e:\"\",this.displayLabel=(s=(t=this.selectedOptions[0])==null?void 0:t.getTextLabel())!=null?s:\"\"),this.updateComplete.then(()=>{this.formControlController.updateValidity()})}get tags(){return this.selectedOptions.map((a,e)=>{if(e<this.maxOptionsVisible||this.maxOptionsVisible<=0){const t=this.getTag(a,e);return h`<div @sl-remove=${s=>this.handleTagRemove(s,a)}>\n          ${typeof t==\"string\"?Vr(t):t}\n        </div>`}else if(e===this.maxOptionsVisible)return h`<sl-tag>+${this.selectedOptions.length-e}</sl-tag>`;return h``})}handleInvalid(a){this.formControlController.setValidity(!1),this.formControlController.emitInvalidEvent(a)}handleDisabledChange(){this.disabled&&(this.open=!1,this.handleOpenChange())}handleValueChange(){const a=this.getAllOptions(),e=Array.isArray(this.value)?this.value:[this.value];this.setSelectedOptions(a.filter(t=>e.includes(t.value)))}async handleOpenChange(){if(this.open&&!this.disabled){this.setCurrentOption(this.selectedOptions[0]||this.getFirstOption()),this.emit(\"sl-show\"),this.addOpenListeners(),await tt(this),this.listbox.hidden=!1,this.popup.active=!0,requestAnimationFrame(()=>{this.setCurrentOption(this.currentOption)});const{keyframes:a,options:e}=Za(this,\"select.show\",{dir:this.localize.dir()});await at(this.popup.popup,a,e),this.currentOption&&Wo(this.currentOption,this.listbox,\"vertical\",\"auto\"),this.emit(\"sl-after-show\")}else{this.emit(\"sl-hide\"),this.removeOpenListeners(),await tt(this);const{keyframes:a,options:e}=Za(this,\"select.hide\",{dir:this.localize.dir()});await at(this.popup.popup,a,e),this.listbox.hidden=!0,this.popup.active=!1,this.emit(\"sl-after-hide\")}}async show(){if(this.open||this.disabled){this.open=!1;return}return this.open=!0,et(this,\"sl-after-show\")}async hide(){if(!this.open||this.disabled){this.open=!1;return}return this.open=!1,et(this,\"sl-after-hide\")}checkValidity(){return this.valueInput.checkValidity()}getForm(){return this.formControlController.getForm()}reportValidity(){return this.valueInput.reportValidity()}setCustomValidity(a){this.valueInput.setCustomValidity(a),this.formControlController.updateValidity()}focus(a){this.displayInput.focus(a)}blur(){this.displayInput.blur()}render(){const a=this.hasSlotController.test(\"label\"),e=this.hasSlotController.test(\"help-text\"),t=this.label?!0:!!a,s=this.helpText?!0:!!e,r=this.clearable&&!this.disabled&&this.value.length>0,i=this.placeholder&&this.value.length===0;return h`\n      <div\n        part=\"form-control\"\n        class=${C({\"form-control\":!0,\"form-control--small\":this.size===\"small\",\"form-control--medium\":this.size===\"medium\",\"form-control--large\":this.size===\"large\",\"form-control--has-label\":t,\"form-control--has-help-text\":s})}\n      >\n        <label\n          id=\"label\"\n          part=\"form-control-label\"\n          class=\"form-control__label\"\n          aria-hidden=${t?\"false\":\"true\"}\n          @click=${this.handleLabelClick}\n        >\n          <slot name=\"label\">${this.label}</slot>\n        </label>\n\n        <div part=\"form-control-input\" class=\"form-control-input\">\n          <sl-popup\n            class=${C({select:!0,\"select--standard\":!0,\"select--filled\":this.filled,\"select--pill\":this.pill,\"select--open\":this.open,\"select--disabled\":this.disabled,\"select--multiple\":this.multiple,\"select--focused\":this.hasFocus,\"select--placeholder-visible\":i,\"select--top\":this.placement===\"top\",\"select--bottom\":this.placement===\"bottom\",\"select--small\":this.size===\"small\",\"select--medium\":this.size===\"medium\",\"select--large\":this.size===\"large\"})}\n            placement=${this.placement}\n            strategy=${this.hoist?\"fixed\":\"absolute\"}\n            flip\n            shift\n            sync=\"width\"\n            auto-size=\"vertical\"\n            auto-size-padding=\"10\"\n          >\n            <div\n              part=\"combobox\"\n              class=\"select__combobox\"\n              slot=\"anchor\"\n              @keydown=${this.handleComboboxKeyDown}\n              @mousedown=${this.handleComboboxMouseDown}\n            >\n              <slot part=\"prefix\" name=\"prefix\" class=\"select__prefix\"></slot>\n\n              <input\n                part=\"display-input\"\n                class=\"select__display-input\"\n                type=\"text\"\n                placeholder=${this.placeholder}\n                .disabled=${this.disabled}\n                .value=${this.displayLabel}\n                autocomplete=\"off\"\n                spellcheck=\"false\"\n                autocapitalize=\"off\"\n                readonly\n                aria-controls=\"listbox\"\n                aria-expanded=${this.open?\"true\":\"false\"}\n                aria-haspopup=\"listbox\"\n                aria-labelledby=\"label\"\n                aria-disabled=${this.disabled?\"true\":\"false\"}\n                aria-describedby=\"help-text\"\n                role=\"combobox\"\n                tabindex=\"0\"\n                @focus=${this.handleFocus}\n                @blur=${this.handleBlur}\n              />\n\n              ${this.multiple?h`<div part=\"tags\" class=\"select__tags\">${this.tags}</div>`:\"\"}\n\n              <input\n                class=\"select__value-input\"\n                type=\"text\"\n                ?disabled=${this.disabled}\n                ?required=${this.required}\n                .value=${Array.isArray(this.value)?this.value.join(\", \"):this.value}\n                tabindex=\"-1\"\n                aria-hidden=\"true\"\n                @focus=${()=>this.focus()}\n                @invalid=${this.handleInvalid}\n              />\n\n              ${r?h`\n                    <button\n                      part=\"clear-button\"\n                      class=\"select__clear\"\n                      type=\"button\"\n                      aria-label=${this.localize.term(\"clearEntry\")}\n                      @mousedown=${this.handleClearMouseDown}\n                      @click=${this.handleClearClick}\n                      tabindex=\"-1\"\n                    >\n                      <slot name=\"clear-icon\">\n                        <sl-icon name=\"x-circle-fill\" library=\"system\"></sl-icon>\n                      </slot>\n                    </button>\n                  `:\"\"}\n\n              <slot name=\"expand-icon\" part=\"expand-icon\" class=\"select__expand-icon\">\n                <sl-icon library=\"system\" name=\"chevron-down\"></sl-icon>\n              </slot>\n            </div>\n\n            <div\n              id=\"listbox\"\n              role=\"listbox\"\n              aria-expanded=${this.open?\"true\":\"false\"}\n              aria-multiselectable=${this.multiple?\"true\":\"false\"}\n              aria-labelledby=\"label\"\n              part=\"listbox\"\n              class=\"select__listbox\"\n              tabindex=\"-1\"\n              @mouseup=${this.handleOptionClick}\n              @slotchange=${this.handleDefaultSlotChange}\n            >\n              <slot></slot>\n            </div>\n          </sl-popup>\n        </div>\n\n        <div\n          part=\"form-control-help-text\"\n          id=\"help-text\"\n          class=\"form-control__help-text\"\n          aria-hidden=${s?\"false\":\"true\"}\n        >\n          <slot name=\"help-text\">${this.helpText}</slot>\n        </div>\n      </div>\n    `}}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "a",
          "declaration": {
            "name": "e",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "a",
          "declaration": {
            "name": "e",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "a",
          "declaration": {
            "name": "anonymous_2",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "A",
          "declaration": {
            "name": "xr",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "F",
          "declaration": {
            "name": "ls",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "L",
          "declaration": {
            "name": "zi",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "S",
          "declaration": {
            "name": "Q",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "T",
          "declaration": {
            "name": "b",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "_",
          "declaration": {
            "name": "c",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "a",
          "declaration": {
            "name": "G",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "b",
          "declaration": {
            "name": "C",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "c",
          "declaration": {
            "name": "le",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "d",
          "declaration": {
            "name": "Mr",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "e",
          "declaration": {
            "name": "O",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "f",
          "declaration": {
            "name": "Co",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "g",
          "declaration": {
            "name": "Rt",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "h",
          "declaration": {
            "name": "ka",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "i",
          "declaration": {
            "name": "y",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "j",
          "declaration": {
            "name": "Be",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "k",
          "declaration": {
            "name": "ke",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "l",
          "declaration": {
            "name": "Cr",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "m",
          "declaration": {
            "name": "_r",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "n",
          "declaration": {
            "name": "o",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "o",
          "declaration": {
            "name": "w",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "p",
          "declaration": {
            "name": "Hn",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "q",
          "declaration": {
            "name": "F",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "r",
          "declaration": {
            "name": "S",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "s",
          "declaration": {
            "name": "L",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "t",
          "declaration": {
            "name": "Tr",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "u",
          "declaration": {
            "name": "Lp",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "v",
          "declaration": {
            "name": "Oe",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "w",
          "declaration": {
            "name": "N",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "x",
          "declaration": {
            "name": "h",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        },
        {
          "kind": "js",
          "name": "y",
          "declaration": {
            "name": "M",
            "module": "dist/assets/index-49CGNOB_.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/assets/index-zhtqbVcI.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "$t",
          "default": "class{#n;#i={};#e={};#t={};#r={};#u=!1;constructor(t={},e,s){try{let r;if(typeof e==\"string\"?r=e:s=e,typeof t==\"string\"){let i=new vt(t);if(i.parse(),t=i.result,r===void 0&&typeof t.protocol!=\"string\")throw new TypeError(\"A base URL must be provided for a relative constructor string.\");t.baseURL=r}else{if(!t||typeof t!=\"object\")throw new TypeError(\"parameter 1 is not of type 'string' and cannot convert to dictionary.\");if(r)throw new TypeError(\"parameter 1 is not of type 'string'.\")}typeof s>\"u\"&&(s={ignoreCase:!1});let h={ignoreCase:s.ignoreCase===!0},u={pathname:x,protocol:x,username:x,password:x,hostname:x,port:x,search:x,hash:x};this.#n=L(u,t,!0),z(this.#n.protocol)===this.#n.port&&(this.#n.port=\"\");let o;for(o of S){if(!(o in this.#n))continue;let i={},n=this.#n[o];switch(this.#e[o]=[],o){case\"protocol\":Object.assign(i,$),i.encodePart=N;break;case\"username\":Object.assign(i,$),i.encodePart=lt;break;case\"password\":Object.assign(i,$),i.encodePart=mt;break;case\"hostname\":Object.assign(i,et),K(n)?i.encodePart=q:i.encodePart=Z;break;case\"port\":Object.assign(i,$),i.encodePart=B;break;case\"pathname\":V(this.#i.protocol)?(Object.assign(i,st,h),i.encodePart=dt):(Object.assign(i,$,h),i.encodePart=gt);break;case\"search\":Object.assign(i,$,h),i.encodePart=wt;break;case\"hash\":Object.assign(i,$,h),i.encodePart=yt;break}try{this.#r[o]=F(n,i),this.#i[o]=W(this.#r[o],this.#e[o],i),this.#t[o]=xt(this.#r[o],i),this.#u=this.#u||this.#r[o].some(a=>a.type===2)}catch{throw new TypeError(`invalid ${o} pattern '${this.#n[o]}'.`)}}}catch(r){throw new TypeError(`Failed to construct 'URLPattern': ${r.message}`)}}test(t={},e){let s={pathname:\"\",protocol:\"\",username:\"\",password:\"\",hostname:\"\",port:\"\",search:\"\",hash:\"\"};if(typeof t!=\"string\"&&e)throw new TypeError(\"parameter 1 is not of type 'string'.\");if(typeof t>\"u\")return!1;try{typeof t==\"object\"?s=L(s,t,!1):s=L(s,H(t,e),!1)}catch{return!1}let r;for(r of S)if(!this.#i[r].exec(s[r]))return!1;return!0}exec(t={},e){let s={pathname:\"\",protocol:\"\",username:\"\",password:\"\",hostname:\"\",port:\"\",search:\"\",hash:\"\"};if(typeof t!=\"string\"&&e)throw new TypeError(\"parameter 1 is not of type 'string'.\");if(typeof t>\"u\")return;try{typeof t==\"object\"?s=L(s,t,!1):s=L(s,H(t,e),!1)}catch{return null}let r={};e?r.inputs=[t,e]:r.inputs=[t];let h;for(h of S){let u=this.#i[h].exec(s[h]);if(!u)return null;let o={};for(let[i,n]of this.#e[h].entries())if(typeof n==\"string\"||typeof n==\"number\"){let a=u[i+1];o[n]=a}r[h]={input:s[h]??\"\",groups:o}}return r}static compareComponent(t,e,s){let r=(i,n)=>{for(let a of[\"type\",\"modifier\",\"prefix\",\"value\",\"suffix\"]){if(i[a]<n[a])return-1;if(i[a]!==n[a])return 1}return 0},h=new P(3,\"\",\"\",\"\",\"\",3),u=new P(0,\"\",\"\",\"\",\"\",3),o=(i,n)=>{let a=0;for(;a<Math.min(i.length,n.length);++a){let f=r(i[a],n[a]);if(f)return f}return i.length===n.length?0:r(i[a]??h,n[a]??h)};return!e.#t[t]&&!s.#t[t]?0:e.#t[t]&&!s.#t[t]?o(e.#r[t],[u]):!e.#t[t]&&s.#t[t]?o([u],s.#r[t]):o(e.#r[t],s.#r[t])}get protocol(){return this.#t.protocol}get username(){return this.#t.username}get password(){return this.#t.password}get hostname(){return this.#t.hostname}get port(){return this.#t.port}get pathname(){return this.#t.pathname}get search(){return this.#t.search}get hash(){return this.#t.hash}get hasRegExpGroups(){return this.#u}}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "URLPattern",
          "declaration": {
            "name": "$t",
            "module": "dist/assets/index-zhtqbVcI.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/assets/p-divcord-sMXkgdq0.js",
      "declarations": [
        {
          "kind": "function",
          "name": "ct",
          "parameters": [
            {
              "name": "t"
            },
            {
              "name": "e"
            },
            {
              "name": "s"
            }
          ]
        },
        {
          "kind": "function",
          "name": "ht",
          "parameters": [
            {
              "name": "t"
            },
            {
              "name": "e"
            },
            {
              "name": "s"
            }
          ]
        },
        {
          "kind": "function",
          "name": "dt",
          "parameters": [
            {
              "name": "t"
            },
            {
              "name": "e"
            },
            {
              "name": "s"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "l",
          "default": "class extends U{constructor(){super(...arguments),d(this,x),d(this,z),d(this,O),d(this,D),d(this,M),d(this,B),d(this,I),d(this,L),d(this,q),d(this,j),d(this,G),d(this,H),d(this,k),d(this,K),d(this,Q),d(this,J),this.page=1,this.perPage=10,this.filter=\"\",this.shouldApplySelectFilters=le.load()??!0,this.onlyShowCardsWithNoConfirmedSources=Re.load()??!1,this.onlyShowCardsWithSourcesToVerify=We.load()??!1,this.filtered=[],this.paginated=[],this.config=ne[0],this.presets=[...ne],this.customPresets=ae.load()??[],this.presetActionState=\"idle\",this.presetsForDelete=new Set}connectedCallback(){super.connectedCallback(),window.addEventListener(\"keydown\",c(this,x,N).bind(this))}disconnectedCallback(){super.disconnectedCallback(),window.removeEventListener(\"keydown\",c(this,x,N).bind(this))}willUpdate(t){if(t.has(\"shouldApplySelectFilters\")&&le.save(this.shouldApplySelectFilters),t.has(\"shouldApplySelectFilters\")&&this.shouldApplySelectFilters){const s=Ue.load()??\"\",i=this.findPreset(s);i&&c(this,k,A).call(this,i)}t.has(\"customPresets\")&&ae.save(this.customPresets);const e=[\"config\",\"filter\",\"divcordTable\",\"shouldApplySelectFilters\",\"onlyShowCardsWithNoConfirmedSources\",\"onlyShowCardsWithSourcesToVerify\",\"page\",\"perPage\"];Array.from(t.keys()).some(s=>e.includes(s))&&(this.filtered=this.createFilteredCards(),this.paginated=Me(this.filtered,this.page,this.perPage),this.paginatedCardsRenderer=new Be(this.paginated))}findPreset(t){return[...this.presets,...this.customPresets].find(e=>e.name===t)??null}createFilteredCards(){const t=this.filter.trim().toLowerCase();return Ie(t,Array.from(Le),this.divcordTable).filter(s=>this.shouldApplySelectFilters&&this.onlyShowCardsWithSourcesToVerify?this.divcordTable.recordsByCard(s).some(r=>r.verifySources.length>0):!0).filter(s=>this.shouldApplySelectFilters&&this.onlyShowCardsWithNoConfirmedSources?this.divcordTable.recordsByCard(s).every(o=>(o.sources??[]).length===0):!0).filter(s=>this.shouldApplySelectFilters?ct(s,this.config.confidence,this.divcordTable)&&dt(s,this.config.greynote,this.divcordTable)&&ht(s,this.config.remainingWork,this.divcordTable):!0)}async updated(t){t.has(\"presetActionState\")&&this.presetActionState===\"adding\"&&(await this.updateComplete,this.inputNewPresetNameEl.focus())}renderDeletingPresets(){if(this.customPresets.length===0)return b;switch(this.presetActionState){case\"idle\":return a`<sl-button @click=${c(this,j,$e)}>Delete some presets</sl-button>`;case\"adding\":return b;case\"deleting\":return a`<sl-icon-button\n\t\t\t\t\t@click=${c(this,K,Ee)}\n\t\t\t\t\tclass=\"preset-action-btn\"\n\t\t\t\t\tname=\"trash3\"\n\t\t\t\t\t.disabled=${this.presetsForDelete.size===0}\n\t\t\t\t></sl-icon-button>`}}renderAddingPresets(){switch(this.presetActionState){case\"idle\":return a` <sl-icon-button\n\t\t\t\t\t@click=${c(this,q,Ce)}\n\t\t\t\t\tclass=\"preset-action-btn\"\n\t\t\t\t\tname=\"plus-lg\"\n\t\t\t\t\t>next</sl-icon-button\n\t\t\t\t>`;case\"adding\":return a`<form @submit=${c(this,H,Ae)} class=\"adding-new-preset\">\n\t\t\t\t\t<sl-input\n\t\t\t\t\t\tclass=\"adding-new-preset_input\"\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tid=\"input-new-preset-name\"\n\t\t\t\t\t\tlabel=\"name for your preset\"\n\t\t\t\t\t\t.helpText=${\"set configs and then confirm\"}\n\t\t\t\t\t></sl-input>\n\t\t\t\t\t<sl-button type=\"submit\" class=\"adding-new-preset_confirm-btn\">Confirm</sl-button>\n\t\t\t\t</form>`;case\"deleting\":return b}}render(){return a`<div class=\"page\">\n\t\t\t<header>\n\t\t\t\t<div class=\"load\">\n\t\t\t\t\t<div class=\"load_btn-and-status\">\n\t\t\t\t\t\t<e-update-divcord-data @records-updated=${c(this,O,be)}></e-update-divcord-data>\n\t\t\t\t\t\t<e-divcord-records-age> </e-divcord-records-age>\n\t\t\t\t\t</div>\n\t\t\t\t\t<sl-alert class=\"load_tip\" open>\n\t\t\t\t\t\t<sl-icon slot=\"icon\" name=\"info-circle\"></sl-icon>\n\t\t\t\t\t\t<p>You don't have to load manually, it loads and caches if older than 24h, but you can.</p>\n\t\t\t\t\t</sl-alert>\n\t\t\t\t</div>\n\n\t\t\t\t<section\n\t\t\t\t\tclass=${de({\"select-filters-section\":!0,\"select-filters-section--open\":this.shouldApplySelectFilters})}\n\t\t\t\t>\n\t\t\t\t\t<div class=\"apply-select-filters-control\">\n\t\t\t\t\t\t<sl-checkbox\n\t\t\t\t\t\t\t.checked=${this.shouldApplySelectFilters}\n\t\t\t\t\t\t\t@sl-input=${c(this,L,we)}\n\t\t\t\t\t\t\t>Apply filters</sl-checkbox\n\t\t\t\t\t\t>\n\t\t\t\t\t</div>\n\t\t\t\t\t${this.shouldApplySelectFilters?a`<div class=\"select-filters\">\n\t\t\t\t\t\t\t\t\t<div class=\"select-filters_presets\">\n\t\t\t\t\t\t\t\t\t\t<h3>Presets</h3>\n\n\t\t\t\t\t\t\t\t\t\t<div class=\"presets-buttons\">\n\t\t\t\t\t\t\t\t\t\t\t${this.presets.map(t=>a`<sl-button @click=${c(this,k,A).bind(this,t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>${t.name}</sl-button\n\t\t\t\t\t\t\t\t\t\t\t\t\t>`)}\n\t\t\t\t\t\t\t\t\t\t\t${this.customPresets.map(t=>{const e=a`<sl-button\n\t\t\t\t\t\t\t\t\t\t\t\t\t@click=${c(this,k,A).bind(this,t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>${t.name}</sl-button\n\t\t\t\t\t\t\t\t\t\t\t\t>`,s=a`<sl-checkbox\n\t\t\t\t\t\t\t\t\t\t\t\t\t@sl-input=${c(this,z,ye)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t.value=${t.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>${t.name}</sl-checkbox\n\t\t\t\t\t\t\t\t\t\t\t\t>`;return this.presetActionState===\"deleting\"?s:e})}\n\t\t\t\t\t\t\t\t\t\t\t${this.renderAddingPresets()} ${this.renderDeletingPresets()}\n\t\t\t\t\t\t\t\t\t\t\t${this.presetActionState!==\"idle\"?a`<sl-button @click=${c(this,G,xe)}>Cancel</sl-button>`:b}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"select-filters_filters\">\n\t\t\t\t\t\t\t\t\t\t<sl-select\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"Greynote\"\n\t\t\t\t\t\t\t\t\t\t\t.value=${this.config.greynote.map(t=>g.toSlValue(t))}\n\t\t\t\t\t\t\t\t\t\t\t@sl-change=${c(this,M,ke)}\n\t\t\t\t\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\t\t\t\t\tclearable\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t${Array.from(pe).map(t=>a` <sl-option value=${g.toSlValue(t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>${t}</sl-option\n\t\t\t\t\t\t\t\t\t\t\t\t>`)}\n\t\t\t\t\t\t\t\t\t\t</sl-select>\n\t\t\t\t\t\t\t\t\t\t<sl-select\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"Confidence\"\n\t\t\t\t\t\t\t\t\t\t\t.value=${this.config.confidence.map(t=>g.toSlValue(t))}\n\t\t\t\t\t\t\t\t\t\t\t@sl-change=${c(this,I,_e)}\n\t\t\t\t\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\t\t\t\t\tclearable\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t${Array.from(ue).map(t=>a` <sl-option value=${g.toSlValue(t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>${t}</sl-option\n\t\t\t\t\t\t\t\t\t\t\t\t>`)}\n\t\t\t\t\t\t\t\t\t\t</sl-select>\n\n\t\t\t\t\t\t\t\t\t\t<sl-select\n\t\t\t\t\t\t\t\t\t\t\t.value=${this.config.remainingWork.map(t=>g.toSlValue(t))}\n\t\t\t\t\t\t\t\t\t\t\t@sl-change=${c(this,B,Se)}\n\t\t\t\t\t\t\t\t\t\t\tlabel=\"Remaining Work\"\n\t\t\t\t\t\t\t\t\t\t\tmultiple\n\t\t\t\t\t\t\t\t\t\t\tclearable\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t${Array.from(F).map(t=>a` <sl-option value=${g.toSlValue(t)}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>${t}</sl-option\n\t\t\t\t\t\t\t\t\t\t\t\t>`)}\n\t\t\t\t\t\t\t\t\t\t</sl-select>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<sl-checkbox\n\t\t\t\t\t\t\t\t\t.checked=${this.onlyShowCardsWithNoConfirmedSources}\n\t\t\t\t\t\t\t\t\t@sl-input=${c(this,Q,Pe)}\n\t\t\t\t\t\t\t\t\t>Only show cards with no confirmed sources</sl-checkbox\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<sl-checkbox\n\t\t\t\t\t\t\t\t\t.checked=${this.onlyShowCardsWithSourcesToVerify}\n\t\t\t\t\t\t\t\t\t@sl-input=${c(this,J,Te)}\n\t\t\t\t\t\t\t\t\t>Only show cards with sources to verify</sl-checkbox\n\t\t\t\t\t\t\t\t> `:b}\n\t\t\t\t</section>\n\n\t\t\t\t<section class=\"search-and-navigation\">\n\t\t\t\t\t<e-input\n\t\t\t\t\t\tlabel=\"Search by anything\"\n\t\t\t\t\t\t.datalistItems=${this.divcordTable.cards()}\n\t\t\t\t\t\t@input=\"${c(this,D,ve)}\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t>\n\t\t\t\t\t</e-input>\n\t\t\t\t\t<e-page-controls\n\t\t\t\t\t\t.n=${this.filtered.length}\n\t\t\t\t\t\tpage=${this.page}\n\t\t\t\t\t\tper-page=${this.perPage}\n\t\t\t\t\t></e-page-controls>\n\t\t\t\t</section>\n\t\t\t</header>\n\t\t\t<ul>\n\t\t\t\t${this.paginatedCardsRenderer.render(t=>a`<e-card-with-divcord-records\n\t\t\t\t\t\t.card=${t}\n\t\t\t\t\t\t.records=${this.divcordTable.recordsByCard(t)}\n\t\t\t\t\t></e-card-with-divcord-records>`)}\n\t\t\t</ul>\n\t\t</div>`}}"
        },
        {
          "kind": "variable",
          "name": "_",
          "default": "class extends U{constructor(){super(...arguments),d(this,E,new Intl.RelativeTimeFormat(\"en\"))}minutes(){return(Date.now()-this.date.getTime())/60/1e3}seconds(){return Math.floor((Date.now()-this.date.getTime())/1e3)}minutesRelativeString(){const t=this.minutes();return t>=1?oe(this,E).format(-1*Math.floor(t),\"minutes\"):t<.2?\"now\":\"less than minute ago\"}secondsRelativeString(){const t=this.seconds();return t>=1?oe(this,E).format(-1*t,\"seconds\"):\"now\"}connectedCallback(){super.connectedCallback(),setInterval(()=>{this.requestUpdate()},1e3)}render(){return this.unit===\"seconds\"?this.secondsRelativeString():this.minutesRelativeString()}}"
        },
        {
          "kind": "variable",
          "name": "P",
          "default": "class extends U{constructor(){super(),this.lastUpdated=new me(this,{async task(){return await y.cacheDate()},args:()=>[]}),y.addEventListener(\"state-updated\",()=>{y.state===\"updated\"&&this.lastUpdated.run()})}render(){return this.lastUpdated.render({complete:t=>t===null?b:a`<p>Last updated: <e-relative-time .date=${t}></e-relative-time> <slot></slot></p> `})}}"
        },
        {
          "kind": "variable",
          "name": "T",
          "default": "class extends U{constructor(){super(),this.task=new me(this,{task:async()=>{const t=await y.update(),e=new CustomEvent(\"records-updated\",{detail:t,bubbles:!0,composed:!0});this.dispatchEvent(e)}}),this.loaderState=y.state,y.addEventListener(\"state-updated\",()=>{this.loaderState=y.state})}loadBtn(){return a`<sl-button .loading=${this.loaderState===\"updating\"} @click=${this.task.run.bind(this.task)}>\n\t\t\t<p class=\"reload\">Load divcord data</p>\n\t\t</sl-button>`}render(){return this.task.render({initial:()=>this.loadBtn(),pending:()=>a`<sl-button class=\"sl-theme-dark\" loading>Loading</sl-button>`,complete:()=>this.loadBtn()})}}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordRecordsAgeElement",
          "declaration": {
            "name": "P",
            "module": "dist/assets/p-divcord-sMXkgdq0.js"
          }
        },
        {
          "kind": "js",
          "name": "DivcordTablePage",
          "declaration": {
            "name": "l",
            "module": "dist/assets/p-divcord-sMXkgdq0.js"
          }
        },
        {
          "kind": "js",
          "name": "RelativeTimeElement",
          "declaration": {
            "name": "_",
            "module": "dist/assets/p-divcord-sMXkgdq0.js"
          }
        },
        {
          "kind": "js",
          "name": "UpdateDivcordDataElement",
          "declaration": {
            "name": "T",
            "module": "dist/assets/p-divcord-sMXkgdq0.js"
          }
        },
        {
          "kind": "js",
          "name": "someCardRecordHasConfidenceVariant",
          "declaration": {
            "name": "ct",
            "module": "dist/assets/p-divcord-sMXkgdq0.js"
          }
        },
        {
          "kind": "js",
          "name": "someCardRecordHasGreynoteWorkVariant",
          "declaration": {
            "name": "dt",
            "module": "dist/assets/p-divcord-sMXkgdq0.js"
          }
        },
        {
          "kind": "js",
          "name": "someCardRecordHasRemainingWorkVariant",
          "declaration": {
            "name": "ht",
            "module": "dist/assets/p-divcord-sMXkgdq0.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/assets/p-maps-table-R7RFA_r2.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "a",
          "default": "class extends f{constructor(){super(...arguments),P(this,c),this.page=1,this.perPage=10,this.size=\"medium\",this.filter=\"\",this.cardsByMaps={}}get filtered(){const t=this.filter.trim().toLowerCase();return Object.entries(this.cardsByMaps).filter(([r])=>r.toLowerCase().includes(t.trim().toLowerCase())).sort((r,o)=>r[0].localeCompare(o[0]))}willUpdate(t){if(t.has(\"divcordTable\")&&(this.cardsByMaps=g(this.divcordTable.records)),t.has(\"filter\")){const e=new URL(window.location.href);e.searchParams.set(\"filter\",this.filter),window.history.replaceState({},\"\",e)}}get paginated(){const t=y(this.filtered,this.page,this.perPage);for(const[e,r]of t)b(r,h);return t}maps(){const t=h.maps.map(({name:e})=>e);return t.sort((e,r)=>e.localeCompare(r)),t}render(){return l`\n\t\t\t<div class=\"page\">\n\t\t\t\t<header>\n\t\t\t\t\t<form>\n\t\t\t\t\t\t<e-input\n\t\t\t\t\t\t\tlabel=\"Enter map name\"\n\t\t\t\t\t\t\t@input=\"${T(this,c,u)}\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t.datalistItems=${this.maps()}\n\t\t\t\t\t\t></e-input>\n\t\t\t\t\t</form>\n\t\t\t\t\t<e-page-controls\n\t\t\t\t\t\t.n=${this.filtered.length}\n\t\t\t\t\t\tpage=${this.page}\n\t\t\t\t\t\tper-page=${this.perPage}\n\t\t\t\t\t></e-page-controls>\n\t\t\t\t</header>\n\t\t\t\t${this.table()}\n\t\t\t</div>\n\t\t`}table(){return l`\n\t\t\t<table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th scope=\"col\">Map</th>\n\t\t\t\t\t\t<th scope=\"col\">Cards</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t${this.paginated.map(([t,e])=>l`\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<e-source\n\t\t\t\t\t\t\t\t\t\t\t.size=${this.size}\n\t\t\t\t\t\t\t\t\t\t\t.source=${{id:t,type:\"Map\",kind:\"source-with-member\"}}\n\t\t\t\t\t\t\t\t\t\t\t.showSourceType=${!1}\n\t\t\t\t\t\t\t\t\t\t></e-source>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t<e-cards-by-source-list .cards=${e}></e-cards-by-source-list>\n\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t`)}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t`}}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MapsTablePage",
          "declaration": {
            "name": "a",
            "module": "dist/assets/p-maps-table-R7RFA_r2.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-card-with-divcord-records.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardWithDivcordRecordsElement",
          "members": [
            {
              "kind": "field",
              "name": "card",
              "type": {
                "text": "string"
              },
              "attribute": "card",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              },
              "attribute": "records"
            }
          ],
          "attributes": [
            {
              "name": "card",
              "type": {
                "text": "string"
              },
              "fieldName": "card"
            },
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              },
              "fieldName": "records"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-card-with-divcord-records",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardWithDivcordRecordsElement",
          "declaration": {
            "name": "CardWithDivcordRecordsElement",
            "module": "src/elements/e-card-with-divcord-records.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-card-with-divcord-records",
          "declaration": {
            "name": "CardWithDivcordRecordsElement",
            "module": "src/elements/e-card-with-divcord-records.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-card-with-sources.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardWithSourcesElement",
          "cssParts": [
            {
              "description": "Divination card element",
              "name": "card"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              },
              "attribute": "divcordTable"
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'compact'",
              "attribute": "renderMode"
            },
            {
              "kind": "field",
              "name": "sources",
              "type": {
                "text": "ISource[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "sourcesList",
              "privacy": "protected",
              "description": "Put maps into distinct container without gaps"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              },
              "fieldName": "divcordTable"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'compact'",
              "fieldName": "renderMode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-card-with-sources",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardWithSourcesElement",
          "declaration": {
            "name": "CardWithSourcesElement",
            "module": "src/elements/e-card-with-sources.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-card-with-sources",
          "declaration": {
            "name": "CardWithSourcesElement",
            "module": "src/elements/e-card-with-sources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-cards-by-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardsBySourceElement",
          "members": [
            {
              "kind": "field",
              "name": "cards",
              "type": {
                "text": "CardBySource[]"
              },
              "default": "[]",
              "attribute": "cards"
            },
            {
              "kind": "method",
              "name": "#onBossNavigation"
            }
          ],
          "events": [
            {
              "name": "boss-navigation",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "cards",
              "type": {
                "text": "CardBySource[]"
              },
              "default": "[]",
              "fieldName": "cards"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-cards-by-source",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardsBySourceElement",
          "declaration": {
            "name": "CardsBySourceElement",
            "module": "src/elements/e-cards-by-source.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-cards-by-source",
          "declaration": {
            "name": "CardsBySourceElement",
            "module": "src/elements/e-cards-by-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-divcord-needs-info.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivcordNeedsInfoElement",
          "members": [
            {
              "kind": "field",
              "name": "card",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "card",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "card",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "card"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-divcord-needs-info",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordNeedsInfoElement",
          "declaration": {
            "name": "DivcordNeedsInfoElement",
            "module": "src/elements/e-divcord-needs-info.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-divcord-needs-info",
          "declaration": {
            "name": "DivcordNeedsInfoElement",
            "module": "src/elements/e-divcord-needs-info.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-navbar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NavbarElement",
          "members": [
            {
              "kind": "field",
              "name": "linkItems",
              "type": {
                "text": "array"
              },
              "default": "[\r\n\t\t['/', 'Home'],\r\n\t\t['/maps', 'Maps'],\r\n\t\t['/sources', 'Sources'],\r\n\t\t['/divcord', 'Divcord'],\r\n\t\t['/verify', 'Need to verify'],\r\n\t\t['/verify-faq', 'faq'],\r\n\t]",
              "attribute": "linkItems"
            },
            {
              "kind": "field",
              "name": "pathname"
            },
            {
              "kind": "field",
              "name": "menuDialogElement",
              "type": {
                "text": "HTMLDialogElement"
              }
            },
            {
              "kind": "method",
              "name": "renderMenu",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "linkItems",
              "type": {
                "text": "array"
              },
              "default": "[\r\n\t\t['/', 'Home'],\r\n\t\t['/maps', 'Maps'],\r\n\t\t['/sources', 'Sources'],\r\n\t\t['/divcord', 'Divcord'],\r\n\t\t['/verify', 'Need to verify'],\r\n\t\t['/verify-faq', 'faq'],\r\n\t]",
              "fieldName": "linkItems"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-navbar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NavbarElement",
          "declaration": {
            "name": "NavbarElement",
            "module": "src/elements/e-navbar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-navbar",
          "declaration": {
            "name": "NavbarElement",
            "module": "src/elements/e-navbar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-need-to-verify.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NeedToVerifyElement",
          "members": [
            {
              "kind": "field",
              "name": "slotParent",
              "type": {
                "text": "HTMLDivElement"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Notifiyng border for e-divination-card and e-source, when it needs to be verified.\r\nExample:\r\n```js\r\n<e-need-to-verify>\r\n<e-divination-card name=\"The Doctor\"></e-divination-card>\r\n</e-need-to-verify>\r\n```",
          "tagName": "e-need-to-verify",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "NeedToVerifyBorderElement",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-need-to-verify-border",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NeedToVerifyElement",
          "declaration": {
            "name": "NeedToVerifyElement",
            "module": "src/elements/e-need-to-verify.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-need-to-verify",
          "declaration": {
            "name": "NeedToVerifyElement",
            "module": "src/elements/e-need-to-verify.ts"
          }
        },
        {
          "kind": "js",
          "name": "NeedToVerifyBorderElement",
          "declaration": {
            "name": "NeedToVerifyBorderElement",
            "module": "src/elements/e-need-to-verify.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-need-to-verify-border",
          "declaration": {
            "name": "NeedToVerifyBorderElement",
            "module": "src/elements/e-need-to-verify.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-page-controls.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PageControlsElement",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "n",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "n"
            },
            {
              "kind": "method",
              "name": "#onPageInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onPerPageInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "increasePage"
            },
            {
              "kind": "method",
              "name": "lastPageNumber"
            },
            {
              "kind": "method",
              "name": "toLastPage"
            },
            {
              "kind": "method",
              "name": "showingRange",
              "return": {
                "type": {
                  "text": "[number, number] | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "isLastPage",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "decreasePage"
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "n",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "n"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-page-controls",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PageControlsElement",
          "declaration": {
            "name": "PageControlsElement",
            "module": "src/elements/e-page-controls.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-page-controls",
          "declaration": {
            "name": "PageControlsElement",
            "module": "src/elements/e-page-controls.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-playground.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source-type.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "sourceTypeHref",
          "parameters": [
            {
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "SourceTypeElement",
          "members": [
            {
              "kind": "field",
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "attribute": "sourceType",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#setViewTransitionName"
            }
          ],
          "attributes": [
            {
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "fieldName": "sourceType"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-source-type",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sourceTypeHref",
          "declaration": {
            "name": "sourceTypeHref",
            "module": "src/elements/e-source-type.ts"
          }
        },
        {
          "kind": "js",
          "name": "SourceTypeElement",
          "declaration": {
            "name": "SourceTypeElement",
            "module": "src/elements/e-source-type.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-source-type",
          "declaration": {
            "name": "SourceTypeElement",
            "module": "src/elements/e-source-type.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source-with-cards.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourceWithCardsElement",
          "members": [
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "cards",
              "type": {
                "text": "CardBySource[]"
              },
              "attribute": "cards"
            },
            {
              "kind": "field",
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "showSourceType"
            },
            {
              "kind": "field",
              "name": "mainSourceElement",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "method",
              "name": "#onBossNavigation"
            }
          ],
          "attributes": [
            {
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "fieldName": "source"
            },
            {
              "name": "cards",
              "type": {
                "text": "CardBySource[]"
              },
              "fieldName": "cards"
            },
            {
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showSourceType"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-source-with-cards",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourceWithCardsElement",
          "declaration": {
            "name": "SourceWithCardsElement",
            "module": "src/elements/e-source-with-cards.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-source-with-cards",
          "declaration": {
            "name": "SourceWithCardsElement",
            "module": "src/elements/e-source-with-cards.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-sourceful-divcord-record.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourcefulDivcordRecordElement",
          "members": [
            {
              "kind": "field",
              "name": "record",
              "type": {
                "text": "DivcordRecord"
              },
              "attribute": "record"
            },
            {
              "kind": "method",
              "name": "formattedNotes"
            },
            {
              "kind": "method",
              "name": "greynote",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "tagHypothesis",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "wikiDisagreements",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "sourcesWithTagButNotOnWiki",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "notes",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "record",
              "type": {
                "text": "DivcordRecord"
              },
              "fieldName": "record"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-sourceful-divcord-record",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourcefulDivcordRecordElement",
          "declaration": {
            "name": "SourcefulDivcordRecordElement",
            "module": "src/elements/e-sourceful-divcord-record.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-sourceful-divcord-record",
          "declaration": {
            "name": "SourcefulDivcordRecordElement",
            "module": "src/elements/e-sourceful-divcord-record.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-verify-faq-alert.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VerifyFaqAlertElement",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-verify-faq-alert",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VerifyFaqAlertElement",
          "declaration": {
            "name": "VerifyFaqAlertElement",
            "module": "src/elements/e-verify-faq-alert.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-verify-faq-alert",
          "declaration": {
            "name": "VerifyFaqAlertElement",
            "module": "src/elements/e-verify-faq-alert.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/gen/cardElementDataFromJson.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "cardElementDataFromJson",
          "type": {
            "text": "CardElementData[]"
          },
          "default": "json"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cardElementDataFromJson",
          "declaration": {
            "name": "cardElementDataFromJson",
            "module": "src/gen/cardElementDataFromJson.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/gen/divcordRecordsFromJson.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "divcordRecordsFromJson",
          "default": "json"
        },
        {
          "kind": "variable",
          "name": "GREYNOTE_VARIANTS",
          "type": {
            "text": "[\r\n\t'Empty',\r\n\t'Monster-specific',\r\n\t'Area-specific',\r\n\t'disabled',\r\n\t'story',\r\n\t'Delirium_reward',\r\n\t'Chest_object',\r\n\t'strongbox',\r\n\t'Global Drop',\r\n\t'Vendor',\r\n]"
          },
          "default": "[\r\n\t'Empty',\r\n\t'Monster-specific',\r\n\t'Area-specific',\r\n\t'disabled',\r\n\t'story',\r\n\t'Delirium_reward',\r\n\t'Chest_object',\r\n\t'strongbox',\r\n\t'Global Drop',\r\n\t'Vendor',\r\n]"
        },
        {
          "kind": "variable",
          "name": "REMAINING_WORK_VARIANTS",
          "type": {
            "text": "[\r\n\t'n/a',\r\n\t'confirm',\r\n\t'unclear hypothesis',\r\n\t'no hypothesis',\r\n\t'story only',\r\n\t'legacy tag',\r\n\t'open ended',\r\n]"
          },
          "default": "[\r\n\t'n/a',\r\n\t'confirm',\r\n\t'unclear hypothesis',\r\n\t'no hypothesis',\r\n\t'story only',\r\n\t'legacy tag',\r\n\t'open ended',\r\n]"
        },
        {
          "kind": "variable",
          "name": "CONFIDENCE_VARIANTS",
          "type": {
            "text": "['none', 'low', 'ok', 'done']"
          },
          "default": "['none', 'low', 'ok', 'done']"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "divcordRecordsFromJson",
          "declaration": {
            "name": "divcordRecordsFromJson",
            "module": "src/gen/divcordRecordsFromJson.ts"
          }
        },
        {
          "kind": "js",
          "name": "GREYNOTE_VARIANTS",
          "declaration": {
            "name": "GREYNOTE_VARIANTS",
            "module": "src/gen/divcordRecordsFromJson.ts"
          }
        },
        {
          "kind": "js",
          "name": "REMAINING_WORK_VARIANTS",
          "declaration": {
            "name": "REMAINING_WORK_VARIANTS",
            "module": "src/gen/divcordRecordsFromJson.ts"
          }
        },
        {
          "kind": "js",
          "name": "CONFIDENCE_VARIANTS",
          "declaration": {
            "name": "CONFIDENCE_VARIANTS",
            "module": "src/gen/divcordRecordsFromJson.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/gen/ISource.interface.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "sourceTypes",
          "type": {
            "text": "[\n\t\"Act\",\n\t\"Map\",\n\t\"Act Boss\",\n\t\"Map Boss\",\n\t\"Maven's Invitation: The Feared\",\n\t\"Uul-Netol, Unburdened Flesh (in Breachstones)\",\n\t\"The Vaal Omnitect\",\n\t\"Metamorph\",\n\t\"Null Portal\",\n\t\"Vaal Flesh Merchant\",\n\t\"All Incursion Architects in Alva missions or Alva's Memory\",\n\t\"All Incursion Architects (The Temple of Atzoatl)\",\n\t\"All Abyss Monsters\",\n\t\"All (Scourge) beyond demons\",\n\t\"All Rogue Exiles\",\n\t\"Venarius\",\n\t\"Argus\",\n\t\"All Invasion Bosses\",\n\t\"All Vaal Side Area Bosses\",\n\t\"Breachlord Boss Domain\",\n\t\"Architect\",\n\t\"Shaper Guardian Boss\",\n\t\"Syndicate Member\",\n\t\"Elder Slayer\",\n\t\"Elder Guardian Boss\",\n\t\"Rogue Exile\",\n\t\"Female Rogue Exile\",\n\t\"Abyss Lich Boss\",\n\t\"Maps Only\",\n\t\"Harbinger Portal\",\n\t\"Endgame Boss\",\n\t\"Delve Boss\",\n\t\"Beast Boss\",\n\t\"Heist Boss\",\n\t\"Beyond Boss\",\n\t\"Expedition Logbook Boss\",\n\t\"Betrayal Catarina\",\n\t\"Oshabi Boss\",\n\t\"Eldritch Perfection Monster\",\n\t\"Shaper Mini-Boss\",\n\t\"Trial of Stinging Doubt\",\n\t\"The Temple of Atzoatl\",\n\t\"All Vaal side areas (need specific information)\",\n\t\"Vaal Side Areas\",\n\t\"Redeemer influenced maps\",\n\t\"Expedition Logbook\",\n\t\"Labyrinth Trial Areas\",\n\t\"Area-Specific\",\n\t\"Atziri Area\",\n\t\"Unique heist contract or boss\",\n\t\"Chest\",\n\t\"Strongbox\",\n\t\"Vendor\",\n\t\"Maelström of Chaos with Barrel Sextant\",\n\t\"Delirium\",\n\t\"Delirium Currency Rewards\",\n\t\"Disabled\",\n\t\"Global Drop\"\n]"
          },
          "default": "[\n\t\"Act\",\n\t\"Map\",\n\t\"Act Boss\",\n\t\"Map Boss\",\n\t\"Maven's Invitation: The Feared\",\n\t\"Uul-Netol, Unburdened Flesh (in Breachstones)\",\n\t\"The Vaal Omnitect\",\n\t\"Metamorph\",\n\t\"Null Portal\",\n\t\"Vaal Flesh Merchant\",\n\t\"All Incursion Architects in Alva missions or Alva's Memory\",\n\t\"All Incursion Architects (The Temple of Atzoatl)\",\n\t\"All Abyss Monsters\",\n\t\"All (Scourge) beyond demons\",\n\t\"All Rogue Exiles\",\n\t\"Venarius\",\n\t\"Argus\",\n\t\"All Invasion Bosses\",\n\t\"All Vaal Side Area Bosses\",\n\t\"Breachlord Boss Domain\",\n\t\"Architect\",\n\t\"Shaper Guardian Boss\",\n\t\"Syndicate Member\",\n\t\"Elder Slayer\",\n\t\"Elder Guardian Boss\",\n\t\"Rogue Exile\",\n\t\"Female Rogue Exile\",\n\t\"Abyss Lich Boss\",\n\t\"Maps Only\",\n\t\"Harbinger Portal\",\n\t\"Endgame Boss\",\n\t\"Delve Boss\",\n\t\"Beast Boss\",\n\t\"Heist Boss\",\n\t\"Beyond Boss\",\n\t\"Expedition Logbook Boss\",\n\t\"Betrayal Catarina\",\n\t\"Oshabi Boss\",\n\t\"Eldritch Perfection Monster\",\n\t\"Shaper Mini-Boss\",\n\t\"Trial of Stinging Doubt\",\n\t\"The Temple of Atzoatl\",\n\t\"All Vaal side areas (need specific information)\",\n\t\"Vaal Side Areas\",\n\t\"Redeemer influenced maps\",\n\t\"Expedition Logbook\",\n\t\"Labyrinth Trial Areas\",\n\t\"Area-Specific\",\n\t\"Atziri Area\",\n\t\"Unique heist contract or boss\",\n\t\"Chest\",\n\t\"Strongbox\",\n\t\"Vendor\",\n\t\"Maelström of Chaos with Barrel Sextant\",\n\t\"Delirium\",\n\t\"Delirium Currency Rewards\",\n\t\"Disabled\",\n\t\"Global Drop\"\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sourceTypes",
          "declaration": {
            "name": "sourceTypes",
            "module": "src/gen/ISource.interface.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/gen/poeDataFromJson.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "poeDataFromJson",
          "default": "json"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "poeDataFromJson",
          "declaration": {
            "name": "poeDataFromJson",
            "module": "src/gen/poeDataFromJson.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardPage",
          "members": [
            {
              "kind": "field",
              "name": "card",
              "type": {
                "text": "string"
              },
              "attribute": "card",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            }
          ],
          "attributes": [
            {
              "name": "card",
              "type": {
                "text": "string"
              },
              "fieldName": "card"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardPage",
          "declaration": {
            "name": "CardPage",
            "module": "src/pages/p-card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-card",
          "declaration": {
            "name": "CardPage",
            "module": "src/pages/p-card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-divcord.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "someCardRecordHasConfidenceVariant",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "card",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "confidenceVariants",
              "type": {
                "text": "IConfidence[]"
              }
            },
            {
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "someCardRecordHasRemainingWorkVariant",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "card",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "remainingWorkVariants",
              "type": {
                "text": "IRemainingWork[]"
              }
            },
            {
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "someCardRecordHasGreynoteWorkVariant",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "card",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "greynoteVariants",
              "type": {
                "text": "IGreynote[]"
              }
            },
            {
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "DivcordTablePage",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shouldApplySelectFilters",
              "attribute": "shouldApplySelectFilters"
            },
            {
              "kind": "field",
              "name": "onlyShowCardsWithNoConfirmedSources",
              "type": {
                "text": "boolean"
              },
              "attribute": "onlyShowCardsWithNoConfirmedSources"
            },
            {
              "kind": "field",
              "name": "onlyShowCardsWithSourcesToVerify",
              "type": {
                "text": "boolean"
              },
              "attribute": "onlyShowCardsWithSourcesToVerify"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "filtered",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "paginated",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "paginatedCardsRenderer",
              "type": {
                "text": "ArrayAsyncRenderer<string>"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "type": {
                "text": "Omit<PresetConfig, 'name'>"
              },
              "default": "DEFAULT_PRESETS[0]"
            },
            {
              "kind": "field",
              "name": "presets",
              "type": {
                "text": "PresetConfig[]"
              },
              "default": "[...DEFAULT_PRESETS]"
            },
            {
              "kind": "field",
              "name": "customPresets",
              "type": {
                "text": "PresetConfig[]"
              }
            },
            {
              "kind": "field",
              "name": "presetActionState",
              "type": {
                "text": "'adding' | 'deleting' | 'idle'"
              },
              "default": "'idle'"
            },
            {
              "kind": "field",
              "name": "presetsForDelete",
              "type": {
                "text": "Set<string>"
              },
              "default": "new Set()"
            },
            {
              "kind": "field",
              "name": "ageEl",
              "type": {
                "text": "DivcordRecordsAgeElement"
              }
            },
            {
              "kind": "method",
              "name": "#onKeydown",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onPresetChecked",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onRecordsUpdated"
            },
            {
              "kind": "method",
              "name": "findPreset",
              "return": {
                "type": {
                  "text": "PresetConfig | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "createFilteredCards",
              "return": {
                "type": {
                  "text": "string[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onCardnameInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onGreynotesSelectChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onRemainingWorkSelectChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onConfidenceSelectChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onshouldApplySelectFiltersCheckbox",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onPlusPresetClicked"
            },
            {
              "kind": "method",
              "name": "#onDeleteModeActivate"
            },
            {
              "kind": "method",
              "name": "#onCancelClicked"
            },
            {
              "kind": "field",
              "name": "inputNewPresetNameEl",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "method",
              "name": "#onSubmitNewPreset",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "SubmitEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#applyPreset",
              "parameters": [
                {
                  "name": "preset",
                  "type": {
                    "text": "PresetConfig"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onTrashClicked"
            },
            {
              "kind": "method",
              "name": "#ononlyShowCardsWithNoConfirmedSourcesCheckbox",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onOnlyShowCardsWithSourcesToVerifyCheckbox",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderDeletingPresets",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "renderAddingPresets",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            },
            {
              "name": "shouldApplySelectFilters",
              "fieldName": "shouldApplySelectFilters"
            },
            {
              "name": "onlyShowCardsWithNoConfirmedSources",
              "type": {
                "text": "boolean"
              },
              "fieldName": "onlyShowCardsWithNoConfirmedSources"
            },
            {
              "name": "onlyShowCardsWithSourcesToVerify",
              "type": {
                "text": "boolean"
              },
              "fieldName": "onlyShowCardsWithSourcesToVerify"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-divcord",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "RelativeTimeElement",
          "members": [
            {
              "kind": "field",
              "name": "#fmt",
              "privacy": "private",
              "default": "new Intl.RelativeTimeFormat('en')"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date"
              },
              "attribute": "date"
            },
            {
              "kind": "field",
              "name": "unit",
              "type": {
                "text": "'seconds' | 'minutes' | undefined"
              },
              "attribute": "unit"
            },
            {
              "kind": "method",
              "name": "minutes"
            },
            {
              "kind": "method",
              "name": "seconds"
            },
            {
              "kind": "method",
              "name": "minutesRelativeString"
            },
            {
              "kind": "method",
              "name": "secondsRelativeString"
            }
          ],
          "attributes": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              },
              "fieldName": "date"
            },
            {
              "name": "unit",
              "type": {
                "text": "'seconds' | 'minutes' | undefined"
              },
              "fieldName": "unit"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-relative-time",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "DivcordRecordsAgeElement",
          "members": [
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date | undefined"
              },
              "attribute": "date"
            },
            {
              "kind": "field",
              "name": "lastUpdated",
              "default": "new Task(this, {\r\n\t\tasync task() {\r\n\t\t\treturn await divcordLoader.cacheDate();\r\n\t\t},\r\n\t\targs: () => [],\r\n\t})"
            }
          ],
          "attributes": [
            {
              "name": "date",
              "type": {
                "text": "Date | undefined"
              },
              "fieldName": "date"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-divcord-records-age",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "UpdateDivcordDataElement",
          "members": [
            {
              "kind": "field",
              "name": "loaderState",
              "type": {
                "text": "DivcordLoaderState"
              }
            },
            {
              "kind": "field",
              "name": "task",
              "default": "new Task<never, void>(this, {\r\n\t\ttask: async () => {\r\n\t\t\tconst records = await divcordLoader.update();\r\n\t\t\tconst event = new CustomEvent('records-updated', { detail: records, bubbles: true, composed: true });\r\n\t\t\tthis.dispatchEvent(event);\r\n\t\t},\r\n\t})"
            },
            {
              "kind": "method",
              "name": "loadBtn",
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-update-divcord-data",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "someCardRecordHasConfidenceVariant",
          "declaration": {
            "name": "someCardRecordHasConfidenceVariant",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "someCardRecordHasRemainingWorkVariant",
          "declaration": {
            "name": "someCardRecordHasRemainingWorkVariant",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "someCardRecordHasGreynoteWorkVariant",
          "declaration": {
            "name": "someCardRecordHasGreynoteWorkVariant",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "DivcordTablePage",
          "declaration": {
            "name": "DivcordTablePage",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-divcord",
          "declaration": {
            "name": "DivcordTablePage",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "RelativeTimeElement",
          "declaration": {
            "name": "RelativeTimeElement",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-relative-time",
          "declaration": {
            "name": "RelativeTimeElement",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "DivcordRecordsAgeElement",
          "declaration": {
            "name": "DivcordRecordsAgeElement",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-divcord-records-age",
          "declaration": {
            "name": "DivcordRecordsAgeElement",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "UpdateDivcordDataElement",
          "declaration": {
            "name": "UpdateDivcordDataElement",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-update-divcord-data",
          "declaration": {
            "name": "UpdateDivcordDataElement",
            "module": "src/pages/p-divcord.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-home.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HomePage",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "searchCriterias",
              "type": {
                "text": "SearchCardsCriteria[]"
              },
              "attribute": "searchCriterias"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "filtered",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "paginated",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "#onCardnameInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onCriteriasSelect",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            },
            {
              "name": "searchCriterias",
              "type": {
                "text": "SearchCardsCriteria[]"
              },
              "fieldName": "searchCriterias"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-home",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HomePage",
          "declaration": {
            "name": "HomePage",
            "module": "src/pages/p-home.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-home",
          "declaration": {
            "name": "HomePage",
            "module": "src/pages/p-home.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-maps-table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MapsTablePage",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "cardsByMaps",
              "type": {
                "text": "Record<string, CardBySource[]>"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "filtered",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "paginated",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#onMapnameInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "maps"
            },
            {
              "kind": "method",
              "name": "table",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-maps-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MapsTablePage",
          "declaration": {
            "name": "MapsTablePage",
            "module": "src/pages/p-maps-table.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-maps-table",
          "declaration": {
            "name": "MapsTablePage",
            "module": "src/pages/p-maps-table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-source-type.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourceTypePage",
          "members": [
            {
              "kind": "field",
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "attribute": "sourceType",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "sourcesAndCardsRenderer",
              "type": {
                "text": "ArrayAsyncRenderer<SourceAndCards>"
              }
            }
          ],
          "attributes": [
            {
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "fieldName": "sourceType"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-source-type",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourceTypePage",
          "declaration": {
            "name": "SourceTypePage",
            "module": "src/pages/p-source-type.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-source-type",
          "declaration": {
            "name": "SourceTypePage",
            "module": "src/pages/p-source-type.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourcePage",
          "members": [
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "cards",
              "type": {
                "text": "CardBySource[]"
              }
            }
          ],
          "attributes": [
            {
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "fieldName": "source"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-source",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourcePage",
          "declaration": {
            "name": "SourcePage",
            "module": "src/pages/p-source.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-source",
          "declaration": {
            "name": "SourcePage",
            "module": "src/pages/p-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-sources.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourcesPage",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'large'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "showSourceType"
            },
            {
              "kind": "field",
              "name": "firstColumnName",
              "type": {
                "text": "string"
              },
              "default": "'Source'",
              "attribute": "firstColumnName"
            },
            {
              "kind": "field",
              "name": "allSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "attribute": "allSourceTypes"
            },
            {
              "kind": "field",
              "name": "selectedSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "default": "[]",
              "attribute": "selectedSourceTypes"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "sourcesAndCards",
              "type": {
                "text": "SourceAndCards[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "sourcetypesCountsMap",
              "type": {
                "text": "Map<SourceType, number>"
              }
            },
            {
              "kind": "field",
              "name": "records",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#onSlSelectChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'large'",
              "fieldName": "size"
            },
            {
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showSourceType"
            },
            {
              "name": "firstColumnName",
              "type": {
                "text": "string"
              },
              "default": "'Source'",
              "fieldName": "firstColumnName"
            },
            {
              "name": "allSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "fieldName": "allSourceTypes"
            },
            {
              "name": "selectedSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "default": "[]",
              "fieldName": "selectedSourceTypes"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-sources",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourcesPage",
          "declaration": {
            "name": "SourcesPage",
            "module": "src/pages/p-sources.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-sources",
          "declaration": {
            "name": "SourcesPage",
            "module": "src/pages/p-sources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-verify-faq.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VerifyFaqPage",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-verify-faq",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VerifyFaqPage",
          "declaration": {
            "name": "VerifyFaqPage",
            "module": "src/pages/p-verify-faq.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-verify-faq",
          "declaration": {
            "name": "VerifyFaqPage",
            "module": "src/pages/p-verify-faq.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-verify.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VerifyPage",
          "members": [
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "sourcesAndCardsRenderer",
              "type": {
                "text": "ArrayAsyncRenderer<SourceAndCards>"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-verify",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VerifyPage",
          "declaration": {
            "name": "VerifyPage",
            "module": "src/pages/p-verify.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-verify",
          "declaration": {
            "name": "VerifyPage",
            "module": "src/pages/p-verify.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/divination-card/data.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "cardsDataMap",
          "default": "new Map<string, CardElementData>()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cardsDataMap",
          "declaration": {
            "name": "cardsDataMap",
            "module": "src/elements/divination-card/data.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/divination-card/e-divination-card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivinationCardElement",
          "cssProperties": [
            {
              "description": "The inline padding to use for for element.",
              "name": "--padding-inline"
            },
            {
              "description": "The block padding to use for for element.",
              "name": "--padding-block"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable | undefined"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "boss",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "boss",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stackSize",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "flavourText",
              "type": {
                "text": "string"
              },
              "default": "``"
            },
            {
              "kind": "field",
              "name": "artFilename",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "rewardHtml",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "minLevelOrRange",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "imageUrl",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "nameMarginTop",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "size",
                  "type": {
                    "text": "CardSize"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onNavigation"
            },
            {
              "kind": "method",
              "name": "divider",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "footer",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "boss",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "boss"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Divination Card",
          "tagName": "e-divination-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivinationCardElement",
          "declaration": {
            "name": "DivinationCardElement",
            "module": "src/elements/divination-card/e-divination-card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-divination-card",
          "declaration": {
            "name": "DivinationCardElement",
            "module": "src/elements/divination-card/e-divination-card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source/e-act-area.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ActAreaElement",
          "members": [
            {
              "kind": "field",
              "name": "actArea",
              "type": {
                "text": "IActArea"
              },
              "attribute": "actArea"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'large'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "actArea",
              "type": {
                "text": "IActArea"
              },
              "fieldName": "actArea"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'large'",
              "fieldName": "size"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-act-area",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ActAreaElement",
          "declaration": {
            "name": "ActAreaElement",
            "module": "src/elements/e-source/e-act-area.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-act-area",
          "declaration": {
            "name": "ActAreaElement",
            "module": "src/elements/e-source/e-act-area.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source/e-actboss.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ActBossElement",
          "members": [
            {
              "kind": "field",
              "name": "boss",
              "type": {
                "text": "IBossfight"
              },
              "attribute": "boss"
            },
            {
              "kind": "field",
              "name": "actArea",
              "type": {
                "text": "IActArea"
              },
              "attribute": "actArea"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "boss",
              "type": {
                "text": "IBossfight"
              },
              "fieldName": "boss"
            },
            {
              "name": "actArea",
              "type": {
                "text": "IActArea"
              },
              "fieldName": "actArea"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-actboss",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ActBossElement",
          "declaration": {
            "name": "ActBossElement",
            "module": "src/elements/e-source/e-actboss.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-actboss",
          "declaration": {
            "name": "ActBossElement",
            "module": "src/elements/e-source/e-actboss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source/e-map.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MapElement",
          "members": [
            {
              "kind": "field",
              "name": "map",
              "type": {
                "text": "IMap"
              },
              "attribute": "map"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium'"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode"
            },
            {
              "kind": "field",
              "name": "imgSize",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "image-size"
            },
            {
              "kind": "field",
              "name": "imageWidth",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "mapColor"
            },
            {
              "kind": "method",
              "name": "renderName",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "map",
              "type": {
                "text": "IMap"
              },
              "fieldName": "map"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium'"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            },
            {
              "name": "image-size",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "imgSize"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-map",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MapElement",
          "declaration": {
            "name": "MapElement",
            "module": "src/elements/e-source/e-map.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-map",
          "declaration": {
            "name": "MapElement",
            "module": "src/elements/e-source/e-map.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source/e-mapboss.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MapBossElement",
          "members": [
            {
              "kind": "field",
              "name": "boss",
              "type": {
                "text": "IMapBoss"
              },
              "attribute": "boss"
            },
            {
              "kind": "field",
              "name": "maps",
              "type": {
                "text": "IMap[]"
              },
              "default": "[]",
              "attribute": "maps"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "boss",
              "type": {
                "text": "IMapBoss"
              },
              "fieldName": "boss"
            },
            {
              "name": "maps",
              "type": {
                "text": "IMap[]"
              },
              "default": "[]",
              "fieldName": "maps"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-mapboss",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MapBossElement",
          "declaration": {
            "name": "MapBossElement",
            "module": "src/elements/e-source/e-mapboss.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-mapboss",
          "declaration": {
            "name": "MapBossElement",
            "module": "src/elements/e-source/e-mapboss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source/e-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NoSourceInPoeDataError",
          "superclass": {
            "name": "Error",
            "module": "src/elements/e-source/e-source.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "SourceElement",
          "cssProperties": [
            {
              "description": "The inline padding to use for for element.",
              "name": "--padding-inline"
            },
            {
              "description": "The block padding to use for for element.",
              "name": "--padding-block"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "showSourceType"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'small'",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode"
            },
            {
              "kind": "field",
              "name": "actSize",
              "type": {
                "text": "'small' | 'large' | undefined"
              },
              "attribute": "actSize"
            },
            {
              "kind": "field",
              "name": "sourceHasSpecialElement",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#setViewTransitionName",
              "parameters": [
                {
                  "name": "transitionName",
                  "default": "'source'"
                }
              ]
            },
            {
              "kind": "method",
              "name": "sourceElement",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "mapboss",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "iMaps",
                  "type": {
                    "text": "IMap[]"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "fieldName": "source"
            },
            {
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showSourceType"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'small'",
              "fieldName": "size"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            },
            {
              "name": "actSize",
              "type": {
                "text": "'small' | 'large' | undefined"
              },
              "fieldName": "actSize"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Any dropsource of divination card: map, act, etc",
          "tagName": "e-source",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NoSourceInPoeDataError",
          "declaration": {
            "name": "NoSourceInPoeDataError",
            "module": "src/elements/e-source/e-source.ts"
          }
        },
        {
          "kind": "js",
          "name": "SourceElement",
          "declaration": {
            "name": "SourceElement",
            "module": "src/elements/e-source/e-source.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-source",
          "declaration": {
            "name": "SourceElement",
            "module": "src/elements/e-source/e-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/input/e-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "InputElement",
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "datalistItems",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "attribute": "datalistItems"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "__numberInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__dateInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "| 'date'\r\n\t\t| 'datetime-local'\r\n\t\t| 'email'\r\n\t\t| 'number'\r\n\t\t| 'password'\r\n\t\t| 'search'\r\n\t\t| 'tel'\r\n\t\t| 'text'\r\n\t\t| 'time'\r\n\t\t| 'url'"
              },
              "default": "'text'",
              "description": "The type of input. Works the same as a native `<input>` element, but only a subset of types are supported. Defaults\r\nto `text`.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "internals"
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "list"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled input.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style input with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is not empty.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "passwordToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "attribute": "password-toggle"
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "attribute": "password-visible"
            },
            {
              "kind": "field",
              "name": "noSpinButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "attribute": "no-spin-buttons"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\r\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\r\nthe same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression pattern to validate input against.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value. Only applies to date and number input types.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value. Only applies to date and number input types.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\r\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "'off' | 'on'"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\r\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "attribute": "enterkeyhint"
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the input.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\r\nkeyboard on supportive devices.",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "description": "Gets or sets the current value as a `Date` object. Returns `null` if the value can't be converted. This will use the native `<input type=\"{{type}}\">` implementation and may result in an error."
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "description": "Gets or sets the current value as a number. Returns `NaN` if the value can't be converted."
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handlePasswordToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the input."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "showPicker",
              "description": "Displays the browser picker for an input element (only works if the browser supports it for the input type)."
            },
            {
              "kind": "method",
              "name": "stepUp",
              "description": "Increments the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "description": "Decrements the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "datalistItems",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "fieldName": "datalistItems"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "type",
              "type": {
                "text": "| 'date'\r\n\t\t| 'datetime-local'\r\n\t\t| 'email'\r\n\t\t| 'number'\r\n\t\t| 'password'\r\n\t\t| 'search'\r\n\t\t| 'tel'\r\n\t\t| 'text'\r\n\t\t| 'time'\r\n\t\t| 'url'"
              },
              "default": "'text'",
              "description": "The type of input. Works the same as a native `<input>` element, but only a subset of types are supported. Defaults\r\nto `text`.",
              "fieldName": "type"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "list"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "fieldName": "size"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled input.",
              "fieldName": "filled"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style input with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is not empty.",
              "fieldName": "clearable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "fieldName": "disabled"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "password-toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "fieldName": "passwordToggle"
            },
            {
              "name": "password-visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "fieldName": "passwordVisible"
            },
            {
              "name": "no-spin-buttons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "fieldName": "noSpinButtons"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\r\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\r\nthe same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "fieldName": "required"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression pattern to validate input against.",
              "fieldName": "pattern"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "fieldName": "maxlength"
            },
            {
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value. Only applies to date and number input types.",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value. Only applies to date and number input types.",
              "fieldName": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\r\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "fieldName": "step"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "'off' | 'on'"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\r\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "fieldName": "autofocus"
            },
            {
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "fieldName": "enterkeyhint"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the input.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\r\nkeyboard on supportive devices.",
              "fieldName": "inputmode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputElement",
          "declaration": {
            "name": "InputElement",
            "module": "src/elements/input/e-input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-input",
          "declaration": {
            "name": "InputElement",
            "module": "src/elements/input/e-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/input/input.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/input/input.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/gen/divcordWasm/divcord_wasm.js",
      "declarations": [
        {
          "kind": "function",
          "name": "parsed_records",
          "parameters": [
            {
              "name": "divcord_table",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "poe_data",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "toast",
              "type": {
                "text": "Function"
              }
            }
          ],
          "return": {
            "type": {
              "text": "any"
            }
          }
        },
        {
          "kind": "function",
          "name": "find_cards_by_source_types",
          "parameters": [
            {
              "name": "types",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "poe_data",
              "type": {
                "text": "any"
              }
            }
          ],
          "return": {
            "type": {
              "text": "any"
            }
          }
        },
        {
          "kind": "function",
          "name": "initSync",
          "parameters": [
            {
              "name": "module"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__wbg_init",
          "parameters": [
            {
              "name": "input"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parsed_records",
          "declaration": {
            "name": "parsed_records",
            "module": "src/gen/divcordWasm/divcord_wasm.js"
          }
        },
        {
          "kind": "js",
          "name": "find_cards_by_source_types",
          "declaration": {
            "name": "find_cards_by_source_types",
            "module": "src/gen/divcordWasm/divcord_wasm.js"
          }
        },
        {
          "kind": "js",
          "name": "initSync",
          "declaration": {
            "name": "initSync",
            "module": "src/gen/divcordWasm/divcord_wasm.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "__wbg_init",
            "module": "src/gen/divcordWasm/divcord_wasm.js"
          }
        }
      ]
    }
  ]
}
