{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "scripts/gen.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/App.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RootElement",
          "members": [
            {
              "kind": "field",
              "name": "outlet",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "pathname",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "pathname"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              },
              "attribute": "divcordTable"
            }
          ],
          "attributes": [
            {
              "name": "pathname",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "pathname"
            },
            {
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              },
              "fieldName": "divcordTable"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "app-root",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RootElement",
          "declaration": {
            "name": "RootElement",
            "module": "src/App.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "app-root",
          "declaration": {
            "name": "RootElement",
            "module": "src/App.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/cards.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "cardsByMaps",
          "return": {
            "type": {
              "text": "Record<string, CardBySource[]>"
            }
          },
          "parameters": [
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              }
            }
          ],
          "description": "Returns Record, where key - name of map, value - card name, it's verification status in context of given map and maybe mapboss, if card drops from mapboss"
        },
        {
          "kind": "function",
          "name": "sortByWeight",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "cards",
              "type": {
                "text": "{ card: string }[] | string[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "Readonly<PoeData>"
              }
            }
          ],
          "description": "Sort cards by weight, start from the most rare. If card has no weight, force it to the end"
        },
        {
          "kind": "function",
          "name": "cardsByMapboss",
          "return": {
            "type": {
              "text": "CardBySource[]"
            }
          },
          "parameters": [
            {
              "name": "boss",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "cardsByActboss",
          "return": {
            "type": {
              "text": "CardBySource[]"
            }
          },
          "parameters": [
            {
              "name": "boss",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "cardsBySource",
          "return": {
            "type": {
              "text": "CardBySource[]"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "Source"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "cardsBySourceTypes",
          "return": {
            "type": {
              "text": "SourceAndCards[]"
            }
          },
          "parameters": [
            {
              "name": "sourceTypes",
              "type": {
                "text": "SourceType[]"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "sourcetypesMap",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              },
              "description": "Records from divcord table"
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ],
          "description": "Creates a map with key: SourceType and value: number of sources of this type.\r\nFor Example, key: \"Map\", and it's value: 177 mean, that there are 177 maps overall"
        },
        {
          "kind": "function",
          "name": "_sourcetypesMap",
          "return": {
            "type": {
              "text": "Map<SourceType, number>"
            }
          },
          "parameters": [
            {
              "name": "sourcesAndCards",
              "type": {
                "text": "SourceAndCards[]"
              }
            }
          ],
          "description": "Creates a map with key: SourceType and value: number of sources of this type.\r\nFor Example, key: \"Map\", and it's value: 177 mean, that there are 177 maps overall"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cardsByMaps",
          "declaration": {
            "name": "cardsByMaps",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "sortByWeight",
          "declaration": {
            "name": "sortByWeight",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsByMapboss",
          "declaration": {
            "name": "cardsByMapboss",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsByActboss",
          "declaration": {
            "name": "cardsByActboss",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsBySource",
          "declaration": {
            "name": "cardsBySource",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsBySourceTypes",
          "declaration": {
            "name": "cardsBySourceTypes",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "sourcetypesMap",
          "declaration": {
            "name": "sourcetypesMap",
            "module": "src/cards.ts"
          }
        },
        {
          "kind": "js",
          "name": "_sourcetypesMap",
          "declaration": {
            "name": "_sourcetypesMap",
            "module": "src/cards.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/context.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "divcordTableContext"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "divcordTableContext",
          "declaration": {
            "name": "divcordTableContext",
            "module": "src/context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/DivcordLoader.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivcordLoader",
          "members": [
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "State"
              },
              "default": "'idle'"
            },
            {
              "kind": "field",
              "name": "#cache",
              "privacy": "private",
              "type": {
                "text": "Promise<Cache>"
              }
            },
            {
              "kind": "field",
              "name": "#storage",
              "privacy": "private",
              "default": "new Storage('divcord', [])"
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "State"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#setState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "State"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getRecordsAndStartUpdateIfNeeded",
              "return": {
                "type": {
                  "text": "Promise<DivcordRecord[]>"
                }
              }
            },
            {
              "kind": "method",
              "name": "fetchSpreadsheet",
              "return": {
                "type": {
                  "text": "Promise<Spreadsheet>"
                }
              }
            },
            {
              "kind": "method",
              "name": "cacheDate",
              "return": {
                "type": {
                  "text": "Promise<Date | null>"
                }
              }
            },
            {
              "kind": "method",
              "name": "cacheAge",
              "return": {
                "type": {
                  "text": "Promise<number | null>"
                }
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "Promise<CacheValidity>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#freshestAvailableRecords"
            },
            {
              "kind": "method",
              "name": "#cachedResponses",
              "return": {
                "type": {
                  "text": "Promise<CachedResponses | null>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#deserializeResponses",
              "return": {
                "type": {
                  "text": "Promise<Spreadsheet>"
                }
              },
              "parameters": [
                {
                  "name": "cached",
                  "type": {
                    "text": "CachedResponses"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#fromStaticJson",
              "return": {
                "type": {
                  "text": "Promise<DivcordRecord[]>"
                }
              }
            },
            {
              "kind": "field",
              "name": "#eventTarget",
              "privacy": "private",
              "default": "new EventTarget()",
              "inheritedFrom": {
                "name": "EventEmitter",
                "module": "src/utils.ts"
              }
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Key"
                  }
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "(e: Events[Key]) => void"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitter",
                "module": "src/utils.ts"
              }
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Key"
                  }
                },
                {
                  "name": "detail",
                  "type": {
                    "text": "Events[Key]"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitter",
                "module": "src/utils.ts"
              }
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Key"
                  }
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "(e: Events[Key]) => void"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "EventEmitter",
                "module": "src/utils.ts"
              }
            }
          ],
          "superclass": {
            "name": "EventEmitter",
            "module": "/src/utils"
          }
        },
        {
          "kind": "variable",
          "name": "divcordLoader",
          "default": "new DivcordLoader()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordLoader",
          "declaration": {
            "name": "DivcordLoader",
            "module": "src/DivcordLoader.ts"
          }
        },
        {
          "kind": "js",
          "name": "divcordLoader",
          "declaration": {
            "name": "divcordLoader",
            "module": "src/DivcordLoader.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/DivcordTable.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Represents the divcord spreadsheet https://docs.google.com/spreadsheets/d/1Pf2KNuGguZLyf6eu_R0E503U0QNyfMZqaRETsN5g6kU/edit?pli=1#gid=0",
          "name": "DivcordTable",
          "members": [
            {
              "kind": "field",
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              },
              "default": "records"
            },
            {
              "kind": "method",
              "name": "globalDrops",
              "return": {
                "type": {
                  "text": "Map<CardName, Source>"
                }
              },
              "description": "Returns Map, where key is card name and value is Source object with global drop type and information about min and max level drop"
            },
            {
              "kind": "method",
              "name": "cards",
              "return": {
                "type": {
                  "text": "CardName[]"
                }
              },
              "description": "Returns Array of all card names"
            },
            {
              "kind": "method",
              "name": "sourcesByCard",
              "return": {
                "type": {
                  "text": "Source[]"
                }
              },
              "parameters": [
                {
                  "name": "card",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns Array of sources from all records, accociated with given card"
            },
            {
              "kind": "method",
              "name": "verifySourcesByCard",
              "return": {
                "type": {
                  "text": "Source[]"
                }
              },
              "parameters": [
                {
                  "name": "card",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns Array of need-to-verify sources from all records, accociated with given card"
            },
            {
              "kind": "method",
              "name": "cardSourcesAndVerifySourcesMap",
              "return": {
                "type": {
                  "text": "Map<CardName, Source[]>"
                }
              },
              "description": "Returns Map, where key is card name and value is Array of sources from all records, accociated with given card"
            },
            {
              "kind": "method",
              "name": "cardSourcesMap",
              "return": {
                "type": {
                  "text": "Map<CardName, Source[]>"
                }
              },
              "description": "Returns Map, where key is card name and value is Array of sources from all records, accociated with given card"
            },
            {
              "kind": "method",
              "name": "recordsByCard",
              "return": {
                "type": {
                  "text": "DivcordRecord[]"
                }
              },
              "parameters": [
                {
                  "name": "card",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Returns Array of records, accociated with given card"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordTable",
          "declaration": {
            "name": "DivcordTable",
            "module": "src/DivcordTable.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SetTransitionNameEvent",
          "superclass": {
            "name": "CustomEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "function",
          "name": "dispatchSetTransitionName",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "HTMLElement & { href?: string }"
              }
            },
            {
              "name": "transitionName",
              "type": {
                "text": "TransitionName"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SetTransitionNameEvent",
          "declaration": {
            "name": "SetTransitionNameEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "js",
          "name": "dispatchSetTransitionName",
          "declaration": {
            "name": "dispatchSetTransitionName",
            "module": "src/events.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/linkStyles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "linkStyles",
          "default": "css`\r\n\ta:link {\r\n\t\ttext-decoration: none;\r\n\t}\r\n\r\n\ta,\r\n\ta:visited {\r\n\t\tcolor: var(--source-color, #bbbbbb);\r\n\t}\r\n\r\n\ta:hover {\r\n\t\tcolor: var(--link-color-hover, skyblue);\r\n\t\ttext-decoration: underline;\r\n\t}\r\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "linkStyles",
          "declaration": {
            "name": "linkStyles",
            "module": "src/linkStyles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/main.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/PoeData.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PoeData",
          "members": [
            {
              "kind": "field",
              "name": "acts",
              "type": {
                "text": "ActArea[]"
              },
              "default": "acts"
            },
            {
              "kind": "field",
              "name": "cards",
              "type": {
                "text": "Record<string, Card>"
              },
              "default": "cards"
            },
            {
              "kind": "field",
              "name": "maps",
              "type": {
                "text": "MapArea[]"
              },
              "default": "maps"
            },
            {
              "kind": "field",
              "name": "mapbosses",
              "type": {
                "text": "MapBoss[]"
              },
              "default": "mapbosses"
            },
            {
              "kind": "field",
              "name": "find",
              "type": {
                "text": "FindPoeData"
              },
              "default": "new FindPoeData(this)"
            },
            {
              "kind": "method",
              "name": "cardMinLevel",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "card",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "areaLevel",
              "return": {
                "type": {
                  "text": "number | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "area",
                  "type": {
                    "text": "'Map' | 'Act'"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "variable",
          "name": "poeData",
          "default": "new PoeData(poeDataFromJson)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PoeData",
          "declaration": {
            "name": "PoeData",
            "module": "src/PoeData.ts"
          }
        },
        {
          "kind": "js",
          "name": "poeData",
          "declaration": {
            "name": "poeData",
            "module": "src/PoeData.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/router.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "router",
          "default": "new Router({\r\n\troutes: [\r\n\t\t{\r\n\t\t\tpath: '/',\r\n\t\t\ttitle: 'Divicards',\r\n\t\t\trender: ({ query }) => {\r\n\t\t\t\treturn html`<p-home\r\n\t\t\t\t\t.page=${Number(query.page ?? 1)}\r\n\t\t\t\t\t.perPage=${Number(query['per-page'] ?? 10)}\r\n\t\t\t\t\tfilter=${query.filter ?? ''}\r\n\t\t\t\t></p-home>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/divcord',\r\n\t\t\ttitle: 'Divcord',\r\n\t\t\tplugins: [lazy(() => import('./pages/p-divcord'))],\r\n\t\t\trender: ({ query }) => html`<p-divcord\r\n\t\t\t\t.page=${Number(query.page ?? 1)}\r\n\t\t\t\t.perPage=${Number(query['per-page'] ?? 10)}\r\n\t\t\t\t.filter=${query.filter ?? ''}\r\n\t\t\t></p-divcord>`,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/verify-faq',\r\n\t\t\ttitle: 'faq',\r\n\t\t\trender: () => html`<p-verify-faq></p-verify-faq>`,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/card/:name',\r\n\t\t\ttitle: context => decodeURI(context.params!.name),\r\n\t\t\trender: context => {\r\n\t\t\t\tconst name = decodeURI(context.params.name);\r\n\t\t\t\treturn html`<p-card .card=${name}></p-card>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/verify',\r\n\t\t\ttitle: 'Need to verify',\r\n\t\t\trender: () => {\r\n\t\t\t\treturn html`<p-verify></p-verify>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/useful-resources',\r\n\t\t\ttitle: 'Useful Resources',\r\n\t\t\trender: () => {\r\n\t\t\t\treturn html`<p-useful-resources></p-useful-resources>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/source',\r\n\t\t\ttitle: context => decodeURI(context.query!.id),\r\n\t\t\trender: context => {\r\n\t\t\t\tconst id: string = context.query.id;\r\n\t\t\t\tconst type = context.query.type as SourceType;\r\n\t\t\t\tconst source: Source = { id, type, kind: 'source-with-member' };\r\n\t\t\t\treturn html`<p-source .source=${source}></p-source>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/maps',\r\n\t\t\ttitle: 'Maps',\r\n\t\t\tplugins: [lazy(() => import('./pages/p-maps'))],\r\n\t\t\trender: ({ query }) => {\r\n\t\t\t\treturn html`<p-maps\r\n\t\t\t\t\t.page=${Number(query.page ?? 1)}\r\n\t\t\t\t\t.perPage=${Number(query['per-page'] ?? 10)}\r\n\t\t\t\t\tfilter=${query.filter}\r\n\t\t\t\t></p-maps>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/sources',\r\n\t\t\ttitle: 'Sources',\r\n\t\t\tplugins: [lazy(() => import('./pages/p-sources'))],\r\n\t\t\trender: ({ query }) => {\r\n\t\t\t\treturn html`<p-sources\r\n\t\t\t\t\t.page=${Number(query.page ?? 1)}\r\n\t\t\t\t\t.perPage=${Number(query['per-page'] ?? 10)}\r\n\t\t\t\t></p-sources>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/weights',\r\n\t\t\ttitle: 'Weights',\r\n\t\t\tplugins: [lazy(() => import('./pages/p-weights'))],\r\n\t\t\trender: () => html`<p-weights></p-weights>`,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/source-type/:id',\r\n\t\t\ttitle: context => decodeURI(context.params!.id),\r\n\t\t\trender: ({ params }) => {\r\n\t\t\t\tconst sourceType = decodeURI(params.id) as SourceType;\r\n\t\t\t\treturn html`<p-source-type .sourceType=${sourceType}></p-source-type>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/spreadsheet',\r\n\t\t\ttitle: 'Divcord spreadsheet',\r\n\t\t\trender: () => html`<e-divcord-spreadsheet></e-divcord-spreadsheet>`,\r\n\t\t},\r\n\t],\r\n})"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "router",
          "declaration": {
            "name": "router",
            "module": "src/router.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/searchCardsByQuery.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SEARCH_CRITERIA_VARIANTS",
          "type": {
            "text": "[\r\n\t'name',\r\n\t'flavour text',\r\n\t'source',\r\n\t'source type',\r\n\t'reward',\r\n\t'stack size',\r\n\t'release version',\r\n\t'release league',\r\n]"
          },
          "default": "[\r\n\t'name',\r\n\t'flavour text',\r\n\t'source',\r\n\t'source type',\r\n\t'reward',\r\n\t'stack size',\r\n\t'release version',\r\n\t'release league',\r\n]"
        },
        {
          "kind": "function",
          "name": "searchCardsByQuery",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "query",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "criterias",
              "type": {
                "text": "SearchCardsCriteria[]"
              }
            },
            {
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "findByReleaseLeague",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "query",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "allCards",
              "type": {
                "text": "Readonly<string[]>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "findByStackSize",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "query",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SEARCH_CRITERIA_VARIANTS",
          "declaration": {
            "name": "SEARCH_CRITERIA_VARIANTS",
            "module": "src/searchCardsByQuery.ts"
          }
        },
        {
          "kind": "js",
          "name": "searchCardsByQuery",
          "declaration": {
            "name": "searchCardsByQuery",
            "module": "src/searchCardsByQuery.ts"
          }
        },
        {
          "kind": "js",
          "name": "findByReleaseLeague",
          "declaration": {
            "name": "findByReleaseLeague",
            "module": "src/searchCardsByQuery.ts"
          }
        },
        {
          "kind": "js",
          "name": "findByStackSize",
          "declaration": {
            "name": "findByStackSize",
            "module": "src/searchCardsByQuery.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/storage.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Storage that uses browser's LocalStorage. Declare key-type pair in Registry.",
          "name": "Storage",
          "members": [
            {
              "kind": "field",
              "name": "#key",
              "privacy": "private",
              "type": {
                "text": "Key"
              },
              "default": "key"
            },
            {
              "kind": "field",
              "name": "#serde",
              "privacy": "private",
              "type": {
                "text": "Serde<Registry[Key], Input>"
              },
              "default": "serde"
            },
            {
              "kind": "field",
              "name": "#defaultValue",
              "privacy": "private",
              "type": {
                "text": "Registry[Key]"
              },
              "default": "defaultValue"
            },
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Registry[Key]"
              }
            },
            {
              "kind": "method",
              "name": "exists",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "save",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "Input"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "load",
              "return": {
                "type": {
                  "text": "Registry[Key]"
                }
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "Serde",
          "members": [
            {
              "kind": "method",
              "name": "serialize",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Input"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deserialize",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "s",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Storage",
          "declaration": {
            "name": "Storage",
            "module": "src/storage.ts"
          }
        },
        {
          "kind": "js",
          "name": "Serde",
          "declaration": {
            "name": "Serde",
            "module": "src/storage.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/toast.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "toast",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "message",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "variant",
              "default": "'primary'",
              "type": {
                "text": "ToastVariant"
              }
            },
            {
              "name": "duration",
              "default": "100_000_000"
            }
          ]
        },
        {
          "kind": "function",
          "name": "warningToast",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "message",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "toast",
          "declaration": {
            "name": "toast",
            "module": "src/toast.ts"
          }
        },
        {
          "kind": "js",
          "name": "warningToast",
          "declaration": {
            "name": "warningToast",
            "module": "src/toast.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "sourceHref",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "Source"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "paginate",
          "return": {
            "type": {
              "text": "T[]"
            }
          },
          "parameters": [
            {
              "name": "arr",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "page",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "perPage",
              "type": {
                "text": "number"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "escapeHtml",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "html",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "SlConverter",
          "members": [
            {
              "kind": "field",
              "name": "#SL_DELIMETER",
              "privacy": "private",
              "static": true,
              "default": "'sl-v'",
              "type": {
                "text": "'sl-v'"
              }
            },
            {
              "kind": "method",
              "name": "toSlValue",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "s",
                  "type": {
                    "text": "T"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "fromSlValue",
              "static": true,
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "s",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "ArrayAsyncRenderer",
          "members": [
            {
              "kind": "field",
              "name": "#generator",
              "privacy": "private",
              "type": {
                "text": "AsyncGenerator<T>"
              }
            },
            {
              "kind": "field",
              "name": "#elementRender",
              "privacy": "private",
              "type": {
                "text": "ElementRenderCallback<T> | undefined"
              },
              "default": "elementRender"
            },
            {
              "kind": "method",
              "name": "#initGenerator",
              "parameters": [
                {
                  "name": "arr",
                  "type": {
                    "text": "T[]"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "startViewTransition",
          "return": {
            "type": {
              "text": "Promise<ViewTransition | void>"
            }
          },
          "parameters": [
            {
              "name": "cb",
              "type": {
                "text": "(...args: unknown[]) => unknown"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "EventEmitter",
          "members": [
            {
              "kind": "field",
              "name": "#eventTarget",
              "privacy": "private",
              "default": "new EventTarget()"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Key"
                  }
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "(e: Events[Key]) => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "emit",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Key"
                  }
                },
                {
                  "name": "detail",
                  "type": {
                    "text": "Events[Key]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "on",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "Key"
                  }
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "(e: Events[Key]) => void"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "sortAllSourcesByLevel",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "Readonly<PoeData>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "sortSourcesByLevel",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "sources",
              "type": {
                "text": "Source[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "Readonly<PoeData>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "sourceLevel",
          "return": {
            "type": {
              "text": "number | null"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "Source"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "Readonly<PoeData>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "formatWithNewlines",
          "return": {
            "type": {
              "text": "DirectiveResult<typeof UnsafeHTMLDirective>"
            }
          },
          "parameters": [
            {
              "name": "markup",
              "default": "''"
            },
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "{ escape: boolean }"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sourceHref",
          "declaration": {
            "name": "sourceHref",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "paginate",
          "declaration": {
            "name": "paginate",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "escapeHtml",
          "declaration": {
            "name": "escapeHtml",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "SlConverter",
          "declaration": {
            "name": "SlConverter",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "ArrayAsyncRenderer",
          "declaration": {
            "name": "ArrayAsyncRenderer",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "startViewTransition",
          "declaration": {
            "name": "startViewTransition",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "EventEmitter",
          "declaration": {
            "name": "EventEmitter",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "sortAllSourcesByLevel",
          "declaration": {
            "name": "sortAllSourcesByLevel",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "sortSourcesByLevel",
          "declaration": {
            "name": "sortSourcesByLevel",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "sourceLevel",
          "declaration": {
            "name": "sourceLevel",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "formatWithNewlines",
          "declaration": {
            "name": "formatWithNewlines",
            "module": "src/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/worker.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/controllers/useStorage.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UseStorage",
          "members": [
            {
              "kind": "field",
              "name": "storage",
              "type": {
                "text": "Storage<Key, Input>"
              },
              "default": "new Storage(key, defaultValue, serde)"
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              },
              "default": "host"
            },
            {
              "kind": "method",
              "name": "value",
              "return": {
                "type": {
                  "text": "Registry[Key]"
                }
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Input | ((val: Registry[Key]) => Input)"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UseStorage",
          "declaration": {
            "name": "UseStorage",
            "module": "src/controllers/useStorage.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-card-with-divcord-records.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardWithDivcordRecordsElement",
          "members": [
            {
              "kind": "field",
              "name": "card",
              "type": {
                "text": "string"
              },
              "attribute": "card",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              },
              "attribute": "records"
            }
          ],
          "attributes": [
            {
              "name": "card",
              "type": {
                "text": "string"
              },
              "fieldName": "card"
            },
            {
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              },
              "fieldName": "records"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Element for card page and divcord page list",
          "tagName": "e-card-with-divcord-records",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardWithDivcordRecordsElement",
          "declaration": {
            "name": "CardWithDivcordRecordsElement",
            "module": "src/elements/e-card-with-divcord-records.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-card-with-divcord-records",
          "declaration": {
            "name": "CardWithDivcordRecordsElement",
            "module": "src/elements/e-card-with-divcord-records.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-card-with-sources.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardWithSourcesElement",
          "cssParts": [
            {
              "description": "Divination card element",
              "name": "card"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cardSize",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "card-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "sourceSize",
              "type": {
                "text": "SourceSize"
              },
              "default": "'medium'",
              "attribute": "source-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              },
              "attribute": "divcordTable"
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'compact'",
              "attribute": "renderMode"
            },
            {
              "kind": "field",
              "name": "sources",
              "type": {
                "text": "Source[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "verifySources",
              "type": {
                "text": "Source[]"
              },
              "default": "[]"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name"
            },
            {
              "name": "card-size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "cardSize"
            },
            {
              "name": "source-size",
              "type": {
                "text": "SourceSize"
              },
              "default": "'medium'",
              "fieldName": "sourceSize"
            },
            {
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              },
              "fieldName": "divcordTable"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'compact'",
              "fieldName": "renderMode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-card-with-sources",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardWithSourcesElement",
          "declaration": {
            "name": "CardWithSourcesElement",
            "module": "src/elements/e-card-with-sources.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-card-with-sources",
          "declaration": {
            "name": "CardWithSourcesElement",
            "module": "src/elements/e-card-with-sources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-cards-by-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardsBySourceElement",
          "members": [
            {
              "kind": "field",
              "name": "cards",
              "type": {
                "text": "CardBySource[]"
              },
              "default": "[]",
              "attribute": "cards"
            },
            {
              "kind": "field",
              "name": "sourceSize",
              "type": {
                "text": "SourceSize"
              },
              "default": "'medium'",
              "attribute": "source-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cardSize",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "card-size",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#onBossNavigation"
            }
          ],
          "events": [
            {
              "name": "boss-navigation",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "cards",
              "type": {
                "text": "CardBySource[]"
              },
              "default": "[]",
              "fieldName": "cards"
            },
            {
              "name": "source-size",
              "type": {
                "text": "SourceSize"
              },
              "default": "'medium'",
              "fieldName": "sourceSize"
            },
            {
              "name": "card-size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "cardSize"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "group of cards for dropsource page and maps page",
          "tagName": "e-cards-by-source",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardsBySourceElement",
          "declaration": {
            "name": "CardsBySourceElement",
            "module": "src/elements/e-cards-by-source.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-cards-by-source",
          "declaration": {
            "name": "CardsBySourceElement",
            "module": "src/elements/e-cards-by-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-discord-avatar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DiscordAvatarElement",
          "members": [
            {
              "kind": "field",
              "name": "username",
              "type": {
                "text": "DiscordUsername"
              },
              "default": "'nerdyjoe'",
              "attribute": "username",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "32",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "default": "'#fff'"
            }
          ],
          "attributes": [
            {
              "name": "username",
              "type": {
                "text": "DiscordUsername"
              },
              "default": "'nerdyjoe'",
              "fieldName": "username"
            },
            {
              "name": "size",
              "type": {
                "text": "number"
              },
              "default": "32",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-discord-avatar",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DiscordAvatarElement",
          "declaration": {
            "name": "DiscordAvatarElement",
            "module": "src/elements/e-discord-avatar.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-discord-avatar",
          "declaration": {
            "name": "DiscordAvatarElement",
            "module": "src/elements/e-discord-avatar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-divcord-needs-info.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivcordNeedsInfoElement",
          "members": [
            {
              "kind": "field",
              "name": "card",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "card",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "card",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "card"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-divcord-needs-info",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordNeedsInfoElement",
          "declaration": {
            "name": "DivcordNeedsInfoElement",
            "module": "src/elements/e-divcord-needs-info.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-divcord-needs-info",
          "declaration": {
            "name": "DivcordNeedsInfoElement",
            "module": "src/elements/e-divcord-needs-info.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-divcord-records-age.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivcordRecordsAgeElement",
          "members": [
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date | undefined"
              },
              "attribute": "date"
            },
            {
              "kind": "field",
              "name": "lastUpdated",
              "default": "new Task(this, {\r\n\t\tasync task() {\r\n\t\t\treturn await divcordLoader.cacheDate();\r\n\t\t},\r\n\t\targs: () => [],\r\n\t})"
            }
          ],
          "attributes": [
            {
              "name": "date",
              "type": {
                "text": "Date | undefined"
              },
              "fieldName": "date"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-divcord-records-age",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordRecordsAgeElement",
          "declaration": {
            "name": "DivcordRecordsAgeElement",
            "module": "src/elements/e-divcord-records-age.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-divcord-records-age",
          "declaration": {
            "name": "DivcordRecordsAgeElement",
            "module": "src/elements/e-divcord-records-age.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-need-to-verify.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NeedToVerifyElement",
          "members": [
            {
              "kind": "field",
              "name": "slotParent",
              "type": {
                "text": "HTMLDivElement"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Notifiyng border for e-divination-card and e-source, when it needs to be verified.\r\nExample:\r\n```js\r\n<e-need-to-verify>\r\n<e-divination-card name=\"The Doctor\"></e-divination-card>\r\n</e-need-to-verify>\r\n```",
          "tagName": "e-need-to-verify",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "NeedToVerifyBorderElement",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-need-to-verify-border",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NeedToVerifyElement",
          "declaration": {
            "name": "NeedToVerifyElement",
            "module": "src/elements/e-need-to-verify.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-need-to-verify",
          "declaration": {
            "name": "NeedToVerifyElement",
            "module": "src/elements/e-need-to-verify.ts"
          }
        },
        {
          "kind": "js",
          "name": "NeedToVerifyBorderElement",
          "declaration": {
            "name": "NeedToVerifyBorderElement",
            "module": "src/elements/e-need-to-verify.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-need-to-verify-border",
          "declaration": {
            "name": "NeedToVerifyBorderElement",
            "module": "src/elements/e-need-to-verify.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-page-controls.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PageControlsElement",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "n",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "n"
            },
            {
              "kind": "method",
              "name": "#onPageInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onPerPageInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "increasePage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "lastPageNumber",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "toLastPage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "showingRange",
              "return": {
                "type": {
                  "text": "[number, number] | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "isLastPage",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "decreasePage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "n",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "n"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-page-controls",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PageControlsElement",
          "declaration": {
            "name": "PageControlsElement",
            "module": "src/elements/e-page-controls.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-page-controls",
          "declaration": {
            "name": "PageControlsElement",
            "module": "src/elements/e-page-controls.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-relative-time.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "RelativeTimeElement",
          "members": [
            {
              "kind": "field",
              "name": "#fmt",
              "privacy": "private",
              "default": "new Intl.RelativeTimeFormat('en')"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date"
              },
              "attribute": "date"
            },
            {
              "kind": "field",
              "name": "unit",
              "type": {
                "text": "'seconds' | 'minutes' | undefined"
              },
              "attribute": "unit"
            },
            {
              "kind": "method",
              "name": "minutes",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "seconds",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "minutesRelativeString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "secondsRelativeString",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              },
              "fieldName": "date"
            },
            {
              "name": "unit",
              "type": {
                "text": "'seconds' | 'minutes' | undefined"
              },
              "fieldName": "unit"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-relative-time",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RelativeTimeElement",
          "declaration": {
            "name": "RelativeTimeElement",
            "module": "src/elements/e-relative-time.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-relative-time",
          "declaration": {
            "name": "RelativeTimeElement",
            "module": "src/elements/e-relative-time.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-sheets-link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SheetsLinkElement",
          "slots": [
            {
              "description": "default - for link title",
              "name": ""
            },
            {
              "description": "icon - for custom icon",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "discordUsers",
              "type": {
                "text": "DiscordUsername[]"
              },
              "default": "[]",
              "attribute": "discordUsers"
            }
          ],
          "attributes": [
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "discordUsers",
              "type": {
                "text": "DiscordUsername[]"
              },
              "default": "[]",
              "fieldName": "discordUsers"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-sheets-link",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SheetsLinkElement",
          "declaration": {
            "name": "SheetsLinkElement",
            "module": "src/elements/e-sheets-link.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-sheets-link",
          "declaration": {
            "name": "SheetsLinkElement",
            "module": "src/elements/e-sheets-link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source-type.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourceTypeElement",
          "members": [
            {
              "kind": "field",
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "attribute": "sourceType",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#setViewTransitionName"
            }
          ],
          "attributes": [
            {
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "fieldName": "sourceType"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-source-type",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourceTypeElement",
          "declaration": {
            "name": "SourceTypeElement",
            "module": "src/elements/e-source-type.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-source-type",
          "declaration": {
            "name": "SourceTypeElement",
            "module": "src/elements/e-source-type.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source-with-cards.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourceWithCardsElement",
          "members": [
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "Source"
              },
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "cards",
              "type": {
                "text": "CardBySource[]"
              },
              "attribute": "cards"
            },
            {
              "kind": "field",
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "showSourceType"
            },
            {
              "kind": "field",
              "name": "sourceSize",
              "type": {
                "text": "SourceSize"
              },
              "default": "'medium'",
              "attribute": "source-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cardSize",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "card-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "mainSourceElement",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "method",
              "name": "#onBossNavigation"
            }
          ],
          "attributes": [
            {
              "name": "source",
              "type": {
                "text": "Source"
              },
              "fieldName": "source"
            },
            {
              "name": "cards",
              "type": {
                "text": "CardBySource[]"
              },
              "fieldName": "cards"
            },
            {
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showSourceType"
            },
            {
              "name": "source-size",
              "type": {
                "text": "SourceSize"
              },
              "default": "'medium'",
              "fieldName": "sourceSize"
            },
            {
              "name": "card-size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "cardSize"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-source-with-cards",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourceWithCardsElement",
          "declaration": {
            "name": "SourceWithCardsElement",
            "module": "src/elements/e-source-with-cards.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-source-with-cards",
          "declaration": {
            "name": "SourceWithCardsElement",
            "module": "src/elements/e-source-with-cards.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-sourceful-divcord-record.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourcefulDivcordRecordElement",
          "cssProperties": [
            {
              "description": "The text color of greynote.",
              "name": "--greynote-color"
            },
            {
              "description": "The text color of notes and wiki disagreements.",
              "name": "--paragraph-color"
            },
            {
              "description": "The background color for Done confidence.",
              "name": "--confidence--done-bg-color"
            },
            {
              "description": "The background color for OK confidence.",
              "name": "--confidence--ok-bg-color"
            },
            {
              "description": "The background color for Low confidence.",
              "name": "--confidence--low-bg-color"
            },
            {
              "description": "The background color for None confidence.",
              "name": "--confidence--none-bg-color"
            },
            {
              "description": "The text color for Done confidence.",
              "name": "--confidence--done-color"
            },
            {
              "description": "The ok color for OK confidence.",
              "name": "--confidence--ok-color"
            },
            {
              "description": "The text color for Low confidence.",
              "name": "--confidence--low-color"
            },
            {
              "description": "The text color for None confidence.",
              "name": "--confidence--none-color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "record",
              "type": {
                "text": "DivcordRecord"
              },
              "attribute": "record"
            }
          ],
          "attributes": [
            {
              "name": "record",
              "type": {
                "text": "DivcordRecord"
              },
              "fieldName": "record"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-sourceful-divcord-record",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourcefulDivcordRecordElement",
          "declaration": {
            "name": "SourcefulDivcordRecordElement",
            "module": "src/elements/e-sourceful-divcord-record.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-sourceful-divcord-record",
          "declaration": {
            "name": "SourcefulDivcordRecordElement",
            "module": "src/elements/e-sourceful-divcord-record.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-sources.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourcesElement",
          "members": [
            {
              "kind": "field",
              "name": "sources",
              "type": {
                "text": "Source[]"
              },
              "default": "[]",
              "attribute": "sources"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "SourceSize"
              },
              "default": "'small'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'compact'",
              "attribute": "render-mode",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "verificationStatus",
              "type": {
                "text": "VerificationStatus"
              },
              "default": "'done'",
              "attribute": "verification-status",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "sources",
              "type": {
                "text": "Source[]"
              },
              "default": "[]",
              "fieldName": "sources"
            },
            {
              "name": "size",
              "type": {
                "text": "SourceSize"
              },
              "default": "'small'",
              "fieldName": "size"
            },
            {
              "name": "render-mode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'compact'",
              "fieldName": "renderMode"
            },
            {
              "name": "verification-status",
              "type": {
                "text": "VerificationStatus"
              },
              "default": "'done'",
              "fieldName": "verificationStatus"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-sources",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourcesElement",
          "declaration": {
            "name": "SourcesElement",
            "module": "src/elements/e-sources.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-sources",
          "declaration": {
            "name": "SourcesElement",
            "module": "src/elements/e-sources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-topnav.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TopNavElement",
          "members": [
            {
              "kind": "field",
              "name": "linkItems",
              "type": {
                "text": "array"
              },
              "default": "[\r\n\t\t['/', 'Home'],\r\n\t\t['/divcord', 'Divcord'],\r\n\t\t['/verify', 'Need to verify'],\r\n\t\t['/useful-resources', 'Useful Resources'],\r\n\t\t['/weights', 'Weights'],\r\n\t\t['/verify-faq', 'faq'],\r\n\t\t['/sources', 'Sources'],\r\n\t\t['/maps', 'Maps'],\r\n\t]",
              "attribute": "linkItems"
            },
            {
              "kind": "field",
              "name": "pathname"
            },
            {
              "kind": "field",
              "name": "menuDialogElement",
              "type": {
                "text": "HTMLDialogElement"
              }
            }
          ],
          "attributes": [
            {
              "name": "linkItems",
              "type": {
                "text": "array"
              },
              "default": "[\r\n\t\t['/', 'Home'],\r\n\t\t['/divcord', 'Divcord'],\r\n\t\t['/verify', 'Need to verify'],\r\n\t\t['/useful-resources', 'Useful Resources'],\r\n\t\t['/weights', 'Weights'],\r\n\t\t['/verify-faq', 'faq'],\r\n\t\t['/sources', 'Sources'],\r\n\t\t['/maps', 'Maps'],\r\n\t]",
              "fieldName": "linkItems"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-topnav",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TopNavElement",
          "declaration": {
            "name": "TopNavElement",
            "module": "src/elements/e-topnav.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-topnav",
          "declaration": {
            "name": "TopNavElement",
            "module": "src/elements/e-topnav.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-update-divcord-data.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UpdateDivcordDataElement",
          "members": [
            {
              "kind": "field",
              "name": "loaderState",
              "type": {
                "text": "State"
              }
            },
            {
              "kind": "field",
              "name": "task",
              "default": "new Task<never, void>(this, {\r\n\t\ttask: async () => {\r\n\t\t\tconst records = await divcordLoader.update();\r\n\t\t\tconst event = new CustomEvent('records-updated', { detail: records, bubbles: true, composed: true });\r\n\t\t\tthis.dispatchEvent(event);\r\n\t\t},\r\n\t})"
            },
            {
              "kind": "method",
              "name": "loadBtn",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-update-divcord-data",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UpdateDivcordDataElement",
          "declaration": {
            "name": "UpdateDivcordDataElement",
            "module": "src/elements/e-update-divcord-data.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-update-divcord-data",
          "declaration": {
            "name": "UpdateDivcordDataElement",
            "module": "src/elements/e-update-divcord-data.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-verify-faq-alert.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VerifyFaqAlertElement",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-verify-faq-alert",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VerifyFaqAlertElement",
          "declaration": {
            "name": "VerifyFaqAlertElement",
            "module": "src/elements/e-verify-faq-alert.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-verify-faq-alert",
          "declaration": {
            "name": "VerifyFaqAlertElement",
            "module": "src/elements/e-verify-faq-alert.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/gen/avatars.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DISCORD_AVATARS",
          "type": {
            "text": "object"
          },
          "default": "{\n\tnerdyjoe: {username: 'nerdyjoe', color: 'rgb(52, 152, 219)', url: 'https://cdn.discordapp.com/avatars/212041922150137857/ed0f38962063b40da72b39db7662c3bf.webp'},\n\tJasmine: {username: 'Jasmine', color: 'rgb(52, 152, 219)', url: 'https://cdn.discordapp.com/avatars/89395995351220224/7407cb784d48cee6661e7dcb539fdcbd.webp'},\n\tdeathbeam: {username: 'deathbeam', color: 'rgb(46, 204, 113)', url: 'https://cdn.discordapp.com/avatars/317319692823953409/eb977a8aabab572e3ff718e85ed0a211.webp'},\n\tkroIya: {username: 'kroIya', color: 'rgb(46, 204, 113)', url: 'https://cdn.discordapp.com/avatars/182893458858442762/02ca35e040e0e62a9ed643c97085f29e.webp'},\n\ttikiheme: {username: 'tikiheme', color: 'rgb(52, 152, 219)', url: 'https://cdn.discordapp.com/avatars/636016169148481547/7332fcbe7461626a0e8b64ae00256670.webp'},\n\tZimzams: {username: 'Zimzams', color: 'rgb(46, 204, 113)', url: 'https://cdn.discordapp.com/avatars/157685236337999872/76d202e46ed7b6c5ec75f7dccc469964.webp'},\n\tElinvynia: {username: 'Elinvynia', color: 'rgb(46, 204, 113)', url: 'https://cdn.discordapp.com/avatars/701549610795008080/9aca62cdf923b4af36883343f123e5ba.webp'},\n\tSHONYA3: {username: 'SHONYA3', color: 'rgb(46, 204, 113)', url: 'https://cdn.discordapp.com/avatars/483567926134439946/332598c6011c1351486a54dbfac4f234.webp'},\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DISCORD_AVATARS",
          "declaration": {
            "name": "DISCORD_AVATARS",
            "module": "src/gen/avatars.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/gen/cardElementData.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "cardElementDataFromJson",
          "type": {
            "text": "CardElementData[]"
          },
          "default": "json"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cardElementDataFromJson",
          "declaration": {
            "name": "cardElementDataFromJson",
            "module": "src/gen/cardElementData.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/gen/divcord.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "divcordRecordsFromJson",
          "default": "json"
        },
        {
          "kind": "variable",
          "name": "GREYNOTE_VARIANTS",
          "type": {
            "text": "[\r\n\t'Empty',\r\n\t'Monster-specific',\r\n\t'Area-specific',\r\n\t'disabled',\r\n\t'story',\r\n\t'Delirium_reward',\r\n\t'Chest_object',\r\n\t'strongbox',\r\n\t'Global Drop',\r\n\t'Vendor',\r\n]"
          },
          "default": "[\r\n\t'Empty',\r\n\t'Monster-specific',\r\n\t'Area-specific',\r\n\t'disabled',\r\n\t'story',\r\n\t'Delirium_reward',\r\n\t'Chest_object',\r\n\t'strongbox',\r\n\t'Global Drop',\r\n\t'Vendor',\r\n]"
        },
        {
          "kind": "variable",
          "name": "REMAINING_WORK_VARIANTS",
          "type": {
            "text": "[\r\n\t'n/a',\r\n\t'confirm',\r\n\t'unclear hypothesis',\r\n\t'no hypothesis',\r\n\t'story only',\r\n\t'legacy tag',\r\n\t'open ended',\r\n]"
          },
          "default": "[\r\n\t'n/a',\r\n\t'confirm',\r\n\t'unclear hypothesis',\r\n\t'no hypothesis',\r\n\t'story only',\r\n\t'legacy tag',\r\n\t'open ended',\r\n]"
        },
        {
          "kind": "variable",
          "name": "CONFIDENCE_VARIANTS",
          "type": {
            "text": "['none', 'low', 'ok', 'done']"
          },
          "default": "['none', 'low', 'ok', 'done']"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "divcordRecordsFromJson",
          "declaration": {
            "name": "divcordRecordsFromJson",
            "module": "src/gen/divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "GREYNOTE_VARIANTS",
          "declaration": {
            "name": "GREYNOTE_VARIANTS",
            "module": "src/gen/divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "REMAINING_WORK_VARIANTS",
          "declaration": {
            "name": "REMAINING_WORK_VARIANTS",
            "module": "src/gen/divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "CONFIDENCE_VARIANTS",
          "declaration": {
            "name": "CONFIDENCE_VARIANTS",
            "module": "src/gen/divcord.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/gen/poeData.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "poeDataFromJson",
          "default": "json"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "poeDataFromJson",
          "declaration": {
            "name": "poeDataFromJson",
            "module": "src/gen/poeData.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/gen/Source.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SOURCE_TYPE_VARIANTS",
          "type": {
            "text": "[\n\t\"Act\",\n\t\"Map\",\n\t\"Act Boss\",\n\t\"Map Boss\",\n\t\"Maven's Invitation: The Feared\",\n\t\"Uul-Netol, Unburdened Flesh (in Breachstones)\",\n\t\"The Vaal Omnitect\",\n\t\"Metamorph\",\n\t\"Null Portal\",\n\t\"Vaal Flesh Merchant\",\n\t\"All Incursion Architects in Alva missions or Alva's Memory\",\n\t\"All Incursion Architects (The Temple of Atzoatl)\",\n\t\"All Abyss Monsters\",\n\t\"All (Scourge) beyond demons\",\n\t\"All Rogue Exiles\",\n\t\"Venarius\",\n\t\"Argus\",\n\t\"All Invasion Bosses\",\n\t\"All Vaal Side Area Bosses\",\n\t\"Breachlord Boss Domain\",\n\t\"Architect\",\n\t\"Shaper Guardian Boss\",\n\t\"Syndicate Member\",\n\t\"Elder Slayer\",\n\t\"Elder Guardian Boss\",\n\t\"Rogue Exile\",\n\t\"Female Rogue Exile\",\n\t\"Abyss Lich Boss\",\n\t\"Maps Only\",\n\t\"Harbinger Portal\",\n\t\"Endgame Boss\",\n\t\"Delve Boss\",\n\t\"Beast Boss\",\n\t\"Heist Boss\",\n\t\"Beyond Boss\",\n\t\"Expedition Logbook Boss\",\n\t\"Betrayal Catarina\",\n\t\"Oshabi Boss\",\n\t\"Eldritch Perfection Monster\",\n\t\"Shaper Mini-Boss\",\n\t\"Trial of Stinging Doubt\",\n\t\"The Temple of Atzoatl\",\n\t\"All Vaal side areas (need specific information)\",\n\t\"Vaal Side Areas\",\n\t\"Redeemer influenced maps\",\n\t\"Expedition Logbook\",\n\t\"Labyrinth Trial Areas\",\n\t\"Area-Specific\",\n\t\"Atziri Area\",\n\t\"Unique heist contract or boss\",\n\t\"Chest\",\n\t\"Strongbox\",\n\t\"Vendor\",\n\t\"Maelström of Chaos with Barrel Sextant\",\n\t\"Delirium\",\n\t\"Delirium Currency Rewards\",\n\t\"Disabled\",\n\t\"Global Drop\"\n]"
          },
          "default": "[\n\t\"Act\",\n\t\"Map\",\n\t\"Act Boss\",\n\t\"Map Boss\",\n\t\"Maven's Invitation: The Feared\",\n\t\"Uul-Netol, Unburdened Flesh (in Breachstones)\",\n\t\"The Vaal Omnitect\",\n\t\"Metamorph\",\n\t\"Null Portal\",\n\t\"Vaal Flesh Merchant\",\n\t\"All Incursion Architects in Alva missions or Alva's Memory\",\n\t\"All Incursion Architects (The Temple of Atzoatl)\",\n\t\"All Abyss Monsters\",\n\t\"All (Scourge) beyond demons\",\n\t\"All Rogue Exiles\",\n\t\"Venarius\",\n\t\"Argus\",\n\t\"All Invasion Bosses\",\n\t\"All Vaal Side Area Bosses\",\n\t\"Breachlord Boss Domain\",\n\t\"Architect\",\n\t\"Shaper Guardian Boss\",\n\t\"Syndicate Member\",\n\t\"Elder Slayer\",\n\t\"Elder Guardian Boss\",\n\t\"Rogue Exile\",\n\t\"Female Rogue Exile\",\n\t\"Abyss Lich Boss\",\n\t\"Maps Only\",\n\t\"Harbinger Portal\",\n\t\"Endgame Boss\",\n\t\"Delve Boss\",\n\t\"Beast Boss\",\n\t\"Heist Boss\",\n\t\"Beyond Boss\",\n\t\"Expedition Logbook Boss\",\n\t\"Betrayal Catarina\",\n\t\"Oshabi Boss\",\n\t\"Eldritch Perfection Monster\",\n\t\"Shaper Mini-Boss\",\n\t\"Trial of Stinging Doubt\",\n\t\"The Temple of Atzoatl\",\n\t\"All Vaal side areas (need specific information)\",\n\t\"Vaal Side Areas\",\n\t\"Redeemer influenced maps\",\n\t\"Expedition Logbook\",\n\t\"Labyrinth Trial Areas\",\n\t\"Area-Specific\",\n\t\"Atziri Area\",\n\t\"Unique heist contract or boss\",\n\t\"Chest\",\n\t\"Strongbox\",\n\t\"Vendor\",\n\t\"Maelström of Chaos with Barrel Sextant\",\n\t\"Delirium\",\n\t\"Delirium Currency Rewards\",\n\t\"Disabled\",\n\t\"Global Drop\"\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SOURCE_TYPE_VARIANTS",
          "declaration": {
            "name": "SOURCE_TYPE_VARIANTS",
            "module": "src/gen/Source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardPage",
          "members": [
            {
              "kind": "field",
              "name": "card",
              "type": {
                "text": "string"
              },
              "attribute": "card",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "weightData",
              "type": {
                "text": "WeightData"
              }
            }
          ],
          "attributes": [
            {
              "name": "card",
              "type": {
                "text": "string"
              },
              "fieldName": "card"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardPage",
          "declaration": {
            "name": "CardPage",
            "module": "src/pages/p-card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-card",
          "declaration": {
            "name": "CardPage",
            "module": "src/pages/p-card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-divcord.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivcordPage",
          "members": [
            {
              "kind": "field",
              "name": "#storage",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{\r\n\t\tcustomPresets: new Storage('customPresets', []),\r\n\t\tshouldApplyFilters: new Storage('shouldApplyFilters', true),\r\n\t\tlatestPresetApplied: new Storage('latestPresetApplied', ''),\r\n\t\tonlyShowCardsWithNoConfirmedSources: new Storage('onlyShowCardsWithNoConfirmedSources', false),\r\n\t\tonlyShowCardsWithSourcesToVerify: new Storage('onlyShowCardsWithSourcesToVerify', false),\r\n\t\tshowCards: new Storage('weightsPageShowCards', true),\r\n\t\tactiveView: new Storage('activeView', 'table'),\r\n\t}"
            },
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shouldApplySelectFilters",
              "attribute": "shouldApplySelectFilters"
            },
            {
              "kind": "field",
              "name": "onlyShowCardsWithNoConfirmedSources",
              "type": {
                "text": "boolean"
              },
              "attribute": "onlyShowCardsWithNoConfirmedSources"
            },
            {
              "kind": "field",
              "name": "onlyShowCardsWithSourcesToVerify",
              "type": {
                "text": "boolean"
              },
              "attribute": "onlyShowCardsWithSourcesToVerify"
            },
            {
              "kind": "field",
              "name": "showCards",
              "type": {
                "text": "boolean"
              },
              "attribute": "showCards"
            },
            {
              "kind": "field",
              "name": "activeView",
              "type": {
                "text": "ActiveView"
              },
              "attribute": "active-view",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "recordsForTableView",
              "type": {
                "text": "DivcordRecordAndWeight[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "filtered",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "paginated",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "paginatedCardsRenderer",
              "type": {
                "text": "ArrayAsyncRenderer<string>"
              }
            },
            {
              "kind": "field",
              "name": "config",
              "type": {
                "text": "Omit<PresetConfig, 'name'>"
              },
              "default": "DEFAULT_PRESETS[0]"
            },
            {
              "kind": "field",
              "name": "customPresets",
              "type": {
                "text": "PresetConfig[]"
              }
            },
            {
              "kind": "field",
              "name": "ageEl",
              "type": {
                "text": "DivcordRecordsAgeElement"
              }
            },
            {
              "kind": "method",
              "name": "#onRecordsUpdated"
            },
            {
              "kind": "method",
              "name": "#onConfigUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onPresetApplied",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent<PresetConfig>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onCustomPresetsUpdated",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent<PresetConfig[]>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onShowCardsChanged",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findPreset",
              "return": {
                "type": {
                  "text": "PresetConfig | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onCardnameInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onshouldApplySelectFiltersCheckbox",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#applyPreset",
              "parameters": [
                {
                  "name": "preset",
                  "type": {
                    "text": "PresetConfig"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#ononlyShowCardsWithNoConfirmedSourcesCheckbox",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onOnlyShowCardsWithSourcesToVerifyCheckbox",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onActiveViewChanged",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            },
            {
              "name": "shouldApplySelectFilters",
              "fieldName": "shouldApplySelectFilters"
            },
            {
              "name": "onlyShowCardsWithNoConfirmedSources",
              "type": {
                "text": "boolean"
              },
              "fieldName": "onlyShowCardsWithNoConfirmedSources"
            },
            {
              "name": "onlyShowCardsWithSourcesToVerify",
              "type": {
                "text": "boolean"
              },
              "fieldName": "onlyShowCardsWithSourcesToVerify"
            },
            {
              "name": "showCards",
              "type": {
                "text": "boolean"
              },
              "fieldName": "showCards"
            },
            {
              "name": "active-view",
              "type": {
                "text": "ActiveView"
              },
              "fieldName": "activeView"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-divcord",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordPage",
          "declaration": {
            "name": "DivcordPage",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-divcord",
          "declaration": {
            "name": "DivcordPage",
            "module": "src/pages/p-divcord.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-home.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HomePage",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cardSize",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "cardSize",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "sourceSize",
              "type": {
                "text": "SourceSize"
              },
              "default": "'small'",
              "attribute": "source-size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "searchCriterias",
              "type": {
                "text": "SearchCardsCriteria[]"
              },
              "attribute": "searchCriterias"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "filtered",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "paginated",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "#onCardnameInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onCriteriasSelect",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "cardSize",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "cardSize"
            },
            {
              "name": "source-size",
              "type": {
                "text": "SourceSize"
              },
              "default": "'small'",
              "fieldName": "sourceSize"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            },
            {
              "name": "searchCriterias",
              "type": {
                "text": "SearchCardsCriteria[]"
              },
              "fieldName": "searchCriterias"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-home",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HomePage",
          "declaration": {
            "name": "HomePage",
            "module": "src/pages/p-home.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-home",
          "declaration": {
            "name": "HomePage",
            "module": "src/pages/p-home.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-maps.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MapsPage",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "sourcesAndCards",
              "type": {
                "text": "SourceAndCards[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "filtered",
              "type": {
                "text": "SourceAndCards[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "paginated",
              "type": {
                "text": "SourceAndCards[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "#onMapnameInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "maps",
              "return": {
                "type": {
                  "text": "string[]"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-maps",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MapsPage",
          "declaration": {
            "name": "MapsPage",
            "module": "src/pages/p-maps.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-maps",
          "declaration": {
            "name": "MapsPage",
            "module": "src/pages/p-maps.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-source-type.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourceTypePage",
          "members": [
            {
              "kind": "field",
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "attribute": "sourceType",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "sourcesAndCardsRenderer",
              "type": {
                "text": "ArrayAsyncRenderer<SourceAndCards>"
              }
            }
          ],
          "attributes": [
            {
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "fieldName": "sourceType"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-source-type",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourceTypePage",
          "declaration": {
            "name": "SourceTypePage",
            "module": "src/pages/p-source-type.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-source-type",
          "declaration": {
            "name": "SourceTypePage",
            "module": "src/pages/p-source-type.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourcePage",
          "members": [
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "Source"
              },
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "cards",
              "type": {
                "text": "CardBySource[]"
              }
            }
          ],
          "attributes": [
            {
              "name": "source",
              "type": {
                "text": "Source"
              },
              "fieldName": "source"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-source",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourcePage",
          "declaration": {
            "name": "SourcePage",
            "module": "src/pages/p-source.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-source",
          "declaration": {
            "name": "SourcePage",
            "module": "src/pages/p-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-sources.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourcesPage",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'large'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "showSourceType"
            },
            {
              "kind": "field",
              "name": "firstColumnName",
              "type": {
                "text": "string"
              },
              "default": "'Source'",
              "attribute": "firstColumnName"
            },
            {
              "kind": "field",
              "name": "allSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "attribute": "allSourceTypes"
            },
            {
              "kind": "field",
              "name": "selectedSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "default": "[]",
              "attribute": "selectedSourceTypes"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "sourcesAndCards",
              "type": {
                "text": "SourceAndCards[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "sourcetypesCountsMap",
              "type": {
                "text": "Map<SourceType, number>"
              }
            },
            {
              "kind": "field",
              "name": "records",
              "type": {
                "text": "DivcordRecord[]"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#onSlSelectChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'large'",
              "fieldName": "size"
            },
            {
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showSourceType"
            },
            {
              "name": "firstColumnName",
              "type": {
                "text": "string"
              },
              "default": "'Source'",
              "fieldName": "firstColumnName"
            },
            {
              "name": "allSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "fieldName": "allSourceTypes"
            },
            {
              "name": "selectedSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "default": "[]",
              "fieldName": "selectedSourceTypes"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-sources",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourcesPage",
          "declaration": {
            "name": "SourcesPage",
            "module": "src/pages/p-sources.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-sources",
          "declaration": {
            "name": "SourcesPage",
            "module": "src/pages/p-sources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-useful-resources.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UsefulResourcesPage",
          "members": [
            {
              "kind": "method",
              "name": "CustomIcon",
              "parameters": [
                {
                  "name": "icon",
                  "type": {
                    "text": "CustomIcon"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-useful-resources",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UsefulResourcesPage",
          "declaration": {
            "name": "UsefulResourcesPage",
            "module": "src/pages/p-useful-resources.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-useful-resources",
          "declaration": {
            "name": "UsefulResourcesPage",
            "module": "src/pages/p-useful-resources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-verify-faq.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VerifyFaqPage",
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-verify-faq",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VerifyFaqPage",
          "declaration": {
            "name": "VerifyFaqPage",
            "module": "src/pages/p-verify-faq.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-verify-faq",
          "declaration": {
            "name": "VerifyFaqPage",
            "module": "src/pages/p-verify-faq.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-verify.styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "styles",
          "default": "css`\r\n\t@layer reset {\r\n\t\t* {\r\n\t\t\tpadding: 0;\r\n\t\t\tmargin: 0;\r\n\t\t}\r\n\r\n\t\tul {\r\n\t\t\tlist-style: none;\r\n\t\t}\r\n\t}\r\n\r\n\t:host {\r\n\t\t--need-to-verify-border: none;\r\n\t}\r\n\r\n\t${linkStyles}\r\n\r\n\te-source-with-cards {\r\n\t\t--cards-margin-top: 0rem;\r\n\t}\r\n\r\n\t.heading {\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\te-verify-faq-alert {\r\n\t\tmargin-top: 3rem;\r\n\t\tmargin-inline: auto;\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n\t.main {\r\n\t\tmax-width: 1400px;\r\n\t}\r\n\r\n\t.source-with-cards-list {\r\n\t\tmargin-top: 2rem;\r\n\t\tmargin-left: 1rem;\r\n\r\n\t\tlist-style: none;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tcolumn-gap: 5rem;\r\n\t\trow-gap: 3rem;\r\n\t\tflex-wrap: wrap;\r\n\t}\r\n\r\n\t.category-heading:first-of-type {\r\n\t\tmargin-top: 4rem;\r\n\t}\r\n\r\n\t.category-heading {\r\n\t\tdisplay: block;\r\n\t\tfont-size: 1.5rem;\r\n\t\tmargin-inline: auto;\r\n\t\twidth: fit-content;\r\n\t}\r\n\r\n\t/** Table of contents */\r\n\r\n\t.table-of-contents {\r\n\t\tmargin-inline: auto;\r\n\t\tmax-width: 600px;\r\n\t\tright: 100px;\r\n\t\ttop: 100px;\r\n\t\tz-index: 200000;\r\n\t\tmargin-top: 2rem;\r\n\t\t@media (width >=1950px) {\r\n\t\t\tposition: fixed;\r\n\t\t\tmax-width: 400px;\r\n\t\t}\r\n\t}\r\n\r\n\t.table-of-contents__summary {\r\n\t\tpadding: 1rem;\r\n\t}\r\n\r\n\t.table-of-contents__inner {\r\n\t\theight: calc(80vh - 100px);\r\n\t\tmax-height: calc(80vh - 100px);\r\n\t\tpadding: 2rem;\r\n\t\toverflow-y: scroll;\r\n\t}\r\n\r\n\t.brief-table-of-contents {\r\n\t\tmargin-left: 2rem;\r\n\t\tdisplay: grid;\r\n\t\tgap: 0.1rem;\r\n\t}\r\n\r\n\tdetails:not([open]) {\r\n\t\toverflow-y: initial;\r\n\t}\r\n\r\n\ta.active {\r\n\t\tcolor: var(--link-color-hover, blue);\r\n\t}\r\n\r\n\t.category-heading-link {\r\n\t\tdisplay: block;\r\n\t\tmargin-block: 2rem;\r\n\t\tfont-size: 1.5rem;\r\n\t\tmargin-inline: auto;\r\n\t\twidth: fit-content;\r\n\t}\r\n\r\n\t/** details for weights table */\r\n\t.details-weights-table,\r\n\t.li-link-to-weights-table {\r\n\t\tdisplay: none;\r\n\t\t@media (width >= 640px) {\r\n\t\t\tdisplay: initial;\r\n\t\t}\r\n\t}\r\n\r\n\t.details-weights-table {\r\n\t\tpadding: 1rem;\r\n\t}\r\n\r\n\t.details-weights-table__summary {\r\n\t\tfont-size: 1.2rem;\r\n\t\tfont-weight: 700;\r\n\t\tmargin-bottom: 1rem;\r\n\t}\r\n\r\n\t.li-link-to-weights-table a {\r\n\t\tcolor: orangered;\r\n\t}\r\n\r\n\t/** media */\r\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styles",
          "declaration": {
            "name": "styles",
            "module": "src/pages/p-verify.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-verify.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "VerifyPage",
          "members": [
            {
              "kind": "field",
              "name": "#cardSize",
              "privacy": "private",
              "type": {
                "text": "CardSize"
              },
              "default": "'small'"
            },
            {
              "kind": "field",
              "name": "#sourceSize",
              "privacy": "private",
              "type": {
                "text": "SourceSize"
              },
              "default": "'medium'"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "sourcesAndCards",
              "type": {
                "text": "SourceAndCards[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "detailsOfContentsOpen",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "byCategory",
              "type": {
                "text": "{\r\n\t\tmaps: SourceAndCards[];\r\n\t\tacts: SourceAndCards[];\r\n\t\tother: SourceAndCards[];\r\n\t}"
              }
            },
            {
              "kind": "field",
              "name": "verifyTableData",
              "type": {
                "text": "RowData[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "cardWeightsGrouped",
              "type": {
                "text": "Record<string, { card: string; weight: number; source: Source }[]>"
              }
            },
            {
              "kind": "field",
              "name": "detailsOfContents",
              "type": {
                "text": "HTMLDetailsElement"
              }
            },
            {
              "kind": "field",
              "name": "contentsLinksList",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "sourceWithCardsList",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-verify",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VerifyPage",
          "declaration": {
            "name": "VerifyPage",
            "module": "src/pages/p-verify.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-verify",
          "declaration": {
            "name": "VerifyPage",
            "module": "src/pages/p-verify.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-weights.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WeightsPage",
          "members": [
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "DivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "#showCardsStorage",
              "privacy": "private",
              "default": "new Storage('weightsPageShowCards', false)"
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "Array<WeightData>"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "#onShowCardsChanged",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-weights",
          "customElement": true
        },
        {
          "kind": "function",
          "name": "articleCss"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WeightsPage",
          "declaration": {
            "name": "WeightsPage",
            "module": "src/pages/p-weights.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-weights",
          "declaration": {
            "name": "WeightsPage",
            "module": "src/pages/p-weights.ts"
          }
        },
        {
          "kind": "js",
          "name": "articleCss",
          "declaration": {
            "name": "articleCss",
            "module": "src/pages/p-weights.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/divcord-spreadsheet/divcord-spreadsheet.styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "styles",
          "default": "css`\r\n\t#root {\r\n\t\t--w-col-id: 100px;\r\n\t\t--w-col-card: 200px;\r\n\t\t--w-col-weight: 100px;\r\n\t\t--w-col-tag: 200px;\r\n\t\t--w-col-confidence: 110px;\r\n\t\t--w-col-remaining-work: 100px;\r\n\t\t--w-col-sources: 400px;\r\n\t\t--w-col-verify: 320px;\r\n\t\t--w-col-notes: 300px;\r\n\t\t--w-table: calc(\r\n\t\t\tvar(--w-col-id) + var(--w-col-card) + var(--w-col-weight) + var(--w-col-tag) + var(--w-col-confidence) +\r\n\t\t\t\tvar(--w-col-remaining-work) + var(--w-col-sources) + var(--w-col-verify) + var(--w-col-notes)\r\n\t\t);\r\n\r\n\t\theight: calc(100vh - 70px);\r\n\t\toverflow-y: scroll;\r\n\t\twidth: fit-content;\r\n\t\tbox-shadow: var(--sl-shadow-large);\r\n\r\n\t\tcolor: #fff;\r\n\t\t--source-color: hsl(240 7.3% 84%);\r\n\t}\r\n\r\n\t#root {\r\n\t\theight: calc(100vh - 150px);\r\n\t}\r\n\r\n\t.th {\r\n\t\tfont-size: 14px;\r\n\t}\r\n\r\n\t.th,\r\n\t.td {\r\n\t\tpadding: 0.4rem;\r\n\t\tborder: 1px solid rgba(160, 160, 160, 0.4);\r\n\t\ttext-align: center;\r\n\t\tborder-collapse: collapse;\r\n\t}\r\n\r\n\t.table {\r\n\t\tborder-collapse: collapse;\r\n\t\tborder: 1px solid rgba(140, 140, 140, 0.4);\r\n\t\ttable-layout: fixed;\r\n\t\twidth: fit-content;\r\n\t\tfont-size: 14px;\r\n\t\tposition: relative;\r\n\t\theight: 100%;\r\n\t\tbackground-color: #121212;\r\n\t}\r\n\r\n\t.tbody {\r\n\t\twidth: var(--w-table);\r\n\t\tdisplay: table-row-group;\r\n\t\ttransform: translateX(-1px);\r\n\t\tborder-collapse: collapse;\r\n\t}\r\n\r\n\t.thead__headings {\r\n\t\tposition: sticky;\r\n\t\ttop: -1px;\r\n\t\tbackground-color: black;\r\n\t\tz-index: 9999;\r\n\t}\r\n\r\n\t.col-id.td {\r\n\t\tborder-left: none;\r\n\t}\r\n\r\n\t.col-verify.td {\r\n\t\tborder-right: none;\r\n\t}\r\n\r\n\t.col-id,\r\n\t.col-card,\r\n\t.col-weight,\r\n\t.col-tag,\r\n\t.col-confidence,\r\n\t.col-remaining-work,\r\n\t.col-notes {\r\n\t\tbackground-color: #071924;\r\n\t}\r\n\t.col-sources {\r\n\t\tbackground-color: #001b02;\r\n\t}\r\n\t.col-verify {\r\n\t\tbackground-color: #000;\r\n\t}\r\n\r\n\t.col-id {\r\n\t\twidth: 100px;\r\n\t}\r\n\t.col-card {\r\n\t\twidth: 200px;\r\n\t}\r\n\t.col-weight {\r\n\t\twidth: 100px;\r\n\t}\r\n\t.col-tag {\r\n\t\tword-break: break-word;\r\n\t\twidth: 200px;\r\n\t}\r\n\t.col-confidence {\r\n\t\twidth: 100px;\r\n\t}\r\n\t.col-remaining-work {\r\n\t\twidth: 100px;\r\n\t}\r\n\t.col-sources {\r\n\t\twidth: 400px;\r\n\t}\r\n\t.col-verify {\r\n\t\twidth: 320px;\r\n\t}\r\n\t.col-notes {\r\n\t\twidth: 300px;\r\n\t}\r\n\t.col-notes.td {\r\n\t\ttext-align: left;\r\n\t\tword-break: break-word;\r\n\t\tcolor: #bcbcbc;\r\n\t}\r\n\r\n\t.confidence {\r\n\t\tposition: relative;\r\n\t\ttext-transform: uppercase;\r\n\t\tfont-size: 13px;\r\n\t}\r\n\r\n\t.confidence--done {\r\n\t\tbackground-color: green;\r\n\t}\r\n\t.confidence--ok {\r\n\t\tbackground-color: #93c47d;\r\n\t\tcolor: black;\r\n\t}\r\n\t.confidence--none {\r\n\t\tbackground-color: red;\r\n\t}\r\n\t.confidence--low {\r\n\t\tbackground-color: #f1c232;\r\n\t\tcolor: black;\r\n\t}\r\n\r\n\t.header-with-icon {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tgap: 0.4rem;\r\n\t}\r\n\r\n\t.td-notes {\r\n\t\ttext-align: left;\r\n\t}\r\n\r\n\t.td-weight {\r\n\t\tfont-weight: 600;\r\n\t\tfont-size: 20px;\r\n\t}\r\n\r\n\t.ordered-by {\r\n\t\tcolor: yellow;\r\n\t}\r\n\r\n\t.td-weight__label {\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.td-weight__label--show-pre-rework-weight::after {\r\n\t\tcontent: '3.23';\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\tright: 0;\r\n\t\ttransform: translate(-100%, -100%);\r\n\t\tcolor: pink;\r\n\t\tfont-size: 11px;\r\n\t}\r\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styles",
          "declaration": {
            "name": "styles",
            "module": "src/elements/divcord-spreadsheet/divcord-spreadsheet.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/divcord-spreadsheet/e-divcord-spreadsheet.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivcordSpreadsheetElement",
          "members": [
            {
              "kind": "field",
              "name": "showCards",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "show-cards",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "records",
              "type": {
                "text": "DivcordRecordAndWeight[]"
              },
              "default": "[]",
              "attribute": "records"
            },
            {
              "kind": "field",
              "name": "weightOrder",
              "type": {
                "text": "Order"
              },
              "default": "'desc'",
              "attribute": "weight-order",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cardOrder",
              "type": {
                "text": "Order"
              },
              "default": "'asc'",
              "attribute": "card-order",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "idOrder",
              "type": {
                "text": "Order"
              },
              "default": "'asc'",
              "attribute": "id-order",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "verifyOrder",
              "type": {
                "text": "Order"
              },
              "default": "'desc'",
              "attribute": "verify-order",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orderedBy",
              "type": {
                "text": "SortColumn"
              },
              "default": "'id'",
              "attribute": "ordered-by",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "recordsState",
              "type": {
                "text": "DivcordRecordAndWeight[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "weightIcon",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'sort-down'"
            },
            {
              "kind": "field",
              "name": "nameIcon",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'sort-alpha-down-alt'"
            },
            {
              "kind": "field",
              "name": "idIcon",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'sort-alpha-down-alt'"
            },
            {
              "kind": "field",
              "name": "verifyIcon",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'sort-down'"
            },
            {
              "kind": "method",
              "name": "#onShowCardsToggled",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#toggleSetOrder",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "SortColumn"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onAnchorCardNavigation",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "show-cards-changed",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "show-cards",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showCards"
            },
            {
              "name": "records",
              "type": {
                "text": "DivcordRecordAndWeight[]"
              },
              "default": "[]",
              "fieldName": "records"
            },
            {
              "name": "weight-order",
              "type": {
                "text": "Order"
              },
              "default": "'desc'",
              "fieldName": "weightOrder"
            },
            {
              "name": "card-order",
              "type": {
                "text": "Order"
              },
              "default": "'asc'",
              "fieldName": "cardOrder"
            },
            {
              "name": "id-order",
              "type": {
                "text": "Order"
              },
              "default": "'asc'",
              "fieldName": "idOrder"
            },
            {
              "name": "verify-order",
              "type": {
                "text": "Order"
              },
              "default": "'desc'",
              "fieldName": "verifyOrder"
            },
            {
              "name": "ordered-by",
              "type": {
                "text": "SortColumn"
              },
              "default": "'id'",
              "fieldName": "orderedBy"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-divcord-spreadsheet",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordSpreadsheetElement",
          "declaration": {
            "name": "DivcordSpreadsheetElement",
            "module": "src/elements/divcord-spreadsheet/e-divcord-spreadsheet.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-divcord-spreadsheet",
          "declaration": {
            "name": "DivcordSpreadsheetElement",
            "module": "src/elements/divcord-spreadsheet/e-divcord-spreadsheet.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/divcord-spreadsheet/Sort.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "SORT_COLUMNS",
          "type": {
            "text": "['card', 'weight', 'id', 'verify']"
          },
          "default": "['card', 'weight', 'id', 'verify']"
        },
        {
          "kind": "class",
          "description": "",
          "name": "Sort",
          "members": [
            {
              "kind": "method",
              "name": "byCard",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "records",
                  "type": {
                    "text": "DivcordRecordAndWeight[]"
                  }
                },
                {
                  "name": "order",
                  "type": {
                    "text": "Order"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "byWeight",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "records",
                  "type": {
                    "text": "DivcordRecordAndWeight[]"
                  }
                },
                {
                  "name": "order",
                  "type": {
                    "text": "Order"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "byId",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "records",
                  "type": {
                    "text": "DivcordRecordAndWeight[]"
                  }
                },
                {
                  "name": "order",
                  "type": {
                    "text": "Order"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "byVerify",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "records",
                  "type": {
                    "text": "DivcordRecordAndWeight[]"
                  }
                },
                {
                  "name": "order",
                  "type": {
                    "text": "Order"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "by",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "SortColumn"
                  }
                },
                {
                  "name": "records",
                  "type": {
                    "text": "DivcordRecordAndWeight[]"
                  }
                },
                {
                  "name": "order",
                  "type": {
                    "text": "Order"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SORT_COLUMNS",
          "declaration": {
            "name": "SORT_COLUMNS",
            "module": "src/elements/divcord-spreadsheet/Sort.ts"
          }
        },
        {
          "kind": "js",
          "name": "Sort",
          "declaration": {
            "name": "Sort",
            "module": "src/elements/divcord-spreadsheet/Sort.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/divination-card/data.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "cardsDataMap",
          "default": "new Map<string, CardElementData>()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cardsDataMap",
          "declaration": {
            "name": "cardsDataMap",
            "module": "src/elements/divination-card/data.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/divination-card/divination-card.styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "styles",
          "default": "css`\r\n\t:host {\r\n\t\tdisplay: block;\r\n\r\n\t\t--source-color: hsl(240 7.3% 84%);\r\n\r\n\t\t--card-width-small: 168px;\r\n\t\t--card-width-medium: 268px;\r\n\t\t--card-width-large: 326px;\r\n\t\t--card-font-size: 1rem;\r\n\t\t--card-aspect-ratio: 0.668329;\r\n\r\n\t\t--font-small: 0.8rem;\r\n\r\n\t\t--flavour-text-color: rgba(167, 90, 27, 1);\r\n\t\t--item-normal: 0, 0%, 78%;\r\n\t\t--item-rare: 60, 100%, 73%;\r\n\t\t--item-magic: 240, 100%, 77%;\r\n\t\t--item-unique-contrast: 25, 63%, 48%;\r\n\t\t--item-unique: 26, 65%, 42%;\r\n\t\t--item-gem: 177, 72%, 37%;\r\n\t\t--item-relic: 0, 0%, 78%;\r\n\t\t--item-currency: 42, 19%, 59%;\r\n\t\t--item-prophecy: 275, 100%, 65%;\r\n\t\t--item-divination: 0, 0%, 50%;\r\n\t\t--item-keystone: 46, 52%, 74%;\r\n\t\t--item-explicit: 240, 100%, 77%;\r\n\t\t--item-implicit: var(--item-explicit);\r\n\t\t--item-crafted: 240, 100%, 85%;\r\n\t\t--item-enchanted: var(--item-crafted);\r\n\t\t--item-fractured: 44, 26%, 51%;\r\n\t\t--item-corrupted: 0, 100%, 41%;\r\n\t\t--item-scourge: 20, 100%, 57%;\r\n\t\t--item-physical: 0, 0%, 58%;\r\n\t\t--item-fire: 0, 100%, 29%;\r\n\t\t--item-cold: 210, 46%, 39%;\r\n\t\t--item-lightning: 51, 100%, 50%;\r\n\t\t--item-chaos: 322, 73%, 47%;\r\n\t\t--item-augmented: rgb(138, 138, 255);\r\n\t\t--coolgrey-1000: 206, 24%, 7%;\r\n\r\n\t\twidth: fit-content;\r\n\t\t--padding-inline: 0;\r\n\t\t--padding-block: 0;\r\n\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n\t* {\r\n\t\tmargin: 0;\r\n\t\tpadding: 0;\r\n\t}\r\n\r\n\timg {\r\n\t\tcolor: white;\r\n\t\tline-height: 100px;\r\n\t\ttext-transform: none !important;\r\n\t\tfont-size: 10px;\r\n\t}\r\n\r\n\t.element {\r\n\t\tpadding-inline: var(--padding-inline);\r\n\t\tpadding-block: var(--padding-block);\r\n\t}\r\n\r\n\t.min-level {\r\n\t\tposition: absolute;\r\n\t\tz-index: 4;\r\n\t\tbottom: 0;\r\n\t\tright: 0.75rem;\r\n\t\tfont-size: var(--digits-font-size);\r\n\t\tcolor: #eee;\r\n\t}\r\n\r\n\t.boss {\r\n\t\tposition: absolute;\r\n\t\tz-index: 4;\r\n\t\tbottom: 0;\r\n\t\tleft: 0rem;\r\n\t\tfont-size: var(--digits-font-size);\r\n\t}\r\n\r\n\t.divination-card {\r\n\t\tfont-family: 'fontin', Verdana, Arial;\r\n\t\tborder-radius: 0.3rem;\r\n\r\n\t\twidth: var(--card-width, var(--card-width-medium));\r\n\t\taspect-ratio: var(--card-aspect-ratio);\r\n\r\n\t\ttext-align: center;\r\n\t\toverflow: hidden;\r\n\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\r\n\t\tposition: relative;\r\n\t}\r\n\r\n\t.divination-card--50 {\r\n\t\t--card-width: 50px;\r\n\t\t--reward-font-size: 3.2px;\r\n\t\t--digits-font-size: 3.2px;\r\n\t\t--flavour-font-size: 3.2px;\r\n\t\t--flavour-line-height: 3.2px;\r\n\t\t--name-font-size: 5px;\r\n\t\t--name-line-height: 5px;\r\n\t\t--stack-size-font-size: 8px;\r\n\t\t--stack-size-top: 34%;\r\n\t\t--bottom-half-margin-top: 0;\r\n\t}\r\n\r\n\t.divination-card--75 {\r\n\t\t--card-width: 75px;\r\n\t\t--name-font-size: 7px;\r\n\t\t--name-line-height: 6.5px;\r\n\t\t--reward-font-size: 7px;\r\n\t\t--flavour-font-size: 5px;\r\n\t\t--flavour-line-height: 4.5px;\r\n\t\t--stack-size-font-size: 10px;\r\n\t\t--stack-size-top: 38%;\r\n\t\t--bottom-half-margin-top: 0;\r\n\t\t--digits-font-size: 3.2px;\r\n\t}\r\n\r\n\t.divination-card--small {\r\n\t\t--card-width: var(--card-width-small);\r\n\t\t--name-font-size: 12px;\r\n\t\t--name-line-height: 15px;\r\n\t\t--reward-font-size: 0.8rem;\r\n\t\t--digits-font-size: 0.6rem;\r\n\t\t--flavour-font-size: 0.7rem;\r\n\t\t--flavour-line-height: 0.7rem;\r\n\t}\r\n\r\n\t.divination-card--medium {\r\n\t\t--reward-font-size: 1rem;\r\n\t\t--card-width: var(--card-width-medium);\r\n\t\t--name-font-size: 18px;\r\n\t\t--digits-font-size: ;\r\n\t}\r\n\r\n\t.divination-card--large {\r\n\t\t--reward-font-size: 1.2rem;\r\n\t\t--reward-line-height: 1.15rem;\r\n\t\t--reward-letter-spacing: -0.4px;\r\n\t\t--card-width: var(--card-width-large);\r\n\t\t--name-font-size: 24px;\r\n\t\t--name-line-height: 17px;\r\n\t}\r\n\r\n\t.skeleton {\r\n\t\tbackground: rgba(0, 0, 0, 0) url(/images/cards/avif/divination-card.avif) no-repeat center;\r\n\t\tbackground-size: 105%;\r\n\t\tz-index: 3;\r\n\t\tposition: absolute;\r\n\r\n\t\twidth: var(--card-width, var(--card-width-medium));\r\n\t\taspect-ratio: var(--card-aspect-ratio);\r\n\t}\r\n\r\n\ta {\r\n\t\tcolor: #000;\r\n\t\ttext-decoration: none;\r\n\t}\r\n\ta:hover {\r\n\t\tcolor: #083344;\r\n\t\ttext-decoration: underline;\r\n\t}\r\n\r\n\t.name {\r\n\t\tline-height: var(--name-line-height, 1.5rem);\r\n\t\tfont-size: var(--name-font-size, 1rem);\r\n\t\tletter-spacing: -0.6px;\r\n\t\tz-index: 4;\r\n\t}\r\n\t.name--large {\r\n\t\tmargin-top: 0.4rem;\r\n\t}\r\n\r\n\t.stackSize {\r\n\t\tdisplay: flex;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\r\n\t\tposition: absolute;\r\n\t\tcolor: #c8c8c8;\r\n\t\tleft: 8%;\r\n\t\ttop: var(--stack-size-top, 46.8%);\r\n\t\tz-index: 4;\r\n\t\twidth: 16%;\r\n\t\tfont-size: var(--stack-size-font-size, 1rem);\r\n\t\theight: 26px;\r\n\t}\r\n\t.stackSize--small {\r\n\t\ttop: 44.2%;\r\n\t\tfont-size: 0.6rem;\r\n\t}\r\n\t.stackSize--medium {\r\n\t\ttop: 46.3%;\r\n\t}\r\n\r\n\t.bottom-half {\r\n\t\tposition: absolute;\r\n\t\ttop: 52%;\r\n\t\theight: 44%;\r\n\t\twidth: 90%;\r\n\t\tz-index: 4;\r\n\t\tmargin: 0 6% 6%;\r\n\r\n\t\tmargin-top: var(--bottom-half-margin-top, 0.4rem);\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\tjustify-content: space-evenly;\r\n\r\n\t\tflex: 1;\r\n\t}\r\n\r\n\t.reward {\r\n\t\tcolor: #ccc;\r\n\t\tfont-size: var(--reward-font-size, 0.8rem);\r\n\t\tline-height: var(--reward-line-height);\r\n\t\tletter-spacing: var(--reward-letter-spacing);\r\n\t\tdisplay: flex;\r\n\t\tflex-direction: column;\r\n\t\talign-items: center;\r\n\t\tjustify-content: center;\r\n\t}\r\n\r\n\t.link {\r\n\t\tposition: absolute;\r\n\t\ttop: 30px;\r\n\t\tleft: 0;\r\n\t\twidth: 100%;\r\n\t\theight: calc(50% - 30px);\r\n\t\tz-index: 20;\r\n\t}\r\n\r\n\t.flavourText {\r\n\t\tfont-size: var(--flavour-font-size, 1rem);\r\n\t\tline-height: var(--flavour-line-height, 1.2rem);\r\n\t\tcolor: var(--flavour-text-color);\r\n\t\ttext-wrap: balance;\r\n\t\tfont-style: italic;\r\n\t}\r\n\r\n\t.divider {\r\n\t\theight: 1px;\r\n\t\twidth: 50%;\r\n\t\ttransform: translateX(50%);\r\n\r\n\t\tbackground-image: linear-gradient(to right, transparent, rgba(255, 255, 255, 0.5), transparent);\r\n\t}\r\n\r\n\t::slotted(e-source) {\r\n\t\t--source-font-size: 0.8rem;\r\n\t\tmargin-left: 0.8rem;\r\n\t}\r\n\r\n\t.default {\r\n\t\tcolor: #7f7f7f;\r\n\t}\r\n\t.fractured {\r\n\t\tcolor: hsla(var(--item-fractured));\r\n\t}\r\n\t.enchanted {\r\n\t\tcolor: hsla(var(--item-enchanted));\r\n\t}\r\n\t.normal,\r\n\t.normalItem {\r\n\t\tcolor: hsla(var(--item-normal));\r\n\t}\r\n\t.magic,\r\n\t.magicItem {\r\n\t\tcolor: hsla(var(--item-magic));\r\n\t}\r\n\t.rare,\r\n\t.rareItem {\r\n\t\tcolor: hsla(var(--item-rare));\r\n\t}\r\n\t.unique,\r\n\t.uniqueItem {\r\n\t\tcolor: hsla(var(--item-unique));\r\n\t}\r\n\t.gem,\r\n\t.gemItem {\r\n\t\tcolor: hsla(var(--item-gem));\r\n\t}\r\n\t.currency,\r\n\t.currencyItem {\r\n\t\tcolor: hsla(var(--item-currency));\r\n\t}\r\n\t.corrupted {\r\n\t\tcolor: hsla(var(--item-corrupted));\r\n\t}\r\n\t.divination {\r\n\t\tcolor: #0ebaff;\r\n\t}\r\n\t.augmented {\r\n\t\tcolor: var(--item-augmented);\r\n\t}\r\n\r\n\t.size22 {\r\n\t\tfont-size: 11px;\r\n\t\tline-height: 0.8rem;\r\n\t}\r\n\r\n\t.size25 {\r\n\t\tfont-size: 12.5px;\r\n\t\tline-height: 0.9rem;\r\n\t}\r\n\r\n\t.size26 {\r\n\t\tfont-size: 13px;\r\n\t}\r\n\r\n\t.size27 {\r\n\t\tfont-size: 13.5px;\r\n\t}\r\n\t.size28 {\r\n\t\tfont-size: 14px;\r\n\t}\r\n\r\n\t.size29 {\r\n\t\tfont-size: 14.5px;\r\n\t}\r\n\r\n\t.size30 {\r\n\t\tfont-size: 15px;\r\n\t}\r\n\r\n\t.size31 {\r\n\t\tfont-size: 15.5px;\r\n\t}\r\n\r\n\tp {\r\n\t\tline-height: inherit;\r\n\t}\r\n\r\n\tp:has(.size25) {\r\n\t\tline-height: 0.9rem;\r\n\t}\r\n\r\n\tp:has(.size26) {\r\n\t\tline-height: 0.95rem;\r\n\t}\r\n\r\n\tp:has(.size27) {\r\n\t\tline-height: 1rem;\r\n\t}\r\n\r\n\tp:has(.size28) {\r\n\t\tline-height: 1.05rem;\r\n\t}\r\n\r\n\tp:has(.size29) {\r\n\t\tline-height: 1.1rem;\r\n\t}\r\n\r\n\tp:has(.size30) {\r\n\t\tline-height: 1.15rem;\r\n\t}\r\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styles",
          "declaration": {
            "name": "styles",
            "module": "src/elements/divination-card/divination-card.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/divination-card/e-divination-card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivinationCardElement",
          "cssProperties": [
            {
              "description": "The inline padding to use for for element.",
              "name": "--padding-inline"
            },
            {
              "description": "The block padding to use for for element.",
              "name": "--padding-block"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "boss",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "boss",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stackSize",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "flavourText",
              "default": "``"
            },
            {
              "kind": "field",
              "name": "artFilename",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "rewardHtml",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "dropLevel",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "#onNavigation"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "boss",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "boss"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Divination Card",
          "tagName": "e-divination-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivinationCardElement",
          "declaration": {
            "name": "DivinationCardElement",
            "module": "src/elements/divination-card/e-divination-card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-divination-card",
          "declaration": {
            "name": "DivinationCardElement",
            "module": "src/elements/divination-card/e-divination-card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source/e-act-area.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ActAreaElement",
          "members": [
            {
              "kind": "field",
              "name": "actArea",
              "type": {
                "text": "ActArea"
              },
              "attribute": "actArea"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "SourceSize"
              },
              "default": "'large'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "actArea",
              "type": {
                "text": "ActArea"
              },
              "fieldName": "actArea"
            },
            {
              "name": "size",
              "type": {
                "text": "SourceSize"
              },
              "default": "'large'",
              "fieldName": "size"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-act-area",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ActAreaElement",
          "declaration": {
            "name": "ActAreaElement",
            "module": "src/elements/e-source/e-act-area.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-act-area",
          "declaration": {
            "name": "ActAreaElement",
            "module": "src/elements/e-source/e-act-area.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source/e-actboss.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ActBossElement",
          "members": [
            {
              "kind": "field",
              "name": "boss",
              "type": {
                "text": "Bossfight"
              },
              "attribute": "boss"
            },
            {
              "kind": "field",
              "name": "actArea",
              "type": {
                "text": "ActArea"
              },
              "attribute": "actArea"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "boss",
              "type": {
                "text": "Bossfight"
              },
              "fieldName": "boss"
            },
            {
              "name": "actArea",
              "type": {
                "text": "ActArea"
              },
              "fieldName": "actArea"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-actboss",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ActBossElement",
          "declaration": {
            "name": "ActBossElement",
            "module": "src/elements/e-source/e-actboss.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-actboss",
          "declaration": {
            "name": "ActBossElement",
            "module": "src/elements/e-source/e-actboss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source/e-map.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MapElement",
          "members": [
            {
              "kind": "field",
              "name": "map",
              "type": {
                "text": "MapArea"
              },
              "attribute": "map"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium'"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode"
            },
            {
              "kind": "field",
              "name": "imgSize",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "image-size"
            },
            {
              "kind": "field",
              "name": "imageWidth",
              "type": {
                "text": "number"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "mapColor",
              "return": {
                "type": {
                  "text": "'white' | 'yellow' | 'red' | 'special'"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderName",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "map",
              "type": {
                "text": "MapArea"
              },
              "fieldName": "map"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium'"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            },
            {
              "name": "image-size",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "imgSize"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-map",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MapElement",
          "declaration": {
            "name": "MapElement",
            "module": "src/elements/e-source/e-map.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-map",
          "declaration": {
            "name": "MapElement",
            "module": "src/elements/e-source/e-map.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source/e-mapboss.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MapBossElement",
          "members": [
            {
              "kind": "field",
              "name": "boss",
              "type": {
                "text": "MapBoss"
              },
              "attribute": "boss"
            },
            {
              "kind": "field",
              "name": "maps",
              "type": {
                "text": "MapArea[]"
              },
              "default": "[]",
              "attribute": "maps"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "boss",
              "type": {
                "text": "MapBoss"
              },
              "fieldName": "boss"
            },
            {
              "name": "maps",
              "type": {
                "text": "MapArea[]"
              },
              "default": "[]",
              "fieldName": "maps"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-mapboss",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MapBossElement",
          "declaration": {
            "name": "MapBossElement",
            "module": "src/elements/e-source/e-mapboss.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-mapboss",
          "declaration": {
            "name": "MapBossElement",
            "module": "src/elements/e-source/e-mapboss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source/e-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NoSourceInPoeDataError",
          "superclass": {
            "name": "Error",
            "module": "src/elements/e-source/e-source.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "SourceElement",
          "cssProperties": [
            {
              "description": "The inline padding to use for for element.",
              "name": "--padding-inline"
            },
            {
              "description": "The block padding to use for for element.",
              "name": "--padding-block"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "Source"
              },
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "showSourceType"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "SourceSize"
              },
              "default": "'medium'",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode"
            },
            {
              "kind": "field",
              "name": "actSize",
              "type": {
                "text": "SourceSize | undefined"
              },
              "attribute": "actSize"
            },
            {
              "kind": "field",
              "name": "sourceHasSpecialElement",
              "type": {
                "text": "boolean"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#setViewTransitionName",
              "parameters": [
                {
                  "name": "transitionName",
                  "default": "'source'"
                }
              ]
            },
            {
              "kind": "method",
              "name": "sourceElement",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            },
            {
              "kind": "method",
              "name": "mapboss",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "mapAreas",
                  "type": {
                    "text": "MapArea[]"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "source",
              "type": {
                "text": "Source"
              },
              "fieldName": "source"
            },
            {
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showSourceType"
            },
            {
              "name": "size",
              "type": {
                "text": "SourceSize"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            },
            {
              "name": "actSize",
              "type": {
                "text": "SourceSize | undefined"
              },
              "fieldName": "actSize"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Any dropsource of divination card: map, act, etc",
          "tagName": "e-source",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NoSourceInPoeDataError",
          "declaration": {
            "name": "NoSourceInPoeDataError",
            "module": "src/elements/e-source/e-source.ts"
          }
        },
        {
          "kind": "js",
          "name": "SourceElement",
          "declaration": {
            "name": "SourceElement",
            "module": "src/elements/e-source/e-source.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-source",
          "declaration": {
            "name": "SourceElement",
            "module": "src/elements/e-source/e-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/input/e-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "My copy of shoelace item that uses <datalist>",
          "name": "InputElement",
          "cssParts": [
            {
              "description": "The form control that wraps the label, input, and help text.",
              "name": "form-control"
            },
            {
              "description": "The label's wrapper.",
              "name": "form-control-label"
            },
            {
              "description": "The input's wrapper.",
              "name": "form-control-input"
            },
            {
              "description": "The help text's wrapper.",
              "name": "form-control-help-text"
            },
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The internal `<input>` control.",
              "name": "input"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The clear button.",
              "name": "clear-button"
            },
            {
              "description": "The password toggle button.",
              "name": "password-toggle-button"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            }
          ],
          "slots": [
            {
              "description": "The input's label. Alternatively, you can use the `label` attribute.",
              "name": "label"
            },
            {
              "description": "Used to prepend a presentational icon or similar element to the input.",
              "name": "prefix"
            },
            {
              "description": "Used to append a presentational icon or similar element to the input.",
              "name": "suffix"
            },
            {
              "description": "An icon to use in lieu of the default clear icon.",
              "name": "clear-icon"
            },
            {
              "description": "An icon to use in lieu of the default show password icon.",
              "name": "show-password-icon"
            },
            {
              "description": "An icon to use in lieu of the default hide password icon.",
              "name": "hide-password-icon"
            },
            {
              "description": "Text that describes how to use the input. Alternatively, you can use the `help-text` attribute.",
              "name": "help-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "datalistItems",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "attribute": "datalistItems"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "__numberInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__dateInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "| 'date'\r\n\t\t| 'datetime-local'\r\n\t\t| 'email'\r\n\t\t| 'number'\r\n\t\t| 'password'\r\n\t\t| 'search'\r\n\t\t| 'tel'\r\n\t\t| 'text'\r\n\t\t| 'time'\r\n\t\t| 'url'"
              },
              "default": "'text'",
              "description": "The type of input. Works the same as a native `<input>` element, but only a subset of types are supported. Defaults\r\nto `text`.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "internals"
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "list"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled input.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style input with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is not empty.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "passwordToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "attribute": "password-toggle"
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "attribute": "password-visible"
            },
            {
              "kind": "field",
              "name": "noSpinButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "attribute": "no-spin-buttons"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\r\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\r\nthe same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression pattern to validate input against.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value. Only applies to date and number input types.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value. Only applies to date and number input types.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\r\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "'off' | 'on'"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\r\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "attribute": "enterkeyhint"
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the input.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\r\nkeyboard on supportive devices.",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "type": {
                "text": "Date | null"
              },
              "description": "Gets or sets the current value as a `Date` object. Returns `null` if the value can't be converted. This will use the native `<input type=\"{{type}}\">` implementation and may result in an error."
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "type": {
                "text": "number"
              },
              "description": "Gets or sets the current value as a number. Returns `NaN` if the value can't be converted."
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "string"
              },
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handlePasswordToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Selects all the text in the input."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "showPicker",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Displays the browser picker for an input element (only works if the browser supports it for the input type)."
            },
            {
              "kind": "method",
              "name": "stepUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Increments the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Decrements the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "Event"
              }
            },
            {
              "description": "Emitted when the control loses focus.",
              "name": "sl-blur"
            },
            {
              "description": "Emitted when an alteration to the control's value is committed by the user.",
              "name": "sl-change"
            },
            {
              "description": "Emitted when the clear button is activated.",
              "name": "sl-clear"
            },
            {
              "description": "Emitted when the control gains focus.",
              "name": "sl-focus"
            },
            {
              "description": "Emitted when the control receives input.",
              "name": "sl-input"
            },
            {
              "description": "Emitted when the form control has been checked for validity and its constraints aren't satisfied.",
              "name": "sl-invalid"
            }
          ],
          "attributes": [
            {
              "name": "datalistItems",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "fieldName": "datalistItems"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "type",
              "type": {
                "text": "| 'date'\r\n\t\t| 'datetime-local'\r\n\t\t| 'email'\r\n\t\t| 'number'\r\n\t\t| 'password'\r\n\t\t| 'search'\r\n\t\t| 'tel'\r\n\t\t| 'text'\r\n\t\t| 'time'\r\n\t\t| 'url'"
              },
              "default": "'text'",
              "description": "The type of input. Works the same as a native `<input>` element, but only a subset of types are supported. Defaults\r\nto `text`.",
              "fieldName": "type"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "list"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "fieldName": "size"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled input.",
              "fieldName": "filled"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style input with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is not empty.",
              "fieldName": "clearable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "fieldName": "disabled"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "password-toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "fieldName": "passwordToggle"
            },
            {
              "name": "password-visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "fieldName": "passwordVisible"
            },
            {
              "name": "no-spin-buttons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "fieldName": "noSpinButtons"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\r\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\r\nthe same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "fieldName": "required"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression pattern to validate input against.",
              "fieldName": "pattern"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "fieldName": "maxlength"
            },
            {
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value. Only applies to date and number input types.",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value. Only applies to date and number input types.",
              "fieldName": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\r\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "fieldName": "step"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "'off' | 'on'"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\r\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "fieldName": "autofocus"
            },
            {
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "fieldName": "enterkeyhint"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the input.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\r\nkeyboard on supportive devices.",
              "fieldName": "inputmode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Inputs collect data from the user.",
          "tagName": "e-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputElement",
          "declaration": {
            "name": "InputElement",
            "module": "src/elements/input/e-input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-input",
          "declaration": {
            "name": "InputElement",
            "module": "src/elements/input/e-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/input/input.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/input/input.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/presets/e-divcord-presets.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivcordPresetsElement",
          "members": [
            {
              "kind": "field",
              "name": "customPresets",
              "type": {
                "text": "PresetConfig[]"
              },
              "default": "[]",
              "attribute": "customPresets"
            },
            {
              "kind": "field",
              "name": "config",
              "type": {
                "text": "Omit<PresetConfig, 'name'>"
              },
              "default": "DEFAULT_PRESETS[0]"
            },
            {
              "kind": "field",
              "name": "presetActionState",
              "type": {
                "text": "'adding' | 'deleting' | 'idle'"
              },
              "default": "'idle'"
            },
            {
              "kind": "field",
              "name": "presetsForDelete",
              "type": {
                "text": "Set<string>"
              },
              "default": "new Set()"
            },
            {
              "kind": "method",
              "name": "#updateConfig",
              "parameters": [
                {
                  "name": "newConfig",
                  "type": {
                    "text": "Omit<PresetConfig, 'name'>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#applyPreset",
              "parameters": [
                {
                  "name": "preset",
                  "type": {
                    "text": "PresetConfig"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#updateCustomPresets",
              "parameters": [
                {
                  "name": "customPresets",
                  "type": {
                    "text": "PresetConfig[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onGreynotesSelectChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onRemainingWorkSelectChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onConfidenceSelectChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onPlusPresetClicked"
            },
            {
              "kind": "method",
              "name": "#onDeleteModeActivate"
            },
            {
              "kind": "method",
              "name": "#onCancelClicked"
            },
            {
              "kind": "method",
              "name": "#onTrashClicked"
            },
            {
              "kind": "field",
              "name": "onEscapePressed"
            },
            {
              "kind": "method",
              "name": "findPreset",
              "return": {
                "type": {
                  "text": "PresetConfig | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "inputNewPresetNameEl",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "method",
              "name": "#onSubmitNewPreset",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "SubmitEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onPresetChecked",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "AddingPresets",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            },
            {
              "kind": "method",
              "name": "DeletingPresets",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult | typeof nothing"
                }
              }
            }
          ],
          "events": [
            {
              "name": "config-updated",
              "type": {
                "text": "Event"
              },
              "description": "Emitted when active config options updated"
            },
            {
              "name": "preset-applied",
              "type": {
                "text": "CustomEvent"
              }
            },
            {
              "name": "custom-presets-updated",
              "type": {
                "text": "CustomEvent"
              }
            }
          ],
          "attributes": [
            {
              "name": "customPresets",
              "type": {
                "text": "PresetConfig[]"
              },
              "default": "[]",
              "fieldName": "customPresets"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Controls for divcord presets",
          "tagName": "e-divcord-presets",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordPresetsElement",
          "declaration": {
            "name": "DivcordPresetsElement",
            "module": "src/elements/presets/e-divcord-presets.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-divcord-presets",
          "declaration": {
            "name": "DivcordPresetsElement",
            "module": "src/elements/presets/e-divcord-presets.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/presets/presets.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DEFAULT_PRESETS",
          "type": {
            "text": "PresetConfig[]"
          },
          "default": "[\r\n\t{\r\n\t\tname: 'Show All',\r\n\t\tgreynote: Array.from(GREYNOTE_VARIANTS),\r\n\t\tconfidence: Array.from(CONFIDENCE_VARIANTS),\r\n\t\tremainingWork: Array.from(REMAINING_WORK_VARIANTS),\r\n\t},\r\n\t{\r\n\t\tname: 'Divcord Preset',\r\n\t\tgreynote: ['Empty', 'Area-specific', 'Chest_object', 'disabled', 'Monster-specific'],\r\n\t\tconfidence: ['low', 'none', 'ok'],\r\n\t\tremainingWork: Array.from(REMAINING_WORK_VARIANTS),\r\n\t},\r\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DEFAULT_PRESETS",
          "declaration": {
            "name": "DEFAULT_PRESETS",
            "module": "src/elements/presets/presets.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/theme-toggle/template.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "template",
          "default": "String.raw`\r\n    <button\r\n        class=\"theme-toggle\"\r\n        id=\"theme-toggle\"\r\n        title=\"Toggles light & dark\"\r\n        aria-label=\"auto\"\r\n        aria-live=\"polite\">\r\n            <svg class=\"sun-and-moon\" aria-hidden=\"true\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                <mask class=\"moon\" id=\"moon-mask\">\r\n                    <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"white\" />\r\n                    <circle cx=\"24\" cy=\"10\" r=\"6\" fill=\"black\" />\r\n                </mask>\r\n                <circle class=\"sun\" cx=\"12\" cy=\"12\" r=\"6\" mask=\"url(#moon-mask)\" fill=\"currentColor\" />\r\n                <g class=\"sun-beams\" stroke=\"currentColor\">\r\n                    <line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\" />\r\n                    <line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\" />\r\n                    <line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\" />\r\n                    <line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\" />\r\n                    <line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\" />\r\n                    <line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\" />\r\n                    <line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\" />\r\n                    <line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\" />\r\n                </g>\r\n            </svg>\r\n\t</button>`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "template",
          "declaration": {
            "name": "template",
            "module": "src/elements/theme-toggle/template.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/theme-toggle/theme-toggle.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ThemeToggle",
          "cssProperties": [
            {
              "name": "--size"
            },
            {
              "name": "--icon-fill"
            },
            {
              "name": "--icon-fill"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "define",
              "static": true,
              "parameters": [
                {
                  "name": "tag",
                  "default": "'theme-toggle'"
                }
              ]
            },
            {
              "kind": "field",
              "name": "theme",
              "type": {
                "text": "ColorTheme"
              }
            },
            {
              "kind": "field",
              "name": "$button",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#shadowRoot",
              "privacy": "private",
              "type": {
                "text": "ShadowRoot"
              }
            },
            {
              "kind": "method",
              "name": "toggleTheme",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "attributes": [
            {
              "name": "theme"
            }
          ],
          "superclass": {
            "name": "HTMLElement"
          },
          "tagName": "theme-toggle",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ThemeToggle",
          "declaration": {
            "name": "ThemeToggle",
            "module": "src/elements/theme-toggle/theme-toggle.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "theme-toggle",
          "declaration": {
            "name": "ThemeToggle",
            "module": "src/elements/theme-toggle/theme-toggle.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/usefulResources/e-useful-resource.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "UsefulResourceElement",
          "members": [
            {
              "kind": "field",
              "name": "resource",
              "type": {
                "text": "UsefulResource"
              },
              "attribute": "resource"
            }
          ],
          "attributes": [
            {
              "name": "resource",
              "type": {
                "text": "UsefulResource"
              },
              "fieldName": "resource"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-useful-resource",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "UsefulResourceElement",
          "declaration": {
            "name": "UsefulResourceElement",
            "module": "src/elements/usefulResources/e-useful-resource.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-useful-resource",
          "declaration": {
            "name": "UsefulResourceElement",
            "module": "src/elements/usefulResources/e-useful-resource.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/usefulResources/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/weights-table/e-weight-value.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WeightValueElement",
          "members": [
            {
              "kind": "field",
              "name": "weightData",
              "type": {
                "text": "WeightData"
              },
              "attribute": "weightData"
            }
          ],
          "attributes": [
            {
              "name": "weightData",
              "type": {
                "text": "WeightData"
              },
              "fieldName": "weightData"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "- Shows weight value. Also shows pre-rework game version\r\n  if card is unobtainable from divination cards anymore.",
          "tagName": "e-weight-value",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WeightValueElement",
          "declaration": {
            "name": "WeightValueElement",
            "module": "src/elements/weights-table/e-weight-value.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-weight-value",
          "declaration": {
            "name": "WeightValueElement",
            "module": "src/elements/weights-table/e-weight-value.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/weights-table/e-weights-table-verify-sources.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WeightsTableVerifySources",
          "members": [
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "RowData[]"
              },
              "default": "[]",
              "attribute": "rows"
            },
            {
              "kind": "field",
              "name": "weightOrder",
              "type": {
                "text": "Order"
              },
              "default": "'desc'",
              "attribute": "weight-order",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "nameOrder",
              "type": {
                "text": "Order"
              },
              "default": "'asc'",
              "attribute": "name-order",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orderedBy",
              "type": {
                "text": "'name' | 'weight'"
              },
              "default": "'weight'",
              "attribute": "ordered-by",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "weightIcon",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'sort-down'"
            },
            {
              "kind": "field",
              "name": "nameIcon",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'sort-alpha-down-alt'"
            },
            {
              "kind": "field",
              "name": "rowsClone",
              "type": {
                "text": "RowData[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "#toggleWeightOrder"
            },
            {
              "kind": "method",
              "name": "#toggleNameOrder"
            }
          ],
          "attributes": [
            {
              "name": "rows",
              "type": {
                "text": "RowData[]"
              },
              "default": "[]",
              "fieldName": "rows"
            },
            {
              "name": "weight-order",
              "type": {
                "text": "Order"
              },
              "default": "'desc'",
              "fieldName": "weightOrder"
            },
            {
              "name": "name-order",
              "type": {
                "text": "Order"
              },
              "default": "'asc'",
              "fieldName": "nameOrder"
            },
            {
              "name": "ordered-by",
              "type": {
                "text": "'name' | 'weight'"
              },
              "default": "'weight'",
              "fieldName": "orderedBy"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-weights-table-verify-sources",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WeightsTableVerifySources",
          "declaration": {
            "name": "WeightsTableVerifySources",
            "module": "src/elements/weights-table/e-weights-table-verify-sources.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-weights-table-verify-sources",
          "declaration": {
            "name": "WeightsTableVerifySources",
            "module": "src/elements/weights-table/e-weights-table-verify-sources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/weights-table/e-weights-table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "WeightsTableElement",
          "members": [
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "WeightData[]"
              },
              "default": "[]",
              "attribute": "rows"
            },
            {
              "kind": "field",
              "name": "weightOrder",
              "type": {
                "text": "Order"
              },
              "default": "'desc'",
              "attribute": "weight-order",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "nameOrder",
              "type": {
                "text": "Order"
              },
              "default": "'asc'",
              "attribute": "name-order",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "orderedBy",
              "type": {
                "text": "'name' | 'weight'"
              },
              "default": "'weight'",
              "attribute": "ordered-by",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "limit",
              "type": {
                "text": "null | number"
              },
              "default": "5",
              "attribute": "limit",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showCards",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "show-cards",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "weightIcon",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'sort-down'"
            },
            {
              "kind": "field",
              "name": "nameIcon",
              "type": {
                "text": "string"
              },
              "privacy": "private",
              "default": "'sort-alpha-down-alt'"
            },
            {
              "kind": "field",
              "name": "rowsClone",
              "type": {
                "text": "WeightData[]"
              },
              "privacy": "private",
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "rowsLimitedVisible",
              "type": {
                "text": "WeightData[]"
              },
              "privacy": "private",
              "default": "[]",
              "description": "Visible rows by current limit"
            },
            {
              "kind": "method",
              "name": "#toggleWeightOrder"
            },
            {
              "kind": "method",
              "name": "#toggleNameOrder"
            },
            {
              "kind": "method",
              "name": "#onShowMore"
            },
            {
              "kind": "method",
              "name": "#onShowAll"
            },
            {
              "kind": "method",
              "name": "#onShowLess"
            },
            {
              "kind": "method",
              "name": "#onShowCardsToggled",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleNavSetTransitionName",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "show-cards-changed",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "rows",
              "type": {
                "text": "WeightData[]"
              },
              "default": "[]",
              "fieldName": "rows"
            },
            {
              "name": "weight-order",
              "type": {
                "text": "Order"
              },
              "default": "'desc'",
              "fieldName": "weightOrder"
            },
            {
              "name": "name-order",
              "type": {
                "text": "Order"
              },
              "default": "'asc'",
              "fieldName": "nameOrder"
            },
            {
              "name": "ordered-by",
              "type": {
                "text": "'name' | 'weight'"
              },
              "default": "'weight'",
              "fieldName": "orderedBy"
            },
            {
              "name": "limit",
              "type": {
                "text": "null | number"
              },
              "default": "5",
              "fieldName": "limit"
            },
            {
              "name": "show-cards",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "showCards"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-weights-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "WeightsTableElement",
          "declaration": {
            "name": "WeightsTableElement",
            "module": "src/elements/weights-table/e-weights-table.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-weights-table",
          "declaration": {
            "name": "WeightsTableElement",
            "module": "src/elements/weights-table/e-weights-table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/weights-table/lib.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "prepareWeightData",
          "return": {
            "type": {
              "text": "WeightData"
            }
          },
          "parameters": [
            {
              "name": "card",
              "type": {
                "text": "Card"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "prepareWeightData",
          "declaration": {
            "name": "prepareWeightData",
            "module": "src/elements/weights-table/lib.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/weights-table/Sort.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Sort",
          "members": [
            {
              "kind": "method",
              "name": "byName",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "cards",
                  "type": {
                    "text": "WeightData[]"
                  }
                },
                {
                  "name": "order",
                  "type": {
                    "text": "Order"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "byWeight",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "cards",
                  "type": {
                    "text": "WeightData[]"
                  }
                },
                {
                  "name": "order",
                  "type": {
                    "text": "Order"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Sort",
          "declaration": {
            "name": "Sort",
            "module": "src/elements/weights-table/Sort.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/weights-table/table.styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "styles",
          "default": "css`\r\n\t:host {\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n\t.table {\r\n\t\tborder-collapse: collapse;\r\n\t\tborder: 1px solid rgba(140, 140, 140, 0.3);\r\n\t}\r\n\r\n\t.th {\r\n\t\tfont-size: 1.2rem;\r\n\t}\r\n\r\n\t.th,\r\n\t.td {\r\n\t\tpadding: 0.5rem;\r\n\t\tborder: 1px solid rgba(160, 160, 160, 0.2);\r\n\t\ttext-align: center;\r\n\t\t@media (width >=460px) {\r\n\t\t\tpadding: 1rem;\r\n\t\t}\r\n\t}\r\n\r\n\t.header-with-icon {\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\talign-items: center;\r\n\t\tgap: 0.4rem;\r\n\t}\r\n\r\n\t.td-weight {\r\n\t\tfont-weight: 600;\r\n\t\tfont-size: 17px;\r\n\t\t@media (width >=460px) {\r\n\t\t\tfont-size: 18px;\r\n\t\t}\r\n\t}\r\n\r\n\tsl-icon {\r\n\t\tcolor: var(--sl-color-gray-900);\r\n\t}\r\n\r\n\t.ordered-by {\r\n\t\tcolor: var(--sl-color-yellow-700);\r\n\t}\r\n`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "styles",
          "declaration": {
            "name": "styles",
            "module": "src/elements/weights-table/table.styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/weights-table/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/gen/divcordWasm/divcord_wasm.js",
      "declarations": [
        {
          "kind": "function",
          "name": "parsed_records",
          "parameters": [
            {
              "name": "spreadsheet",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "poe_data",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "toast",
              "type": {
                "text": "Function"
              }
            }
          ],
          "return": {
            "type": {
              "text": "any"
            }
          }
        },
        {
          "kind": "function",
          "name": "find_cards_by_source_types",
          "parameters": [
            {
              "name": "types",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "poe_data",
              "type": {
                "text": "string"
              }
            }
          ],
          "return": {
            "type": {
              "text": "any"
            }
          }
        },
        {
          "kind": "function",
          "name": "initSync",
          "parameters": [
            {
              "name": "module"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__wbg_init",
          "parameters": [
            {
              "name": "input"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parsed_records",
          "declaration": {
            "name": "parsed_records",
            "module": "src/gen/divcordWasm/divcord_wasm.js"
          }
        },
        {
          "kind": "js",
          "name": "find_cards_by_source_types",
          "declaration": {
            "name": "find_cards_by_source_types",
            "module": "src/gen/divcordWasm/divcord_wasm.js"
          }
        },
        {
          "kind": "js",
          "name": "initSync",
          "declaration": {
            "name": "initSync",
            "module": "src/gen/divcordWasm/divcord_wasm.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "__wbg_init",
            "module": "src/gen/divcordWasm/divcord_wasm.js"
          }
        }
      ]
    }
  ]
}
