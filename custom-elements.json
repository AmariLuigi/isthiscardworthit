{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/context.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "divcordTableContext"
        },
        {
          "kind": "variable",
          "name": "cardsFinderContext"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "divcordTableContext",
          "declaration": {
            "name": "divcordTableContext",
            "module": "src/context.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsFinderContext",
          "declaration": {
            "name": "cardsFinderContext",
            "module": "src/context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/DivcordService.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivcordServiceEvent",
          "superclass": {
            "name": "Event",
            "module": "src/DivcordService.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "DivcordService",
          "members": [
            {
              "kind": "field",
              "name": "#state",
              "privacy": "private",
              "type": {
                "text": "DivcordServiceState"
              },
              "default": "'idle'"
            },
            {
              "kind": "field",
              "name": "#cache",
              "privacy": "private",
              "type": {
                "text": "Cache"
              },
              "default": "await caches.open(CACHE_KEY)"
            },
            {
              "kind": "field",
              "name": "localStorageManager",
              "type": {
                "text": "DivcordLocalStorageManager"
              },
              "default": "new DivcordLocalStorageManager()"
            },
            {
              "kind": "method",
              "name": "addEventListener",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "DivcordServiceEventType"
                  }
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "(e: DivcordServiceEvent) => void"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "state"
            },
            {
              "kind": "method",
              "name": "read",
              "return": {
                "type": {
                  "text": "Promise<SourcefulDivcordTableRecord[]>"
                }
              }
            },
            {
              "kind": "method",
              "name": "bestAvailableRecords"
            },
            {
              "kind": "method",
              "name": "cacheDate",
              "return": {
                "type": {
                  "text": "Promise<Date | null>"
                }
              }
            },
            {
              "kind": "method",
              "name": "cacheAge",
              "return": {
                "type": {
                  "text": "Promise<number | null>"
                }
              }
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "Promise<CacheValidity>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#cachedResponses",
              "return": {
                "type": {
                  "text": "Promise<DivcordResponses | null>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#serderesponses",
              "return": {
                "type": {
                  "text": "Promise<IDivcordData>"
                }
              },
              "parameters": [
                {
                  "name": "r",
                  "type": {
                    "text": "DivcordResponses"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#fromStaticJson",
              "return": {
                "type": {
                  "text": "Promise<SourcefulDivcordTableRecord[]>"
                }
              }
            }
          ],
          "superclass": {
            "name": "EventTarget",
            "module": "src/DivcordService.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "DivcordLocalStorageManager",
          "superclass": {
            "name": "LocalStorageManager",
            "module": "/src/storage"
          },
          "members": [
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "Key"
              },
              "default": "key",
              "inheritedFrom": {
                "name": "LocalStorageManager",
                "module": "src/storage.ts"
              }
            },
            {
              "kind": "field",
              "name": "serde",
              "type": {
                "text": "Serde<T, Input>"
              },
              "default": "serde",
              "inheritedFrom": {
                "name": "LocalStorageManager",
                "module": "src/storage.ts"
              }
            },
            {
              "kind": "method",
              "name": "exists",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "LocalStorageManager",
                "module": "src/storage.ts"
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "LocalStorageManager",
                "module": "src/storage.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "T | null"
              },
              "inheritedFrom": {
                "name": "LocalStorageManager",
                "module": "src/storage.ts"
              }
            },
            {
              "kind": "method",
              "name": "save",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "Input"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "LocalStorageManager",
                "module": "src/storage.ts"
              }
            },
            {
              "kind": "method",
              "name": "load",
              "return": {
                "type": {
                  "text": "T | null"
                }
              },
              "inheritedFrom": {
                "name": "LocalStorageManager",
                "module": "src/storage.ts"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "parseRecords",
          "return": {
            "type": {
              "text": "Promise<SourcefulDivcordTableRecord[]>"
            }
          },
          "parameters": [
            {
              "name": "divcord",
              "type": {
                "text": "IDivcordData"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "IPoeData"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "divcordService",
          "default": "new DivcordService(cache)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordServiceEvent",
          "declaration": {
            "name": "DivcordServiceEvent",
            "module": "src/DivcordService.ts"
          }
        },
        {
          "kind": "js",
          "name": "DivcordService",
          "declaration": {
            "name": "DivcordService",
            "module": "src/DivcordService.ts"
          }
        },
        {
          "kind": "js",
          "name": "DivcordLocalStorageManager",
          "declaration": {
            "name": "DivcordLocalStorageManager",
            "module": "src/DivcordService.ts"
          }
        },
        {
          "kind": "js",
          "name": "parseRecords",
          "declaration": {
            "name": "parseRecords",
            "module": "src/DivcordService.ts"
          }
        },
        {
          "kind": "js",
          "name": "divcordService",
          "declaration": {
            "name": "divcordService",
            "module": "src/DivcordService.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/events.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SetTransitionNameEvent",
          "superclass": {
            "name": "CustomEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "function",
          "name": "dispatchSetTransitionName",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "HTMLElement & { href?: string }"
              }
            },
            {
              "name": "transitionName",
              "type": {
                "text": "TransitionName"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SetTransitionNameEvent",
          "declaration": {
            "name": "SetTransitionNameEvent",
            "module": "src/events.ts"
          }
        },
        {
          "kind": "js",
          "name": "dispatchSetTransitionName",
          "declaration": {
            "name": "dispatchSetTransitionName",
            "module": "src/events.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/main.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "startViewTransition",
          "return": {
            "type": {
              "text": "Promise<unknown>"
            }
          },
          "parameters": [
            {
              "name": "cb",
              "type": {
                "text": "(...args: any[]) => any"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "RootElement",
          "members": [
            {
              "kind": "field",
              "name": "outlet",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              },
              "attribute": "divcordTable"
            },
            {
              "kind": "field",
              "name": "cardsFinder",
              "type": {
                "text": "CardsFinder"
              }
            }
          ],
          "attributes": [
            {
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              },
              "fieldName": "divcordTable"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "wc-root",
          "customElement": true
        },
        {
          "kind": "variable",
          "name": "router",
          "default": "new Router({\r\n\troutes: [\r\n\t\t{\r\n\t\t\tpath: '/',\r\n\t\t\ttitle: 'Divicards',\r\n\t\t\trender: ({ query }) =>\r\n\t\t\t\thtml`<p-home\r\n\t\t\t\t\t.page=${Number(query.page ?? 1)}\r\n\t\t\t\t\t.perPage=${Number(query['per-page'] ?? 10)}\r\n\t\t\t\t\tfilter=${query.filter ?? ''}\r\n\t\t\t\t></p-home>`,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/divcord',\r\n\t\t\ttitle: 'Divcord',\r\n\t\t\trender: () => html`<p-divcord></p-divcord>`,\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/card/:name',\r\n\t\t\ttitle: context => decodeURI(context.params!.name),\r\n\t\t\trender: context => {\r\n\t\t\t\tconst name = decodeURI(context.params.name);\r\n\t\t\t\treturn html`<p-card .card=${name}></p-card>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/source',\r\n\t\t\ttitle: context => decodeURI(context.query!.id),\r\n\t\t\trender: context => {\r\n\t\t\t\tconst id: string = context.query.id;\r\n\t\t\t\tconst type = context.query.type as SourceType;\r\n\t\t\t\tconst source: ISource = { id, type, kind: 'source-with-member' };\r\n\t\t\t\treturn html`<p-source .source=${source}></p-source>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/maps',\r\n\t\t\ttitle: 'Maps',\r\n\t\t\trender: ({ query }) => {\r\n\t\t\t\treturn html`<p-maps-table\r\n\t\t\t\t\t.page=${Number(query.page ?? 1)}\r\n\t\t\t\t\t.perPage=${Number(query['per-page'] ?? 10)}\r\n\t\t\t\t\tfilter=${query.filter}\r\n\t\t\t\t></p-maps-table>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/sources',\r\n\t\t\ttitle: 'Sources',\r\n\t\t\trender: ({ query }) => {\r\n\t\t\t\treturn html`<p-sources\r\n\t\t\t\t\t.page=${Number(query.page ?? 1)}\r\n\t\t\t\t\t.perPage=${Number(query['per-page'] ?? 10)}\r\n\t\t\t\t\tfilter=${query.filter}\r\n\t\t\t\t></p-sources>`;\r\n\t\t\t},\r\n\t\t},\r\n\t\t{\r\n\t\t\tpath: '/source-type/:id',\r\n\t\t\ttitle: context => decodeURI(context.params!.id),\r\n\t\t\trender: ({ params }) => {\r\n\t\t\t\tconst sourceType = decodeURI(params.id) as SourceType;\r\n\t\t\t\treturn html`<p-source-type .sourceType=${sourceType}></p-source-type>`;\r\n\t\t\t},\r\n\t\t},\r\n\t],\r\n})"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "startViewTransition",
          "declaration": {
            "name": "startViewTransition",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "RootElement",
          "declaration": {
            "name": "RootElement",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "wc-root",
          "declaration": {
            "name": "RootElement",
            "module": "src/main.ts"
          }
        },
        {
          "kind": "js",
          "name": "router",
          "declaration": {
            "name": "router",
            "module": "src/main.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/PoeData.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PoeData",
          "members": [
            {
              "kind": "field",
              "name": "acts",
              "type": {
                "text": "IActArea[]"
              },
              "default": "acts"
            },
            {
              "kind": "field",
              "name": "cards",
              "type": {
                "text": "ICard[]"
              },
              "default": "cards"
            },
            {
              "kind": "field",
              "name": "maps",
              "type": {
                "text": "IMap[]"
              },
              "default": "maps"
            },
            {
              "kind": "field",
              "name": "mapbosses",
              "type": {
                "text": "IMapBoss[]"
              },
              "default": "mapbosses"
            },
            {
              "kind": "method",
              "name": "findActAreaById",
              "parameters": [
                {
                  "name": "actId",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findMap",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findActbossAndArea",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "findMapbossAndMaps",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "card",
              "return": {
                "type": {
                  "text": "ICard | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "minLevel",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "card",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "mapboss",
              "return": {
                "type": {
                  "text": "IMapBoss | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "bossesByMap",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "map",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "level",
              "return": {
                "type": {
                  "text": "number | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "type",
                  "type": {
                    "text": "'Map' | 'Act'"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "variable",
          "name": "poeData",
          "default": "new PoeData(poeDataJson)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PoeData",
          "declaration": {
            "name": "PoeData",
            "module": "src/PoeData.ts"
          }
        },
        {
          "kind": "js",
          "name": "poeData",
          "declaration": {
            "name": "poeData",
            "module": "src/PoeData.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/storage.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Serde",
          "members": [
            {
              "kind": "method",
              "name": "serialize",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Input"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "deserialize",
              "return": {
                "type": {
                  "text": "T"
                }
              },
              "parameters": [
                {
                  "name": "s",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "LocalStorageManager",
          "members": [
            {
              "kind": "field",
              "name": "key",
              "type": {
                "text": "Key"
              },
              "default": "key"
            },
            {
              "kind": "field",
              "name": "serde",
              "type": {
                "text": "Serde<T, Input>"
              },
              "default": "serde"
            },
            {
              "kind": "method",
              "name": "exists",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "clear",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "T | null"
              }
            },
            {
              "kind": "method",
              "name": "save",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "v",
                  "type": {
                    "text": "Input"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "load",
              "return": {
                "type": {
                  "text": "T | null"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Serde",
          "declaration": {
            "name": "Serde",
            "module": "src/storage.ts"
          }
        },
        {
          "kind": "js",
          "name": "LocalStorageManager",
          "declaration": {
            "name": "LocalStorageManager",
            "module": "src/storage.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/toast.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "toast",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "message",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "variant",
              "default": "'primary'",
              "type": {
                "text": "ToastVariant"
              }
            },
            {
              "name": "duration",
              "default": "100_000_000"
            }
          ]
        },
        {
          "kind": "function",
          "name": "warningToast",
          "return": {
            "type": {
              "text": "Promise<void>"
            }
          },
          "parameters": [
            {
              "name": "message",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "toast",
          "declaration": {
            "name": "toast",
            "module": "src/toast.ts"
          }
        },
        {
          "kind": "js",
          "name": "warningToast",
          "declaration": {
            "name": "warningToast",
            "module": "src/toast.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "sourceHref",
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "ISource"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "paginate",
          "return": {
            "type": {
              "text": "T[]"
            }
          },
          "parameters": [
            {
              "name": "arr",
              "type": {
                "text": "T[]"
              }
            },
            {
              "name": "page",
              "type": {
                "text": "number"
              }
            },
            {
              "name": "perPage",
              "type": {
                "text": "number"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sourceHref",
          "declaration": {
            "name": "sourceHref",
            "module": "src/utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "paginate",
          "declaration": {
            "name": "paginate",
            "module": "src/utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/assets/index-673ca956.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "Et",
          "default": "class{#n;#r={};#e={};#t={};#i={};constructor(t={},e,s){try{let i;if(typeof e==\"string\"?i=e:s=e,typeof t==\"string\"){let r=new bt(t);if(r.parse(),t=r.result,i===void 0&&typeof t.protocol!=\"string\")throw new TypeError(\"A base URL must be provided for a relative constructor string.\");t.baseURL=i}else{if(!t||typeof t!=\"object\")throw new TypeError(\"parameter 1 is not of type 'string' and cannot convert to dictionary.\");if(i)throw new TypeError(\"parameter 1 is not of type 'string'.\")}typeof s>\"u\"&&(s={ignoreCase:!1});let a={ignoreCase:s.ignoreCase===!0},o={pathname:$,protocol:$,username:$,password:$,hostname:$,port:$,search:$,hash:$};this.#n=L(o,t,!0),z(this.#n.protocol)===this.#n.port&&(this.#n.port=\"\");let h;for(h of S){if(!(h in this.#n))continue;let r={},n=this.#n[h];switch(this.#e[h]=[],h){case\"protocol\":Object.assign(r,E),r.encodePart=N;break;case\"username\":Object.assign(r,E),r.encodePart=lt;break;case\"password\":Object.assign(r,E),r.encodePart=mt;break;case\"hostname\":Object.assign(r,et),G(n)?r.encodePart=q:r.encodePart=Z;break;case\"port\":Object.assign(r,E),r.encodePart=B;break;case\"pathname\":V(this.#r.protocol)?(Object.assign(r,st,a),r.encodePart=gt):(Object.assign(r,E,a),r.encodePart=dt);break;case\"search\":Object.assign(r,E,a),r.encodePart=wt;break;case\"hash\":Object.assign(r,E,a),r.encodePart=yt;break}try{this.#i[h]=F(n,r),this.#r[h]=W(this.#i[h],this.#e[h],r),this.#t[h]=$t(this.#i[h],r)}catch{throw new TypeError(`invalid ${h} pattern '${this.#n[h]}'.`)}}}catch(i){throw new TypeError(`Failed to construct 'URLPattern': ${i.message}`)}}test(t={},e){let s={pathname:\"\",protocol:\"\",username:\"\",password:\"\",hostname:\"\",port:\"\",search:\"\",hash:\"\"};if(typeof t!=\"string\"&&e)throw new TypeError(\"parameter 1 is not of type 'string'.\");if(typeof t>\"u\")return!1;try{typeof t==\"object\"?s=L(s,t,!1):s=L(s,H(t,e),!1)}catch{return!1}let i;for(i of S)if(!this.#r[i].exec(s[i]))return!1;return!0}exec(t={},e){let s={pathname:\"\",protocol:\"\",username:\"\",password:\"\",hostname:\"\",port:\"\",search:\"\",hash:\"\"};if(typeof t!=\"string\"&&e)throw new TypeError(\"parameter 1 is not of type 'string'.\");if(typeof t>\"u\")return;try{typeof t==\"object\"?s=L(s,t,!1):s=L(s,H(t,e),!1)}catch{return null}let i={};e?i.inputs=[t,e]:i.inputs=[t];let a;for(a of S){let o=this.#r[a].exec(s[a]);if(!o)return null;let h={};for(let[r,n]of this.#e[a].entries())if(typeof n==\"string\"||typeof n==\"number\"){let u=o[r+1];h[n]=u}i[a]={input:s[a]??\"\",groups:h}}return i}static compareComponent(t,e,s){let i=(r,n)=>{for(let u of[\"type\",\"modifier\",\"prefix\",\"value\",\"suffix\"]){if(r[u]<n[u])return-1;if(r[u]!==n[u])return 1}return 0},a=new O(3,\"\",\"\",\"\",\"\",3),o=new O(0,\"\",\"\",\"\",\"\",3),h=(r,n)=>{let u=0;for(;u<Math.min(r.length,n.length);++u){let f=i(r[u],n[u]);if(f)return f}return r.length===n.length?0:i(r[u]??a,n[u]??a)};return!e.#t[t]&&!s.#t[t]?0:e.#t[t]&&!s.#t[t]?h(e.#i[t],[o]):!e.#t[t]&&s.#t[t]?h([o],s.#i[t]):h(e.#i[t],s.#i[t])}get protocol(){return this.#t.protocol}get username(){return this.#t.username}get password(){return this.#t.password}get hostname(){return this.#t.hostname}get port(){return this.#t.port}get pathname(){return this.#t.pathname}get search(){return this.#t.search}get hash(){return this.#t.hash}}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "URLPattern",
          "declaration": {
            "name": "Et",
            "module": "dist/assets/index-673ca956.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/assets/index-fee6f6d4.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "a"
        },
        {
          "kind": "function",
          "name": "e",
          "parameters": [
            {
              "name": "i"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "anonymous_2",
          "superclass": {
            "name": "e",
            "module": "dist/assets/index-fee6f6d4.js"
          },
          "tagName": "a",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "a",
          "declaration": {
            "name": "e",
            "module": "dist/assets/index-fee6f6d4.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "a",
          "declaration": {
            "name": "e",
            "module": "dist/assets/index-fee6f6d4.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "a",
          "declaration": {
            "name": "anonymous_2",
            "module": "dist/assets/index-fee6f6d4.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/assets/sources_wasm-9ec33509.js",
      "declarations": [
        {
          "kind": "function",
          "name": "$",
          "parameters": [
            {
              "name": "e"
            },
            {
              "name": "n"
            }
          ]
        },
        {
          "kind": "function",
          "name": "N",
          "parameters": [
            {
              "name": "e"
            }
          ]
        },
        {
          "kind": "function",
          "name": "F",
          "parameters": [
            {
              "name": "e"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "F",
            "module": "dist/assets/sources_wasm-9ec33509.js"
          }
        },
        {
          "kind": "js",
          "name": "initSync",
          "declaration": {
            "name": "N",
            "module": "dist/assets/sources_wasm-9ec33509.js"
          }
        },
        {
          "kind": "js",
          "name": "parsed_records",
          "declaration": {
            "name": "$",
            "module": "dist/assets/sources_wasm-9ec33509.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/data/CardsFinder.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "includesMap",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "name",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "maps",
              "type": {
                "text": "string[]"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "CardsFinder",
          "members": [
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              },
              "default": "divcordTable"
            },
            {
              "kind": "field",
              "name": "records",
              "type": {
                "text": "SourcefulDivcordTableRecord[]"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "cardsByMaps",
              "return": {
                "type": {
                  "text": "Record<string, CardFromSource[]>"
                }
              }
            },
            {
              "kind": "method",
              "name": "cardsFromSource",
              "return": {
                "type": {
                  "text": "CardFromSource[]"
                }
              },
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "ISource"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "function",
          "name": "sortByWeight",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "cards",
              "type": {
                "text": "CardFromSource[] | string[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "Readonly<PoeData>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "bossesInMap",
          "return": {
            "type": {
              "text": "IMapBoss[]"
            }
          },
          "parameters": [
            {
              "name": "map",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "cardsByMapboss",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "boss",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "ISourcefulDivcordTableRecord[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "cardsByActboss",
          "return": {
            "type": {
              "text": "string[]"
            }
          },
          "parameters": [
            {
              "name": "boss",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "ISourcefulDivcordTableRecord[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "cardsBySource",
          "return": {
            "type": {
              "text": "CardFromSource[]"
            }
          },
          "parameters": [
            {
              "name": "source",
              "type": {
                "text": "ISource"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "ISourcefulDivcordTableRecord[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "cardsBySourceTypes",
          "return": {
            "type": {
              "text": "{ sourcetypesCountsMap: Map<SourceType, number>; sourcesAndCards: SourceAndCards[] }"
            }
          },
          "parameters": [
            {
              "name": "sourceTypes",
              "type": {
                "text": "SourceType[]"
              }
            },
            {
              "name": "records",
              "type": {
                "text": "ISourcefulDivcordTableRecord[]"
              }
            },
            {
              "name": "poeData",
              "type": {
                "text": "PoeData"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "includesMap",
          "declaration": {
            "name": "includesMap",
            "module": "src/data/CardsFinder.ts"
          }
        },
        {
          "kind": "js",
          "name": "CardsFinder",
          "declaration": {
            "name": "CardsFinder",
            "module": "src/data/CardsFinder.ts"
          }
        },
        {
          "kind": "js",
          "name": "sortByWeight",
          "declaration": {
            "name": "sortByWeight",
            "module": "src/data/CardsFinder.ts"
          }
        },
        {
          "kind": "js",
          "name": "bossesInMap",
          "declaration": {
            "name": "bossesInMap",
            "module": "src/data/CardsFinder.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsByMapboss",
          "declaration": {
            "name": "cardsByMapboss",
            "module": "src/data/CardsFinder.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsByActboss",
          "declaration": {
            "name": "cardsByActboss",
            "module": "src/data/CardsFinder.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsBySource",
          "declaration": {
            "name": "cardsBySource",
            "module": "src/data/CardsFinder.ts"
          }
        },
        {
          "kind": "js",
          "name": "cardsBySourceTypes",
          "declaration": {
            "name": "cardsBySourceTypes",
            "module": "src/data/CardsFinder.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/data/ISource.interface.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "sourceTypes",
          "type": {
            "text": "[\n\t'Expedition Logbook',\n\t'Chest',\n\t'Delirium',\n\t'Strongbox',\n\t'Vendor',\n\t'Unknown',\n\t'Delirium Currency Rewards',\n\t'Redeemer influenced maps',\n\t'Disabled',\n\t'Global Drop',\n\t'Act',\n\t'Map',\n\t'Map Boss',\n\t'Act Boss',\n\t\"Maven's Invitation: The Feared\",\n\t'Uul-Netol, Unburdened Flesh (in Breachstones)',\n\t'The Vaal Omnitect',\n\t'Metamorph',\n\t'Null Portal',\n\t'Vaal Flesh Merchant',\n\t\"All Incursion Architects in Alva missions/Alva's Memory\",\n\t'All Abyss Monsters',\n\t'All (Scourge) beyond demons',\n\t'All Rogue Exiles',\n\t'Venarius',\n\t'Argus',\n\t'All Invasion Bosses',\n\t'All Vaal Side Area Bosses',\n\t'Breachlord Boss Domain',\n\t'Architect',\n\t'Shaper Guardian Boss',\n\t'Syndicate Member',\n\t'Elder Slayer',\n\t'Elder Guardian Boss',\n\t'Rogue Exile',\n\t'Female Rogue Exile',\n\t'Abyss Lich Boss',\n\t'Maps Only',\n\t'Act Boss',\n\t'Harbinger Portal',\n\t'Endgame Boss',\n\t'Delve Boss',\n\t'Beast Boss',\n\t'Heist Boss',\n\t'Beyond Boss',\n\t'Expedition Logbook Boss',\n\t'Shaper Mini-Boss',\n\t'Betrayal Catarina',\n\t'Oshabi Boss',\n\t'Trial of Stinging Doubt',\n\t'The Temple of Atzoatl',\n\t'All Vaal side areas (need specific information)',\n\t'Vaal Side Areas',\n\t'Atziri Area',\n\t'Area-Specific',\n]"
          },
          "default": "[\n\t'Expedition Logbook',\n\t'Chest',\n\t'Delirium',\n\t'Strongbox',\n\t'Vendor',\n\t'Unknown',\n\t'Delirium Currency Rewards',\n\t'Redeemer influenced maps',\n\t'Disabled',\n\t'Global Drop',\n\t'Act',\n\t'Map',\n\t'Map Boss',\n\t'Act Boss',\n\t\"Maven's Invitation: The Feared\",\n\t'Uul-Netol, Unburdened Flesh (in Breachstones)',\n\t'The Vaal Omnitect',\n\t'Metamorph',\n\t'Null Portal',\n\t'Vaal Flesh Merchant',\n\t\"All Incursion Architects in Alva missions/Alva's Memory\",\n\t'All Abyss Monsters',\n\t'All (Scourge) beyond demons',\n\t'All Rogue Exiles',\n\t'Venarius',\n\t'Argus',\n\t'All Invasion Bosses',\n\t'All Vaal Side Area Bosses',\n\t'Breachlord Boss Domain',\n\t'Architect',\n\t'Shaper Guardian Boss',\n\t'Syndicate Member',\n\t'Elder Slayer',\n\t'Elder Guardian Boss',\n\t'Rogue Exile',\n\t'Female Rogue Exile',\n\t'Abyss Lich Boss',\n\t'Maps Only',\n\t'Act Boss',\n\t'Harbinger Portal',\n\t'Endgame Boss',\n\t'Delve Boss',\n\t'Beast Boss',\n\t'Heist Boss',\n\t'Beyond Boss',\n\t'Expedition Logbook Boss',\n\t'Shaper Mini-Boss',\n\t'Betrayal Catarina',\n\t'Oshabi Boss',\n\t'Trial of Stinging Doubt',\n\t'The Temple of Atzoatl',\n\t'All Vaal side areas (need specific information)',\n\t'Vaal Side Areas',\n\t'Atziri Area',\n\t'Area-Specific',\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sourceTypes",
          "declaration": {
            "name": "sourceTypes",
            "module": "src/data/ISource.interface.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/data/SourcefulDivcordTableRecord.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createDivcordTable",
          "parameters": [
            {
              "name": "recordsData",
              "type": {
                "text": "ISourcefulDivcordTableRecord[]"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "SourcefulDivcordTable",
          "members": [
            {
              "kind": "field",
              "name": "records",
              "type": {
                "text": "SourcefulDivcordTableRecord[]"
              },
              "default": "records"
            },
            {
              "kind": "method",
              "name": "cards"
            },
            {
              "kind": "method",
              "name": "sourcesByCard",
              "return": {
                "type": {
                  "text": "ISource[]"
                }
              },
              "parameters": [
                {
                  "name": "card",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "sourcesByCards",
              "return": {
                "type": {
                  "text": "Record<string, ISource[]>"
                }
              }
            },
            {
              "kind": "method",
              "name": "recordsByCard",
              "return": {
                "type": {
                  "text": "SourcefulDivcordTableRecord[]"
                }
              },
              "parameters": [
                {
                  "name": "card",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "cardsBySourceTypes",
              "parameters": [
                {
                  "name": "types",
                  "type": {
                    "text": "SourceType[]"
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "SourcefulDivcordTableRecord",
          "members": [
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "card",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "greynote",
              "type": {
                "text": "IGreynote | undefined | undefined"
              }
            },
            {
              "kind": "field",
              "name": "tagHypothesis",
              "type": {
                "text": "string | undefined | undefined"
              }
            },
            {
              "kind": "field",
              "name": "confidence",
              "type": {
                "text": "IConfidence"
              }
            },
            {
              "kind": "field",
              "name": "remainingWork",
              "type": {
                "text": "IRemaininWork | undefined | undefined"
              }
            },
            {
              "kind": "field",
              "name": "sources",
              "type": {
                "text": "ISource[] | undefined | undefined"
              }
            },
            {
              "kind": "field",
              "name": "wikiDisagreements",
              "type": {
                "text": "string | undefined | undefined"
              }
            },
            {
              "kind": "field",
              "name": "sourcesWithTagButNotOnWiki",
              "type": {
                "text": "string | undefined | undefined"
              }
            },
            {
              "kind": "field",
              "name": "notes",
              "type": {
                "text": "string | undefined | undefined"
              }
            },
            {
              "kind": "method",
              "name": "source",
              "return": {
                "type": {
                  "text": "ISource[]"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "'mapBoss' | 'map' | 'act' | 'actBoss'"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "mapBosses",
              "return": {
                "type": {
                  "text": "ISource[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "maps",
              "return": {
                "type": {
                  "text": "ISource[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "acts",
              "return": {
                "type": {
                  "text": "ISource[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "actBosses",
              "return": {
                "type": {
                  "text": "ISource[]"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createDivcordTable",
          "declaration": {
            "name": "createDivcordTable",
            "module": "src/data/SourcefulDivcordTableRecord.ts"
          }
        },
        {
          "kind": "js",
          "name": "SourcefulDivcordTable",
          "declaration": {
            "name": "SourcefulDivcordTable",
            "module": "src/data/SourcefulDivcordTableRecord.ts"
          }
        },
        {
          "kind": "js",
          "name": "SourcefulDivcordTableRecord",
          "declaration": {
            "name": "SourcefulDivcordTableRecord",
            "module": "src/data/SourcefulDivcordTableRecord.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-act-area.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ActAreaElement",
          "members": [
            {
              "kind": "field",
              "name": "actArea",
              "type": {
                "text": "IActArea"
              },
              "attribute": "actArea"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'large'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "actArea",
              "type": {
                "text": "IActArea"
              },
              "fieldName": "actArea"
            },
            {
              "name": "size",
              "type": {
                "text": "Size"
              },
              "default": "'large'",
              "fieldName": "size"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-act-area",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ActAreaElement",
          "declaration": {
            "name": "ActAreaElement",
            "module": "src/elements/e-act-area.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-act-area",
          "declaration": {
            "name": "ActAreaElement",
            "module": "src/elements/e-act-area.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-actboss.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ActBossElement",
          "members": [
            {
              "kind": "field",
              "name": "boss",
              "type": {
                "text": "IBossfight"
              },
              "attribute": "boss"
            },
            {
              "kind": "field",
              "name": "actArea",
              "type": {
                "text": "IActArea"
              },
              "attribute": "actArea"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "boss",
              "type": {
                "text": "IBossfight"
              },
              "fieldName": "boss"
            },
            {
              "name": "actArea",
              "type": {
                "text": "IActArea"
              },
              "fieldName": "actArea"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-actboss",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ActBossElement",
          "declaration": {
            "name": "ActBossElement",
            "module": "src/elements/e-actboss.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-actboss",
          "declaration": {
            "name": "ActBossElement",
            "module": "src/elements/e-actboss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-card-with-divcord-records.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardWithDivcordRecordsElement",
          "members": [
            {
              "kind": "field",
              "name": "card",
              "type": {
                "text": "string"
              },
              "attribute": "card",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "records",
              "type": {
                "text": "SourcefulDivcordTableRecord[]"
              },
              "attribute": "records"
            }
          ],
          "attributes": [
            {
              "name": "card",
              "type": {
                "text": "string"
              },
              "fieldName": "card"
            },
            {
              "name": "records",
              "type": {
                "text": "SourcefulDivcordTableRecord[]"
              },
              "fieldName": "records"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-card-with-divcord-records",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardWithDivcordRecordsElement",
          "declaration": {
            "name": "CardWithDivcordRecordsElement",
            "module": "src/elements/e-card-with-divcord-records.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-card-with-divcord-records",
          "declaration": {
            "name": "CardWithDivcordRecordsElement",
            "module": "src/elements/e-card-with-divcord-records.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-map.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MapElement",
          "members": [
            {
              "kind": "field",
              "name": "map",
              "type": {
                "text": "IMap"
              },
              "attribute": "map"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium'"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode"
            },
            {
              "kind": "field",
              "name": "imgWidth",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "imgWidth"
            },
            {
              "kind": "field",
              "name": "imageWidth",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "mapColor"
            },
            {
              "kind": "method",
              "name": "renderName",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "map",
              "type": {
                "text": "IMap"
              },
              "fieldName": "map"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium'"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            },
            {
              "name": "imgWidth",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "imgWidth"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-map",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MapElement",
          "declaration": {
            "name": "MapElement",
            "module": "src/elements/e-map.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-map",
          "declaration": {
            "name": "MapElement",
            "module": "src/elements/e-map.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-mapboss.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MapBossElement",
          "members": [
            {
              "kind": "field",
              "name": "boss",
              "type": {
                "text": "IMapBoss"
              },
              "attribute": "boss"
            },
            {
              "kind": "field",
              "name": "maps",
              "type": {
                "text": "IMap[]"
              },
              "default": "[]",
              "attribute": "maps"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "boss",
              "type": {
                "text": "IMapBoss"
              },
              "fieldName": "boss"
            },
            {
              "name": "maps",
              "type": {
                "text": "IMap[]"
              },
              "default": "[]",
              "fieldName": "maps"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "href"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-mapboss",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MapBossElement",
          "declaration": {
            "name": "MapBossElement",
            "module": "src/elements/e-mapboss.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-mapboss",
          "declaration": {
            "name": "MapBossElement",
            "module": "src/elements/e-mapboss.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-page-controls.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PageControlsElement",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#onPageInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onPerPageInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "increasePage"
            },
            {
              "kind": "method",
              "name": "decreasePage"
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-page-controls",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PageControlsElement",
          "declaration": {
            "name": "PageControlsElement",
            "module": "src/elements/e-page-controls.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-page-controls",
          "declaration": {
            "name": "PageControlsElement",
            "module": "src/elements/e-page-controls.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source-and-cards.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourceAndCardsElement",
          "members": [
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "cards",
              "type": {
                "text": "CardFromSource[]"
              },
              "attribute": "cards"
            },
            {
              "kind": "field",
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "showSourceType"
            },
            {
              "kind": "field",
              "name": "mainSourceElement",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "method",
              "name": "#onBossNavigation"
            },
            {
              "kind": "method",
              "name": "cardsList"
            }
          ],
          "attributes": [
            {
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "fieldName": "source"
            },
            {
              "name": "cards",
              "type": {
                "text": "CardFromSource[]"
              },
              "fieldName": "cards"
            },
            {
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showSourceType"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-source-and-cards",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourceAndCardsElement",
          "declaration": {
            "name": "SourceAndCardsElement",
            "module": "src/elements/e-source-and-cards.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-source-and-cards",
          "declaration": {
            "name": "SourceAndCardsElement",
            "module": "src/elements/e-source-and-cards.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source-type.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "sourceTypeHref",
          "parameters": [
            {
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              }
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "SourceTypeElement",
          "members": [
            {
              "kind": "field",
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "attribute": "sourceType",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#setViewTransitionName"
            }
          ],
          "attributes": [
            {
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "fieldName": "sourceType"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-source-type",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sourceTypeHref",
          "declaration": {
            "name": "sourceTypeHref",
            "module": "src/elements/e-source-type.ts"
          }
        },
        {
          "kind": "js",
          "name": "SourceTypeElement",
          "declaration": {
            "name": "SourceTypeElement",
            "module": "src/elements/e-source-type.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-source-type",
          "declaration": {
            "name": "SourceTypeElement",
            "module": "src/elements/e-source-type.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "NoSourceInPoeDataError",
          "superclass": {
            "name": "Error",
            "module": "src/elements/e-source.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "SourceElement",
          "members": [
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "showSourceType"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'small'",
              "attribute": "size"
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "attribute": "renderMode"
            },
            {
              "kind": "field",
              "name": "actSize",
              "type": {
                "text": "'small' | 'large' | undefined"
              },
              "attribute": "actSize"
            },
            {
              "kind": "field",
              "name": "sourceHasSpecialElement",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#setViewTransitionName",
              "parameters": [
                {
                  "name": "transitionName",
                  "default": "'source'"
                }
              ]
            },
            {
              "kind": "method",
              "name": "sourceElement",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "mapboss",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "iMaps",
                  "type": {
                    "text": "IMap[]"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "fieldName": "source"
            },
            {
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showSourceType"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'small'",
              "fieldName": "size"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'normal'",
              "fieldName": "renderMode"
            },
            {
              "name": "actSize",
              "type": {
                "text": "'small' | 'large' | undefined"
              },
              "fieldName": "actSize"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-source",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "NoSourceInPoeDataError",
          "declaration": {
            "name": "NoSourceInPoeDataError",
            "module": "src/elements/e-source.ts"
          }
        },
        {
          "kind": "js",
          "name": "SourceElement",
          "declaration": {
            "name": "SourceElement",
            "module": "src/elements/e-source.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-source",
          "declaration": {
            "name": "SourceElement",
            "module": "src/elements/e-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/e-sourceful-divcord-record.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourcefulDivcordRecordElement",
          "members": [
            {
              "kind": "field",
              "name": "record",
              "type": {
                "text": "SourcefulDivcordTableRecord"
              },
              "attribute": "record"
            },
            {
              "kind": "method",
              "name": "formattedNotes"
            },
            {
              "kind": "method",
              "name": "greynote",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "tagHypothesis",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "wikiDisagreements",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "sourcesWithTagButNotOnWiki",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "notes",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "record",
              "type": {
                "text": "SourcefulDivcordTableRecord"
              },
              "fieldName": "record"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-sourceful-divcord-record",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourcefulDivcordRecordElement",
          "declaration": {
            "name": "SourcefulDivcordRecordElement",
            "module": "src/elements/e-sourceful-divcord-record.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-sourceful-divcord-record",
          "declaration": {
            "name": "SourcefulDivcordRecordElement",
            "module": "src/elements/e-sourceful-divcord-record.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/jsons/jsons.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "divcordRecords",
          "default": "divcordRecordsJson"
        },
        {
          "kind": "variable",
          "name": "poeDataJson",
          "default": "_poeDataJson"
        },
        {
          "kind": "variable",
          "name": "divcordData",
          "default": "divcordDataJson"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "divcordRecords",
          "declaration": {
            "name": "divcordRecords",
            "module": "src/jsons/jsons.ts"
          }
        },
        {
          "kind": "js",
          "name": "poeDataJson",
          "declaration": {
            "name": "poeDataJson",
            "module": "src/jsons/jsons.ts"
          }
        },
        {
          "kind": "js",
          "name": "divcordData",
          "declaration": {
            "name": "divcordData",
            "module": "src/jsons/jsons.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/e-card-with-sources.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardWithSourcesElement",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minLevel",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "minLevel"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              },
              "attribute": "divcordTable"
            },
            {
              "kind": "field",
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'compact'",
              "attribute": "renderMode"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "minLevel",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "minLevel"
            },
            {
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              },
              "fieldName": "divcordTable"
            },
            {
              "name": "renderMode",
              "type": {
                "text": "RenderMode"
              },
              "default": "'compact'",
              "fieldName": "renderMode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-card-with-sources",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardWithSourcesElement",
          "declaration": {
            "name": "CardWithSourcesElement",
            "module": "src/pages/e-card-with-sources.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-card-with-sources",
          "declaration": {
            "name": "CardWithSourcesElement",
            "module": "src/pages/e-card-with-sources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/e-cards-list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardsListElement",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cardSize",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "cardSize",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "sourcesByCards",
              "type": {
                "text": "Readonly<Record<string, ISource[]>>"
              }
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filtered",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "paginated",
              "readonly": true
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "cardSize",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "cardSize"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-cards-list",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardsListElement",
          "declaration": {
            "name": "CardsListElement",
            "module": "src/pages/e-cards-list.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-cards-list",
          "declaration": {
            "name": "CardsListElement",
            "module": "src/pages/e-cards-list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardPage",
          "members": [
            {
              "kind": "field",
              "name": "card",
              "type": {
                "text": "string"
              },
              "attribute": "card",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            }
          ],
          "attributes": [
            {
              "name": "card",
              "type": {
                "text": "string"
              },
              "fieldName": "card"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardPage",
          "declaration": {
            "name": "CardPage",
            "module": "src/pages/p-card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-card",
          "declaration": {
            "name": "CardPage",
            "module": "src/pages/p-card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-cards-table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CardsTablePage",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cardSize",
              "type": {
                "text": "CardSize"
              },
              "default": "'small'",
              "attribute": "cardSize",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "sourcesByCards",
              "type": {
                "text": "Readonly<Record<string, ISource[]>>"
              }
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#onCardnameInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#oncardSizeSelect",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "cardSize",
              "type": {
                "text": "CardSize"
              },
              "default": "'small'",
              "fieldName": "cardSize"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-cards-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CardsTablePage",
          "declaration": {
            "name": "CardsTablePage",
            "module": "src/pages/p-cards-table.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-cards-table",
          "declaration": {
            "name": "CardsTablePage",
            "module": "src/pages/p-cards-table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-divcord.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivcordTablePage",
          "members": [
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "ageEl",
              "type": {
                "text": "DivcordRecordsAgeElement"
              }
            },
            {
              "kind": "method",
              "name": "#onRecordsUpdated"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-divcord",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "RelativeTimeElement",
          "members": [
            {
              "kind": "field",
              "name": "#fmt",
              "privacy": "private",
              "default": "new Intl.RelativeTimeFormat('en')"
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date"
              },
              "attribute": "date"
            },
            {
              "kind": "field",
              "name": "unit",
              "type": {
                "text": "'seconds' | 'minutes' | undefined"
              },
              "attribute": "unit"
            },
            {
              "kind": "method",
              "name": "minutes"
            },
            {
              "kind": "method",
              "name": "seconds"
            },
            {
              "kind": "method",
              "name": "minutesRelativeString"
            },
            {
              "kind": "method",
              "name": "secondsRelativeString"
            }
          ],
          "attributes": [
            {
              "name": "date",
              "type": {
                "text": "Date"
              },
              "fieldName": "date"
            },
            {
              "name": "unit",
              "type": {
                "text": "'seconds' | 'minutes' | undefined"
              },
              "fieldName": "unit"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-relative-time",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "DivcordRecordsAgeElement",
          "members": [
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date | undefined"
              },
              "attribute": "date"
            },
            {
              "kind": "field",
              "name": "lastUpdated",
              "default": "new Task(this, {\r\n\t\tasync task() {\r\n\t\t\treturn await divcordService.cacheDate();\r\n\t\t},\r\n\t\targs: () => [],\r\n\t})"
            }
          ],
          "attributes": [
            {
              "name": "date",
              "type": {
                "text": "Date | undefined"
              },
              "fieldName": "date"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-divcord-records-age",
          "customElement": true
        },
        {
          "kind": "class",
          "description": "",
          "name": "UpdateDivcordDataElement",
          "members": [
            {
              "kind": "field",
              "name": "loaderState",
              "type": {
                "text": "DivcordServiceState"
              }
            },
            {
              "kind": "field",
              "name": "task",
              "default": "new Task<never, void>(this, {\r\n\t\ttask: async () => {\r\n\t\t\tconst records = await divcordService.update();\r\n\t\t\tconst event = new CustomEvent('records-updated', { detail: records, bubbles: true, composed: true });\r\n\t\t\tthis.dispatchEvent(event);\r\n\t\t},\r\n\t})"
            },
            {
              "kind": "method",
              "name": "loadBtn",
              "privacy": "protected"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-update-divcord-data",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivcordTablePage",
          "declaration": {
            "name": "DivcordTablePage",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-divcord",
          "declaration": {
            "name": "DivcordTablePage",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "RelativeTimeElement",
          "declaration": {
            "name": "RelativeTimeElement",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-relative-time",
          "declaration": {
            "name": "RelativeTimeElement",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "DivcordRecordsAgeElement",
          "declaration": {
            "name": "DivcordRecordsAgeElement",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-divcord-records-age",
          "declaration": {
            "name": "DivcordRecordsAgeElement",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "js",
          "name": "UpdateDivcordDataElement",
          "declaration": {
            "name": "UpdateDivcordDataElement",
            "module": "src/pages/p-divcord.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-update-divcord-data",
          "declaration": {
            "name": "UpdateDivcordDataElement",
            "module": "src/pages/p-divcord.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-home.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "HomePage",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            },
            {
              "kind": "method",
              "name": "#onCardnameInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "filtered",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "paginated",
              "readonly": true
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-home",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HomePage",
          "declaration": {
            "name": "HomePage",
            "module": "src/pages/p-home.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-home",
          "declaration": {
            "name": "HomePage",
            "module": "src/pages/p-home.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-maps-table.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MapsTablePage",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "cardsFinder",
              "type": {
                "text": "CardsFinder"
              }
            },
            {
              "kind": "field",
              "name": "cardsByMaps",
              "type": {
                "text": "Record<string, CardFromSource[]>"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "filtered",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "paginated",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#onMapnameInput",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#oncardSizeSelect",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "InputEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "maps"
            },
            {
              "kind": "method",
              "name": "table",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-maps-table",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MapsTablePage",
          "declaration": {
            "name": "MapsTablePage",
            "module": "src/pages/p-maps-table.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-maps-table",
          "declaration": {
            "name": "MapsTablePage",
            "module": "src/pages/p-maps-table.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-source-type.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourceTypePage",
          "members": [
            {
              "kind": "field",
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "attribute": "sourceType",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "sourcesAndCards",
              "type": {
                "text": "SourceAndCards[]"
              },
              "default": "[]"
            }
          ],
          "attributes": [
            {
              "name": "sourceType",
              "type": {
                "text": "SourceType"
              },
              "fieldName": "sourceType"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-source-type",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourceTypePage",
          "declaration": {
            "name": "SourceTypePage",
            "module": "src/pages/p-source-type.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-source-type",
          "declaration": {
            "name": "SourceTypePage",
            "module": "src/pages/p-source-type.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-source.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourcePage",
          "members": [
            {
              "kind": "field",
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "attribute": "source"
            },
            {
              "kind": "field",
              "name": "cardsFinder",
              "type": {
                "text": "CardsFinder"
              }
            },
            {
              "kind": "field",
              "name": "cards",
              "type": {
                "text": "CardFromSource[]"
              }
            }
          ],
          "attributes": [
            {
              "name": "source",
              "type": {
                "text": "ISource"
              },
              "fieldName": "source"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-source",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourcePage",
          "declaration": {
            "name": "SourcePage",
            "module": "src/pages/p-source.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-source",
          "declaration": {
            "name": "SourcePage",
            "module": "src/pages/p-source.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pages/p-sources.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SourcesPage",
          "members": [
            {
              "kind": "field",
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "perPage",
              "type": {
                "text": "number"
              },
              "default": "10",
              "attribute": "per-page",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'large'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "filter",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "showSourceType"
            },
            {
              "kind": "field",
              "name": "firstColumnName",
              "type": {
                "text": "string"
              },
              "default": "'Source'",
              "attribute": "firstColumnName"
            },
            {
              "kind": "field",
              "name": "allSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "attribute": "allSourceTypes"
            },
            {
              "kind": "field",
              "name": "selectedSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "default": "[]",
              "attribute": "selectedSourceTypes"
            },
            {
              "kind": "field",
              "name": "divcordTable",
              "type": {
                "text": "SourcefulDivcordTable"
              }
            },
            {
              "kind": "field",
              "name": "sourcesAndCards",
              "type": {
                "text": "SourceAndCards[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "sourcetypesCountsMap",
              "type": {
                "text": "Map<SourceType, number>"
              }
            },
            {
              "kind": "field",
              "name": "records",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#onSlSelectChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "page",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "page"
            },
            {
              "name": "per-page",
              "type": {
                "text": "number"
              },
              "default": "10",
              "fieldName": "perPage"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'large'",
              "fieldName": "size"
            },
            {
              "name": "filter",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "filter"
            },
            {
              "name": "showSourceType",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showSourceType"
            },
            {
              "name": "firstColumnName",
              "type": {
                "text": "string"
              },
              "default": "'Source'",
              "fieldName": "firstColumnName"
            },
            {
              "name": "allSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "fieldName": "allSourceTypes"
            },
            {
              "name": "selectedSourceTypes",
              "type": {
                "text": "SourceType[]"
              },
              "default": "[]",
              "fieldName": "selectedSourceTypes"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "p-sources",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SourcesPage",
          "declaration": {
            "name": "SourcesPage",
            "module": "src/pages/p-sources.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "p-sources",
          "declaration": {
            "name": "SourcesPage",
            "module": "src/pages/p-sources.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/pkg/sources_wasm.js",
      "declarations": [
        {
          "kind": "function",
          "name": "parsed_records",
          "parameters": [
            {
              "name": "divcord_table",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "poe_data",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "toast",
              "type": {
                "text": "Function"
              }
            }
          ],
          "return": {
            "type": {
              "text": "any"
            }
          }
        },
        {
          "kind": "function",
          "name": "initSync",
          "parameters": [
            {
              "name": "module"
            }
          ]
        },
        {
          "kind": "function",
          "name": "__wbg_init",
          "parameters": [
            {
              "name": "input"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parsed_records",
          "declaration": {
            "name": "parsed_records",
            "module": "src/pkg/sources_wasm.js"
          }
        },
        {
          "kind": "js",
          "name": "initSync",
          "declaration": {
            "name": "initSync",
            "module": "src/pkg/sources_wasm.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "__wbg_init",
            "module": "src/pkg/sources_wasm.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/divination-card/data.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "cardsDataMap",
          "default": "new Map<string, CardData>()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cardsDataMap",
          "declaration": {
            "name": "cardsDataMap",
            "module": "src/elements/divination-card/data.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/divination-card/e-divination-card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "DivinationCardElement",
          "members": [
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "minLevel",
              "type": {
                "text": "number | undefined"
              },
              "attribute": "minLevel"
            },
            {
              "kind": "field",
              "name": "boss",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "boss",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stackSize",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "flavourText",
              "type": {
                "text": "string"
              },
              "default": "``"
            },
            {
              "kind": "field",
              "name": "artFilename",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "rewardHtml",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "imageUrl",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "nameMarginTop",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "size",
                  "type": {
                    "text": "CardSize"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onNavigation"
            },
            {
              "kind": "method",
              "name": "divider",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "footer",
              "privacy": "protected"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "name"
            },
            {
              "name": "size",
              "type": {
                "text": "CardSize"
              },
              "default": "'medium'",
              "fieldName": "size"
            },
            {
              "name": "minLevel",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "minLevel"
            },
            {
              "name": "boss",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "boss"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-divination-card",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DivinationCardElement",
          "declaration": {
            "name": "DivinationCardElement",
            "module": "src/elements/divination-card/e-divination-card.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-divination-card",
          "declaration": {
            "name": "DivinationCardElement",
            "module": "src/elements/divination-card/e-divination-card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/input/e-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "InputElement",
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "datalistItems",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "attribute": "datalistItems"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "__numberInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "__dateInput",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "| 'date'\r\n\t\t| 'datetime-local'\r\n\t\t| 'email'\r\n\t\t| 'number'\r\n\t\t| 'password'\r\n\t\t| 'search'\r\n\t\t| 'tel'\r\n\t\t| 'text'\r\n\t\t| 'time'\r\n\t\t| 'url'"
              },
              "default": "'text'",
              "description": "The type of input. Works the same as a native `<input>` element, but only a subset of types are supported. Defaults\r\nto `text`.",
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "internals"
            },
            {
              "kind": "field",
              "name": "list",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "list"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled input.",
              "attribute": "filled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style input with rounded edges.",
              "attribute": "pill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's label. If you need to display HTML, use the `label` slot instead.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "helpText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead.",
              "attribute": "help-text"
            },
            {
              "kind": "field",
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is not empty.",
              "attribute": "clearable"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "passwordToggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "attribute": "password-toggle"
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "attribute": "password-visible"
            },
            {
              "kind": "field",
              "name": "noSpinButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "attribute": "no-spin-buttons"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\r\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\r\nthe same document or shadow root for this to work.",
              "attribute": "form",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "attribute": "required",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression pattern to validate input against.",
              "attribute": "pattern"
            },
            {
              "kind": "field",
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "attribute": "minlength"
            },
            {
              "kind": "field",
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "attribute": "maxlength"
            },
            {
              "kind": "field",
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value. Only applies to date and number input types.",
              "attribute": "min"
            },
            {
              "kind": "field",
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value. Only applies to date and number input types.",
              "attribute": "max"
            },
            {
              "kind": "field",
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\r\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "attribute": "step"
            },
            {
              "kind": "field",
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "attribute": "autocapitalize"
            },
            {
              "kind": "field",
              "name": "autocorrect",
              "type": {
                "text": "'off' | 'on'"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "attribute": "autocorrect"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\r\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "attribute": "autocomplete"
            },
            {
              "kind": "field",
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "attribute": "autofocus"
            },
            {
              "kind": "field",
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "attribute": "enterkeyhint"
            },
            {
              "kind": "field",
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the input.",
              "attribute": "spellcheck"
            },
            {
              "kind": "field",
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\r\nkeyboard on supportive devices.",
              "attribute": "inputmode"
            },
            {
              "kind": "field",
              "name": "valueAsDate",
              "description": "Gets or sets the current value as a `Date` object. Returns `null` if the value can't be converted. This will use the native `<input type=\"{{type}}\">` implementation and may result in an error."
            },
            {
              "kind": "field",
              "name": "valueAsNumber",
              "description": "Gets or sets the current value as a number. Returns `NaN` if the value can't be converted."
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClearClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInput",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handlePasswordToggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the input."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the input."
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects all the text in the input."
            },
            {
              "kind": "method",
              "name": "setSelectionRange",
              "parameters": [
                {
                  "name": "selectionStart",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionEnd",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectionDirection",
                  "default": "'none'",
                  "type": {
                    "text": "'forward' | 'backward' | 'none'"
                  }
                }
              ],
              "description": "Sets the start and end positions of the text selection (0-based)."
            },
            {
              "kind": "method",
              "name": "setRangeText",
              "parameters": [
                {
                  "name": "replacement",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "start",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "selectMode",
                  "default": "'preserve'",
                  "type": {
                    "text": "'select' | 'start' | 'end' | 'preserve'"
                  }
                }
              ],
              "description": "Replaces a range of text with a new string."
            },
            {
              "kind": "method",
              "name": "showPicker",
              "description": "Displays the browser picker for an input element (only works if the browser supports it for the input type)."
            },
            {
              "kind": "method",
              "name": "stepUp",
              "description": "Increments the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "stepDown",
              "description": "Decrements the value of a numeric input type by the value of the step attribute."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            }
          ],
          "events": [
            {
              "name": "input",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "datalistItems",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "fieldName": "datalistItems"
            },
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "type",
              "type": {
                "text": "| 'date'\r\n\t\t| 'datetime-local'\r\n\t\t| 'email'\r\n\t\t| 'number'\r\n\t\t| 'password'\r\n\t\t| 'search'\r\n\t\t| 'tel'\r\n\t\t| 'text'\r\n\t\t| 'time'\r\n\t\t| 'url'"
              },
              "default": "'text'",
              "description": "The type of input. Works the same as a native `<input>` element, but only a subset of types are supported. Defaults\r\nto `text`.",
              "fieldName": "type"
            },
            {
              "name": "list",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "list"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the input, submitted as a name/value pair with form data.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The current value of the input, submitted as a name/value pair with form data.",
              "fieldName": "value"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The input's size.",
              "fieldName": "size"
            },
            {
              "name": "filled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a filled input.",
              "fieldName": "filled"
            },
            {
              "name": "pill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a pill-style input with rounded edges.",
              "fieldName": "pill"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's label. If you need to display HTML, use the `label` slot instead.",
              "fieldName": "label"
            },
            {
              "name": "help-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The input's help text. If you need to display HTML, use the `help-text` slot instead.",
              "fieldName": "helpText"
            },
            {
              "name": "clearable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a clear button when the input is not empty.",
              "fieldName": "clearable"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the input.",
              "fieldName": "disabled"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Placeholder text to show as a hint when the input is empty.",
              "fieldName": "placeholder"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input readonly.",
              "fieldName": "readonly"
            },
            {
              "name": "password-toggle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adds a button to toggle the password's visibility. Only applies to password types.",
              "fieldName": "passwordToggle"
            },
            {
              "name": "password-visible",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines whether or not the password is currently visible. Only applies to password input types.",
              "fieldName": "passwordVisible"
            },
            {
              "name": "no-spin-buttons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hides the browser's built-in increment/decrement spin buttons for number inputs.",
              "fieldName": "noSpinButtons"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "By default, form controls are associated with the nearest containing `<form>` element. This attribute allows you\r\nto place the form control outside of a form and associate it with the form that has this `id`. The form must be in\r\nthe same document or shadow root for this to work.",
              "fieldName": "form"
            },
            {
              "name": "required",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Makes the input a required field.",
              "fieldName": "required"
            },
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "A regular expression pattern to validate input against.",
              "fieldName": "pattern"
            },
            {
              "name": "minlength",
              "type": {
                "text": "number"
              },
              "description": "The minimum length of input that will be considered valid.",
              "fieldName": "minlength"
            },
            {
              "name": "maxlength",
              "type": {
                "text": "number"
              },
              "description": "The maximum length of input that will be considered valid.",
              "fieldName": "maxlength"
            },
            {
              "name": "min",
              "type": {
                "text": "number | string"
              },
              "description": "The input's minimum value. Only applies to date and number input types.",
              "fieldName": "min"
            },
            {
              "name": "max",
              "type": {
                "text": "number | string"
              },
              "description": "The input's maximum value. Only applies to date and number input types.",
              "fieldName": "max"
            },
            {
              "name": "step",
              "type": {
                "text": "number | 'any'"
              },
              "description": "Specifies the granularity that the value must adhere to, or the special value `any` which means no stepping is\r\nimplied, allowing any numeric value. Only applies to date and number input types.",
              "fieldName": "step"
            },
            {
              "name": "autocapitalize",
              "type": {
                "text": "'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters'"
              },
              "description": "Controls whether and how text input is automatically capitalized as it is entered by the user.",
              "fieldName": "autocapitalize"
            },
            {
              "name": "autocorrect",
              "type": {
                "text": "'off' | 'on'"
              },
              "description": "Indicates whether the browser's autocorrect feature is on or off.",
              "fieldName": "autocorrect"
            },
            {
              "name": "autocomplete",
              "type": {
                "text": "string"
              },
              "description": "Specifies what permission the browser has to provide assistance in filling out form field values. Refer to\r\n[this page on MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) for available values.",
              "fieldName": "autocomplete"
            },
            {
              "name": "autofocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates that the input should receive focus on page load.",
              "fieldName": "autofocus"
            },
            {
              "name": "enterkeyhint",
              "type": {
                "text": "'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'"
              },
              "description": "Used to customize the label or icon of the Enter key on virtual keyboards.",
              "fieldName": "enterkeyhint"
            },
            {
              "name": "spellcheck",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Enables spell checking on the input.",
              "fieldName": "spellcheck"
            },
            {
              "name": "inputmode",
              "type": {
                "text": "'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url'"
              },
              "description": "Tells the browser what type of data will be entered by the user, allowing it to display the appropriate virtual\r\nkeyboard on supportive devices.",
              "fieldName": "inputmode"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "e-input",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputElement",
          "declaration": {
            "name": "InputElement",
            "module": "src/elements/input/e-input.ts"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "e-input",
          "declaration": {
            "name": "InputElement",
            "module": "src/elements/input/e-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/elements/input/input.styles.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "src/elements/input/input.styles.ts"
          }
        }
      ]
    }
  ]
}
